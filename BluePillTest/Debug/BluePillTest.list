
BluePillTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dac8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0800dbd8  0800dbd8  0000ebd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e358  0800e358  000101f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e358  0800e358  0000f358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e360  0800e360  000101f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e360  0800e360  0000f360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e364  0800e364  0000f364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800e368  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  200001f8  0800e560  000101f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  0800e560  000106f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f36  00000000  00000000  00010221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002924  00000000  00000000  00023157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00025a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f42  00000000  00000000  00026de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d81  00000000  00000000  00027d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e6c  00000000  00000000  00041aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092d42  00000000  00000000  0005790f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea651  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006edc  00000000  00000000  000ea694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f1570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800dbc0 	.word	0x0800dbc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800dbc0 	.word	0x0800dbc0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f7ff fc29 	bl	80009bc <__aeabi_dcmplt>
 800116a:	b928      	cbnz	r0, 8001178 <__aeabi_d2lz+0x1c>
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001174:	f000 b80a 	b.w	800118c <__aeabi_d2ulz>
 8001178:	4620      	mov	r0, r4
 800117a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800117e:	f000 f805 	bl	800118c <__aeabi_d2ulz>
 8001182:	4240      	negs	r0, r0
 8001184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <__aeabi_d2ulz>:
 800118c:	b5d0      	push	{r4, r6, r7, lr}
 800118e:	2200      	movs	r2, #0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__aeabi_d2ulz+0x34>)
 8001192:	4606      	mov	r6, r0
 8001194:	460f      	mov	r7, r1
 8001196:	f7ff f99f 	bl	80004d8 <__aeabi_dmul>
 800119a:	f7ff fc75 	bl	8000a88 <__aeabi_d2uiz>
 800119e:	4604      	mov	r4, r0
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <__aeabi_d2ulz+0x38>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f7fe ffd8 	bl	8000168 <__aeabi_dsub>
 80011b8:	f7ff fc66 	bl	8000a88 <__aeabi_d2uiz>
 80011bc:	4621      	mov	r1, r4
 80011be:	bdd0      	pop	{r4, r6, r7, pc}
 80011c0:	3df00000 	.word	0x3df00000
 80011c4:	41f00000 	.word	0x41f00000

080011c8 <BMP388_Init>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_Init(BMP388_HandleTypeDef *bmp){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t chip_id;

	// Read CHIP_ID byte
	rslt = BMP388_ReadBytes(bmp, CHIP_ID, &chip_id, 1);
 80011d0:	f107 020e 	add.w	r2, r7, #14
 80011d4:	2301      	movs	r3, #1
 80011d6:	2100      	movs	r1, #0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fc0d 	bl	80019f8 <BMP388_ReadBytes>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
	if(rslt == HAL_OK && chip_id == BMP3_CHIP_ID){
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d114      	bne.n	8001212 <BMP388_Init+0x4a>
 80011e8:	7bbb      	ldrb	r3, [r7, #14]
 80011ea:	2b50      	cmp	r3, #80	@ 0x50
 80011ec:	d111      	bne.n	8001212 <BMP388_Init+0x4a>
		// using softreset command
		rslt = BMP388_SoftReset(bmp);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f94c 	bl	800148c <BMP388_SoftReset>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d107      	bne.n	800120e <BMP388_Init+0x46>
			// get calibration data
			rslt = BMP388_GetCalibData(bmp);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f984 	bl	800150c <BMP388_GetCalibData>
 8001204:	4603      	mov	r3, r0
 8001206:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8001208:	bf00      	nop
	}
	else{
		return rslt;
	}

	return rslt;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	e002      	b.n	8001214 <BMP388_Init+0x4c>
			return rslt;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	e000      	b.n	8001214 <BMP388_Init+0x4c>
		return rslt;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <BMP388_SetTempOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetTempOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	2b05      	cmp	r3, #5
 800122c:	d901      	bls.n	8001232 <BMP388_SetTempOS+0x16>
		return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <BMP388_SetTempOS+0x34>
	}
	bmp->osr = (bmp->osr & 0xC7) | (oversample << 3); // == 0b11000111
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	791b      	ldrb	r3, [r3, #4]
 8001236:	b25b      	sxtb	r3, r3
 8001238:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800123c:	b25a      	sxtb	r2, r3
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	b25b      	sxtb	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b25b      	sxtb	r3, r3
 8001248:	b2da      	uxtb	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <BMP388_SetPressOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetPressOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	2b05      	cmp	r3, #5
 800126a:	d901      	bls.n	8001270 <BMP388_SetPressOS+0x16>
		return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e00d      	b.n	800128c <BMP388_SetPressOS+0x32>
	}
	bmp->osr = (bmp->osr & 0xF8) | oversample; // 0xF8 == 0b11111000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	791b      	ldrb	r3, [r3, #4]
 8001274:	b25b      	sxtb	r3, r3
 8001276:	f023 0307 	bic.w	r3, r3, #7
 800127a:	b25a      	sxtb	r2, r3
 800127c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001280:	4313      	orrs	r3, r2
 8001282:	b25b      	sxtb	r3, r3
 8001284:	b2da      	uxtb	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <BMP388_SetIIRFilterCoeff>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong filter coefficient
 */
HAL_StatusTypeDef BMP388_SetIIRFilterCoeff(BMP388_HandleTypeDef *bmp, uint8_t filtercoeff){
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	70fb      	strb	r3, [r7, #3]
	if(filtercoeff > BMP3_IIR_FILTER_COEFF_127){
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	2b07      	cmp	r3, #7
 80012a6:	d901      	bls.n	80012ac <BMP388_SetIIRFilterCoeff+0x16>
		return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e005      	b.n	80012b8 <BMP388_SetIIRFilterCoeff+0x22>
	}
	bmp->iir = filtercoeff << 1;
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <BMP388_SetOutputDataRate>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetOutputDataRate(BMP388_HandleTypeDef *bmp, uint8_t odr){
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	70fb      	strb	r3, [r7, #3]
	if(odr > BMP3_ODR_0_001_HZ){
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	2b11      	cmp	r3, #17
 80012d2:	d901      	bls.n	80012d8 <BMP388_SetOutputDataRate+0x16>
		return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e003      	b.n	80012e0 <BMP388_SetOutputDataRate+0x1e>
	}
	bmp->odr = odr;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	719a      	strb	r2, [r3, #6]
	return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <BMP388_ReadRawPressTempTime>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadRawPressTempTime(BMP388_HandleTypeDef *bmp, uint32_t *raw_pressure, uint32_t *raw_temperature, uint32_t *time){
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b088      	sub	sp, #32
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef rslt;
	uint8_t pwr_ctrl = BMP3_PWR_CTRL_PRESS_ON | BMP3_PWR_CTRL_TEMP_ON | BMP3_PWR_CTRL_MODE_FORCED;
 80012f8:	2313      	movs	r3, #19
 80012fa:	77bb      	strb	r3, [r7, #30]

	uint8_t oversampling = bmp->osr;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	791b      	ldrb	r3, [r3, #4]
 8001300:	777b      	strb	r3, [r7, #29]
	uint8_t odr = bmp->odr;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	799b      	ldrb	r3, [r3, #6]
 8001306:	773b      	strb	r3, [r7, #28]
	uint8_t filtercoeff = bmp->iir;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	795b      	ldrb	r3, [r3, #5]
 800130c:	76fb      	strb	r3, [r7, #27]



	// Set OSR register
	rslt = BMP388_WriteBytes(bmp, OSR, &oversampling, 1);
 800130e:	f107 021d 	add.w	r2, r7, #29
 8001312:	2301      	movs	r3, #1
 8001314:	211c      	movs	r1, #28
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 fb8c 	bl	8001a34 <BMP388_WriteBytes>
 800131c:	4603      	mov	r3, r0
 800131e:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 8001320:	7ffb      	ldrb	r3, [r7, #31]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <BMP388_ReadRawPressTempTime+0x40>
		return rslt;
 8001326:	7ffb      	ldrb	r3, [r7, #31]
 8001328:	e053      	b.n	80013d2 <BMP388_ReadRawPressTempTime+0xe8>
	}
	// Set ODR register
	rslt = BMP388_WriteBytes(bmp, ODR, &odr, 1);
 800132a:	f107 021c 	add.w	r2, r7, #28
 800132e:	2301      	movs	r3, #1
 8001330:	211d      	movs	r1, #29
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 fb7e 	bl	8001a34 <BMP388_WriteBytes>
 8001338:	4603      	mov	r3, r0
 800133a:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 800133c:	7ffb      	ldrb	r3, [r7, #31]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <BMP388_ReadRawPressTempTime+0x5c>
		return rslt;
 8001342:	7ffb      	ldrb	r3, [r7, #31]
 8001344:	e045      	b.n	80013d2 <BMP388_ReadRawPressTempTime+0xe8>
	}
	// Set CONFIG register
	rslt = BMP388_WriteBytes(bmp, CONFIG, &filtercoeff, 1);
 8001346:	f107 021b 	add.w	r2, r7, #27
 800134a:	2301      	movs	r3, #1
 800134c:	211f      	movs	r1, #31
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 fb70 	bl	8001a34 <BMP388_WriteBytes>
 8001354:	4603      	mov	r3, r0
 8001356:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 8001358:	7ffb      	ldrb	r3, [r7, #31]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <BMP388_ReadRawPressTempTime+0x78>
		return rslt;
 800135e:	7ffb      	ldrb	r3, [r7, #31]
 8001360:	e037      	b.n	80013d2 <BMP388_ReadRawPressTempTime+0xe8>
	}
	// Set PWR_CTRL register
	rslt = BMP388_WriteBytes(bmp, PWR_CTRL, &pwr_ctrl, 1);
 8001362:	f107 021e 	add.w	r2, r7, #30
 8001366:	2301      	movs	r3, #1
 8001368:	211b      	movs	r1, #27
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 fb62 	bl	8001a34 <BMP388_WriteBytes>
 8001370:	4603      	mov	r3, r0
 8001372:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 8001374:	7ffb      	ldrb	r3, [r7, #31]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <BMP388_ReadRawPressTempTime+0x94>
		return rslt;
 800137a:	7ffb      	ldrb	r3, [r7, #31]
 800137c:	e029      	b.n	80013d2 <BMP388_ReadRawPressTempTime+0xe8>
	}

	uint8_t raw_data[11];
	// Get raw data for pressure and temperature
	rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 11);
 800137e:	f107 0210 	add.w	r2, r7, #16
 8001382:	230b      	movs	r3, #11
 8001384:	2104      	movs	r1, #4
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f000 fb36 	bl	80019f8 <BMP388_ReadBytes>
 800138c:	4603      	mov	r3, r0
 800138e:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 8001390:	7ffb      	ldrb	r3, [r7, #31]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <BMP388_ReadRawPressTempTime+0xb0>
		return rslt;
 8001396:	7ffb      	ldrb	r3, [r7, #31]
 8001398:	e01b      	b.n	80013d2 <BMP388_ReadRawPressTempTime+0xe8>
	}

	// Parsing pressure data
	*raw_pressure = (uint32_t)raw_data[2] << 16 | (uint32_t)raw_data[1] << 8 | (uint32_t)raw_data[0];
 800139a:	7cbb      	ldrb	r3, [r7, #18]
 800139c:	041a      	lsls	r2, r3, #16
 800139e:	7c7b      	ldrb	r3, [r7, #17]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	4313      	orrs	r3, r2
 80013a4:	7c3a      	ldrb	r2, [r7, #16]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	601a      	str	r2, [r3, #0]

	// Parsing temperature data
	*raw_temperature = (uint32_t)raw_data[5] << 16 | (uint32_t)raw_data[4] << 8 | (uint32_t)raw_data[3];
 80013ac:	7d7b      	ldrb	r3, [r7, #21]
 80013ae:	041a      	lsls	r2, r3, #16
 80013b0:	7d3b      	ldrb	r3, [r7, #20]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	4313      	orrs	r3, r2
 80013b6:	7cfa      	ldrb	r2, [r7, #19]
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	601a      	str	r2, [r3, #0]

	// Parsing time bytes
	*time = (uint32_t)raw_data[10] << 16 | (uint32_t)raw_data[9] << 8 | (uint32_t)raw_data[8];
 80013be:	7ebb      	ldrb	r3, [r7, #26]
 80013c0:	041a      	lsls	r2, r3, #16
 80013c2:	7e7b      	ldrb	r3, [r7, #25]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	4313      	orrs	r3, r2
 80013c8:	7e3a      	ldrb	r2, [r7, #24]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	601a      	str	r2, [r3, #0]


	return rslt;
 80013d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <BMP388_CompensateRawPressTemp>:
 *	@param[out]	temperature		: Pointer to the variable that contain temperature.
 *
 *  @return none
 */
void BMP388_CompensateRawPressTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_pressure, uint32_t raw_temperature,
									  	  	  	  	  	  	  float *pressure, float *temperature){
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	603b      	str	r3, [r7, #0]
	float temp;
	float press;

	BMP388_CompensateTemp(bmp, raw_temperature, &temp);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	461a      	mov	r2, r3
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f000 f9ef 	bl	80017d4 <BMP388_CompensateTemp>
	BMP388_CompensatePress(bmp, temp, raw_pressure, &press);
 80013f6:	6979      	ldr	r1, [r7, #20]
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 fa1d 	bl	800183e <BMP388_CompensatePress>

	*pressure = press;
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	601a      	str	r2, [r3, #0]
	*temperature = temp;
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	6a3b      	ldr	r3, [r7, #32]
 800140e:	601a      	str	r2, [r3, #0]
}
 8001410:	bf00      	nop
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <BMP388_FindAltitude>:
 *	@param[in] ground_pressure	: Pressure at ground
 *  @param[in] pressure			: Pressure that measured at flight.
 *
 *  @return Altitude
 */
float BMP388_FindAltitude(float ground_pressure, float pressure){
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]

	// Note that using the equation from wikipedia can give bad results
	// at high altitude. See this thread for more information:
	//  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

	return 44330.0 * (1.0 - pow(pressure / ground_pressure, 0.1903));
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	6838      	ldr	r0, [r7, #0]
 8001426:	f7ff fd61 	bl	8000eec <__aeabi_fdiv>
 800142a:	4603      	mov	r3, r0
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe fffb 	bl	8000428 <__aeabi_f2d>
 8001432:	a311      	add	r3, pc, #68	@ (adr r3, 8001478 <BMP388_FindAltitude+0x60>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f00b fc6e 	bl	800cd18 <pow>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	f04f 0000 	mov.w	r0, #0
 8001444:	4910      	ldr	r1, [pc, #64]	@ (8001488 <BMP388_FindAltitude+0x70>)
 8001446:	f7fe fe8f 	bl	8000168 <__aeabi_dsub>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	a30b      	add	r3, pc, #44	@ (adr r3, 8001480 <BMP388_FindAltitude+0x68>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f83e 	bl	80004d8 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb30 	bl	8000ac8 <__aeabi_d2f>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	f3af 8000 	nop.w
 8001478:	1a36e2eb 	.word	0x1a36e2eb
 800147c:	3fc85bc0 	.word	0x3fc85bc0
 8001480:	00000000 	.word	0x00000000
 8001484:	40e5a540 	.word	0x40e5a540
 8001488:	3ff00000 	.word	0x3ff00000

0800148c <BMP388_SoftReset>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_SoftReset(BMP388_HandleTypeDef *bmp){
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	uint8_t rst_cmnd = BMP388_SOFTRESET;
 8001494:	23b6      	movs	r3, #182	@ 0xb6
 8001496:	73bb      	strb	r3, [r7, #14]
    uint8_t cmd_err_status;

	HAL_StatusTypeDef rslt;

	// Reading STATUS reg to understand that the BMP388 is ready to receive command
	rslt = BMP388_ReadBytes(bmp, STATUS, &cmd_rdy_status, 1);
 8001498:	f107 020d 	add.w	r2, r7, #13
 800149c:	2301      	movs	r3, #1
 800149e:	2103      	movs	r1, #3
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 faa9 	bl	80019f8 <BMP388_ReadBytes>
 80014a6:	4603      	mov	r3, r0
 80014a8:	73fb      	strb	r3, [r7, #15]
	if((rslt == HAL_OK) && (cmd_rdy_status & BMP3_CMD_RDY)){
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d128      	bne.n	8001502 <BMP388_SoftReset+0x76>
 80014b0:	7b7b      	ldrb	r3, [r7, #13]
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d023      	beq.n	8001502 <BMP388_SoftReset+0x76>
		// Writing SOFTRESET command to CMD reg
		rslt = BMP388_WriteBytes(bmp, CMD, &rst_cmnd, 1);
 80014ba:	f107 020e 	add.w	r2, r7, #14
 80014be:	2301      	movs	r3, #1
 80014c0:	217e      	movs	r1, #126	@ 0x7e
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fab6 	bl	8001a34 <BMP388_WriteBytes>
 80014c8:	4603      	mov	r3, r0
 80014ca:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d115      	bne.n	80014fe <BMP388_SoftReset+0x72>
			// 2 ms pause then check ERR reg
			HAL_Delay(2);
 80014d2:	2002      	movs	r0, #2
 80014d4:	f002 fa46 	bl	8003964 <HAL_Delay>
			rslt = BMP388_ReadBytes(bmp, ERR_REG, &cmd_err_status, 1);
 80014d8:	f107 020c 	add.w	r2, r7, #12
 80014dc:	2301      	movs	r3, #1
 80014de:	2102      	movs	r1, #2
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fa89 	bl	80019f8 <BMP388_ReadBytes>
 80014e6:	4603      	mov	r3, r0
 80014e8:	73fb      	strb	r3, [r7, #15]
			if((cmd_err_status & CMD) || (rslt != HAL_OK)){
 80014ea:	7b3b      	ldrb	r3, [r7, #12]
 80014ec:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <BMP388_SoftReset+0x6e>
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <BMP388_SoftReset+0x76>
				return rslt;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	e002      	b.n	8001504 <BMP388_SoftReset+0x78>
			}
		}
		else{
			return rslt;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	e000      	b.n	8001504 <BMP388_SoftReset+0x78>
		}
	}

	return rslt;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <BMP388_GetCalibData>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_GetCalibData(BMP388_HandleTypeDef *bmp){
 800150c:	b580      	push	{r7, lr}
 800150e:	b090      	sub	sp, #64	@ 0x40
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t calib_buff[BMP3_CALIBDATA_LEN] = {0};
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	741a      	strb	r2, [r3, #16]
	int8_t		raw_par_p8;
	int16_t		raw_par_p9;
	int8_t		raw_par_p10;
	int8_t		raw_par_p11;

	rslt = BMP388_ReadBytes(bmp, CALIB_DATA, calib_buff, BMP3_CALIBDATA_LEN);
 8001528:	f107 020c 	add.w	r2, r7, #12
 800152c:	2315      	movs	r3, #21
 800152e:	2131      	movs	r1, #49	@ 0x31
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 fa61 	bl	80019f8 <BMP388_ReadBytes>
 8001536:	4603      	mov	r3, r0
 8001538:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	float temp_var;
	if(rslt == HAL_OK){
 800153c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001540:	2b00      	cmp	r3, #0
 8001542:	f040 8141 	bne.w	80017c8 <BMP388_GetCalibData+0x2bc>
		// PAR_T1
		temp_var = 0.00390625f;
 8001546:	f04f 536e 	mov.w	r3, #998244352	@ 0x3b800000
 800154a:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_t1 = ((uint16_t)calib_buff[1] << 8) | (uint16_t)calib_buff[0];
 800154c:	7b7b      	ldrb	r3, [r7, #13]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b21a      	sxth	r2, r3
 8001552:	7b3b      	ldrb	r3, [r7, #12]
 8001554:	b21b      	sxth	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	b21b      	sxth	r3, r3
 800155a:	86fb      	strh	r3, [r7, #54]	@ 0x36
		bmp->calib_data.par_t1 = (float)raw_par_t1 / temp_var;
 800155c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fbb8 	bl	8000cd4 <__aeabi_ui2f>
 8001564:	4603      	mov	r3, r0
 8001566:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fcbf 	bl	8000eec <__aeabi_fdiv>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	609a      	str	r2, [r3, #8]
		// PAR_T2
		temp_var = 1073741824.f;
 8001576:	f04f 439d 	mov.w	r3, #1317011456	@ 0x4e800000
 800157a:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_t2 = ((uint16_t)calib_buff[3] << 8) | (uint16_t)calib_buff[2];
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	7bbb      	ldrb	r3, [r7, #14]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21b      	sxth	r3, r3
 800158a:	86bb      	strh	r3, [r7, #52]	@ 0x34
		bmp->calib_data.par_t2 = (float)raw_par_t2 / temp_var;
 800158c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fba0 	bl	8000cd4 <__aeabi_ui2f>
 8001594:	4603      	mov	r3, r0
 8001596:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fca7 	bl	8000eec <__aeabi_fdiv>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60da      	str	r2, [r3, #12]
		// PAR_T3
		temp_var = 281474976710656.f;
 80015a6:	f04f 43af 	mov.w	r3, #1468006400	@ 0x57800000
 80015aa:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_t3 = calib_buff[4];
 80015ac:	7c3b      	ldrb	r3, [r7, #16]
 80015ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		bmp->calib_data.par_t3 = (float)raw_par_t3 / temp_var;
 80015b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fb90 	bl	8000cdc <__aeabi_i2f>
 80015bc:	4603      	mov	r3, r0
 80015be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fc93 	bl	8000eec <__aeabi_fdiv>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	611a      	str	r2, [r3, #16]
		// PAR_P1
		temp_var = 1048576.f;
 80015ce:	f04f 4393 	mov.w	r3, #1233125376	@ 0x49800000
 80015d2:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_p1 = ((int16_t)calib_buff[6] << 8) | (int16_t)calib_buff[5];
 80015d4:	7cbb      	ldrb	r3, [r7, #18]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	7c7b      	ldrb	r3, [r7, #17]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	863b      	strh	r3, [r7, #48]	@ 0x30
		bmp->calib_data.par_p1 = ((float)raw_par_p1 - 16384) / temp_var;
 80015e2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fb78 	bl	8000cdc <__aeabi_i2f>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fabc 	bl	8000b70 <__aeabi_fsub>
 80015f8:	4603      	mov	r3, r0
 80015fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fc75 	bl	8000eec <__aeabi_fdiv>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	615a      	str	r2, [r3, #20]
		// PAR_P2
		temp_var = 536870912.f;
 800160a:	f04f 439c 	mov.w	r3, #1308622848	@ 0x4e000000
 800160e:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_p2 = ((int16_t)calib_buff[8] << 8) | (int16_t)calib_buff[7];
 8001610:	7d3b      	ldrb	r3, [r7, #20]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21a      	sxth	r2, r3
 8001616:	7cfb      	ldrb	r3, [r7, #19]
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		bmp->calib_data.par_p2 = ((float)raw_par_p2 - 16384) / temp_var;
 800161e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fb5a 	bl	8000cdc <__aeabi_i2f>
 8001628:	4603      	mov	r3, r0
 800162a:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fa9e 	bl	8000b70 <__aeabi_fsub>
 8001634:	4603      	mov	r3, r0
 8001636:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fc57 	bl	8000eec <__aeabi_fdiv>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
		// PAR_P3
		temp_var = 4294967296.f;
 8001646:	f04f 439f 	mov.w	r3, #1333788672	@ 0x4f800000
 800164a:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_p3 = (int8_t)calib_buff[9];
 800164c:	7d7b      	ldrb	r3, [r7, #21]
 800164e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		bmp->calib_data.par_p3 = (float)raw_par_p3 / temp_var;
 8001652:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fb40 	bl	8000cdc <__aeabi_i2f>
 800165c:	4603      	mov	r3, r0
 800165e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fc43 	bl	8000eec <__aeabi_fdiv>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	61da      	str	r2, [r3, #28]
		// PAR_P4
		temp_var = 137438953472.f;
 800166e:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8001672:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_p4 = (int8_t)calib_buff[10];
 8001674:	7dbb      	ldrb	r3, [r7, #22]
 8001676:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		bmp->calib_data.par_p4 = (float)raw_par_p4 / temp_var;
 800167a:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fb2c 	bl	8000cdc <__aeabi_i2f>
 8001684:	4603      	mov	r3, r0
 8001686:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fc2f 	bl	8000eec <__aeabi_fdiv>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	621a      	str	r2, [r3, #32]
		// PAR_P5
		temp_var = 0.125f;
 8001696:	f04f 5378 	mov.w	r3, #1040187392	@ 0x3e000000
 800169a:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_p5 = ((uint16_t)calib_buff[12] << 8) | (uint16_t)calib_buff[11];
 800169c:	7e3b      	ldrb	r3, [r7, #24]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	857b      	strh	r3, [r7, #42]	@ 0x2a
		bmp->calib_data.par_p5 = (float)raw_par_p5 / temp_var;
 80016ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb10 	bl	8000cd4 <__aeabi_ui2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fc17 	bl	8000eec <__aeabi_fdiv>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	625a      	str	r2, [r3, #36]	@ 0x24
		// PAR_P6
		temp_var = 64.f;
 80016c6:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 80016ca:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_p6 = ((uint16_t)calib_buff[14] << 8) | (uint16_t)calib_buff[13];
 80016cc:	7ebb      	ldrb	r3, [r7, #26]
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	7e7b      	ldrb	r3, [r7, #25]
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b21b      	sxth	r3, r3
 80016da:	853b      	strh	r3, [r7, #40]	@ 0x28
		bmp->calib_data.par_p6 = (float)raw_par_p6 / temp_var;
 80016dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff faf8 	bl	8000cd4 <__aeabi_ui2f>
 80016e4:	4603      	mov	r3, r0
 80016e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fbff 	bl	8000eec <__aeabi_fdiv>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	629a      	str	r2, [r3, #40]	@ 0x28
		// PAR_P7
		temp_var = 256.f;
 80016f6:	f04f 4387 	mov.w	r3, #1132462080	@ 0x43800000
 80016fa:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_p7 = (int8_t)calib_buff[15];
 80016fc:	7efb      	ldrb	r3, [r7, #27]
 80016fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		bmp->calib_data.par_p7 = (float)raw_par_p7 / temp_var;
 8001702:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fae8 	bl	8000cdc <__aeabi_i2f>
 800170c:	4603      	mov	r3, r0
 800170e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fbeb 	bl	8000eec <__aeabi_fdiv>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	62da      	str	r2, [r3, #44]	@ 0x2c
		// PAR_P8
		temp_var = 32768.f;
 800171e:	f04f 438e 	mov.w	r3, #1191182336	@ 0x47000000
 8001722:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_p8 = (int8_t)calib_buff[16];
 8001724:	7f3b      	ldrb	r3, [r7, #28]
 8001726:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		bmp->calib_data.par_p8 = (float)raw_par_p8 / temp_var;
 800172a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fad4 	bl	8000cdc <__aeabi_i2f>
 8001734:	4603      	mov	r3, r0
 8001736:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fbd7 	bl	8000eec <__aeabi_fdiv>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	631a      	str	r2, [r3, #48]	@ 0x30
		// PAR_P9
		temp_var = 281474976710656.f;
 8001746:	f04f 43af 	mov.w	r3, #1468006400	@ 0x57800000
 800174a:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_p9 = ((int16_t)calib_buff[18] << 8) | (int16_t)calib_buff[17];
 800174c:	7fbb      	ldrb	r3, [r7, #30]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	b21a      	sxth	r2, r3
 8001752:	7f7b      	ldrb	r3, [r7, #29]
 8001754:	b21b      	sxth	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	84bb      	strh	r3, [r7, #36]	@ 0x24
		bmp->calib_data.par_p9 = (float)raw_par_p9 / temp_var;
 800175a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fabc 	bl	8000cdc <__aeabi_i2f>
 8001764:	4603      	mov	r3, r0
 8001766:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fbbf 	bl	8000eec <__aeabi_fdiv>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	635a      	str	r2, [r3, #52]	@ 0x34
		// PAR_P10
		temp_var = 281474976710656.f;
 8001776:	f04f 43af 	mov.w	r3, #1468006400	@ 0x57800000
 800177a:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_p10 = (int8_t)calib_buff[19];
 800177c:	7ffb      	ldrb	r3, [r7, #31]
 800177e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		bmp->calib_data.par_p10 = (float)raw_par_p10 / temp_var;
 8001782:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff faa8 	bl	8000cdc <__aeabi_i2f>
 800178c:	4603      	mov	r3, r0
 800178e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fbab 	bl	8000eec <__aeabi_fdiv>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	639a      	str	r2, [r3, #56]	@ 0x38
		// PAR_P11
		temp_var = 36893488147419103232.f;
 800179e:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80017a2:	63bb      	str	r3, [r7, #56]	@ 0x38
		raw_par_p11 = (int8_t)calib_buff[20];
 80017a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		bmp->calib_data.par_p11 = (float)raw_par_p11 / temp_var;
 80017ac:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fa93 	bl	8000cdc <__aeabi_i2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fb96 	bl	8000eec <__aeabi_fdiv>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	return rslt;
 80017c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3740      	adds	r7, #64	@ 0x40
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <BMP388_CompensateTemp>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
float BMP388_CompensateTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_temp, float *temp){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
    float partial_data1 = ((float)raw_temp - bmp->calib_data.par_t1);;
 80017e0:	68b8      	ldr	r0, [r7, #8]
 80017e2:	f7ff fa77 	bl	8000cd4 <__aeabi_ui2f>
 80017e6:	4602      	mov	r2, r0
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4619      	mov	r1, r3
 80017ee:	4610      	mov	r0, r2
 80017f0:	f7ff f9be 	bl	8000b70 <__aeabi_fsub>
 80017f4:	4603      	mov	r3, r0
 80017f6:	617b      	str	r3, [r7, #20]
    float partial_data2 = ((float)partial_data1 * bmp->calib_data.par_t2);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4619      	mov	r1, r3
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff fac0 	bl	8000d84 <__aeabi_fmul>
 8001804:	4603      	mov	r3, r0
 8001806:	613b      	str	r3, [r7, #16]

    *temp = partial_data2 + (partial_data1 * partial_data1) * bmp->calib_data.par_t3;
 8001808:	6979      	ldr	r1, [r7, #20]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff faba 	bl	8000d84 <__aeabi_fmul>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	4619      	mov	r1, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f7ff fab2 	bl	8000d84 <__aeabi_fmul>
 8001820:	4603      	mov	r3, r0
 8001822:	6939      	ldr	r1, [r7, #16]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff f9a5 	bl	8000b74 <__addsf3>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	601a      	str	r2, [r3, #0]

    return *temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <BMP388_CompensatePress>:
 *	@param[out] press		: Measured pressure in Pa
 *
 *  @return Status of execution
 *  @retval = press			: Compensated pressure value
 */
float BMP388_CompensatePress(BMP388_HandleTypeDef *bmp, float temp, uint32_t raw_press, float *press){
 800183e:	b590      	push	{r4, r7, lr}
 8001840:	b08b      	sub	sp, #44	@ 0x2c
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	603b      	str	r3, [r7, #0]
    float partial_out1;
    float partial_out2;



    partial_data1 = bmp->calib_data.par_p6 * temp;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001850:	4619      	mov	r1, r3
 8001852:	68b8      	ldr	r0, [r7, #8]
 8001854:	f7ff fa96 	bl	8000d84 <__aeabi_fmul>
 8001858:	4603      	mov	r3, r0
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
    partial_data2 = bmp->calib_data.par_p7 * (temp * temp);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	68b8      	ldr	r0, [r7, #8]
 8001864:	f7ff fa8e 	bl	8000d84 <__aeabi_fmul>
 8001868:	4603      	mov	r3, r0
 800186a:	4619      	mov	r1, r3
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff fa89 	bl	8000d84 <__aeabi_fmul>
 8001872:	4603      	mov	r3, r0
 8001874:	623b      	str	r3, [r7, #32]
    partial_data3 = bmp->calib_data.par_p8 * (temp * temp * temp);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	68b8      	ldr	r0, [r7, #8]
 800187e:	f7ff fa81 	bl	8000d84 <__aeabi_fmul>
 8001882:	4603      	mov	r3, r0
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fa7c 	bl	8000d84 <__aeabi_fmul>
 800188c:	4603      	mov	r3, r0
 800188e:	4619      	mov	r1, r3
 8001890:	4620      	mov	r0, r4
 8001892:	f7ff fa77 	bl	8000d84 <__aeabi_fmul>
 8001896:	4603      	mov	r3, r0
 8001898:	61fb      	str	r3, [r7, #28]
    partial_out1 = bmp->calib_data.par_p5 + partial_data1 + partial_data2 + partial_data3;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff f967 	bl	8000b74 <__addsf3>
 80018a6:	4603      	mov	r3, r0
 80018a8:	6a39      	ldr	r1, [r7, #32]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f962 	bl	8000b74 <__addsf3>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4619      	mov	r1, r3
 80018b4:	69f8      	ldr	r0, [r7, #28]
 80018b6:	f7ff f95d 	bl	8000b74 <__addsf3>
 80018ba:	4603      	mov	r3, r0
 80018bc:	61bb      	str	r3, [r7, #24]

    partial_data1 = bmp->calib_data.par_p2 * temp;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	4619      	mov	r1, r3
 80018c4:	68b8      	ldr	r0, [r7, #8]
 80018c6:	f7ff fa5d 	bl	8000d84 <__aeabi_fmul>
 80018ca:	4603      	mov	r3, r0
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
    partial_data2 = bmp->calib_data.par_p3 * (temp * temp);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	69dc      	ldr	r4, [r3, #28]
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	68b8      	ldr	r0, [r7, #8]
 80018d6:	f7ff fa55 	bl	8000d84 <__aeabi_fmul>
 80018da:	4603      	mov	r3, r0
 80018dc:	4619      	mov	r1, r3
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff fa50 	bl	8000d84 <__aeabi_fmul>
 80018e4:	4603      	mov	r3, r0
 80018e6:	623b      	str	r3, [r7, #32]
    partial_data3 = bmp->calib_data.par_p4 * (temp * temp * temp);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6a1c      	ldr	r4, [r3, #32]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	68b8      	ldr	r0, [r7, #8]
 80018f0:	f7ff fa48 	bl	8000d84 <__aeabi_fmul>
 80018f4:	4603      	mov	r3, r0
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fa43 	bl	8000d84 <__aeabi_fmul>
 80018fe:	4603      	mov	r3, r0
 8001900:	4619      	mov	r1, r3
 8001902:	4620      	mov	r0, r4
 8001904:	f7ff fa3e 	bl	8000d84 <__aeabi_fmul>
 8001908:	4603      	mov	r3, r0
 800190a:	61fb      	str	r3, [r7, #28]
    partial_out2 = ((float)raw_press) * (bmp->calib_data.par_p1 + partial_data1 + partial_data2 + partial_data3);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff f9e1 	bl	8000cd4 <__aeabi_ui2f>
 8001912:	4604      	mov	r4, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f92a 	bl	8000b74 <__addsf3>
 8001920:	4603      	mov	r3, r0
 8001922:	6a39      	ldr	r1, [r7, #32]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff f925 	bl	8000b74 <__addsf3>
 800192a:	4603      	mov	r3, r0
 800192c:	69f9      	ldr	r1, [r7, #28]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f920 	bl	8000b74 <__addsf3>
 8001934:	4603      	mov	r3, r0
 8001936:	4619      	mov	r1, r3
 8001938:	4620      	mov	r0, r4
 800193a:	f7ff fa23 	bl	8000d84 <__aeabi_fmul>
 800193e:	4603      	mov	r3, r0
 8001940:	617b      	str	r3, [r7, #20]

    partial_data1 = (float)raw_press * (float)raw_press;
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff f9c6 	bl	8000cd4 <__aeabi_ui2f>
 8001948:	4604      	mov	r4, r0
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff f9c2 	bl	8000cd4 <__aeabi_ui2f>
 8001950:	4603      	mov	r3, r0
 8001952:	4619      	mov	r1, r3
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff fa15 	bl	8000d84 <__aeabi_fmul>
 800195a:	4603      	mov	r3, r0
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
    partial_data2 = bmp->calib_data.par_p9 + bmp->calib_data.par_p10 * temp;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fa0b 	bl	8000d84 <__aeabi_fmul>
 800196e:	4603      	mov	r3, r0
 8001970:	4619      	mov	r1, r3
 8001972:	4620      	mov	r0, r4
 8001974:	f7ff f8fe 	bl	8000b74 <__addsf3>
 8001978:	4603      	mov	r3, r0
 800197a:	623b      	str	r3, [r7, #32]
    partial_data3 = partial_data1 * partial_data2;
 800197c:	6a39      	ldr	r1, [r7, #32]
 800197e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001980:	f7ff fa00 	bl	8000d84 <__aeabi_fmul>
 8001984:	4603      	mov	r3, r0
 8001986:	61fb      	str	r3, [r7, #28]
    partial_data4 = partial_data3 + ((float)raw_press * (float)raw_press * (float)raw_press) * bmp->calib_data.par_p11;
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff f9a3 	bl	8000cd4 <__aeabi_ui2f>
 800198e:	4604      	mov	r4, r0
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff f99f 	bl	8000cd4 <__aeabi_ui2f>
 8001996:	4603      	mov	r3, r0
 8001998:	4619      	mov	r1, r3
 800199a:	4620      	mov	r0, r4
 800199c:	f7ff f9f2 	bl	8000d84 <__aeabi_fmul>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461c      	mov	r4, r3
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff f995 	bl	8000cd4 <__aeabi_ui2f>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4619      	mov	r1, r3
 80019ae:	4620      	mov	r0, r4
 80019b0:	f7ff f9e8 	bl	8000d84 <__aeabi_fmul>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f7ff f9e0 	bl	8000d84 <__aeabi_fmul>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4619      	mov	r1, r3
 80019c8:	69f8      	ldr	r0, [r7, #28]
 80019ca:	f7ff f8d3 	bl	8000b74 <__addsf3>
 80019ce:	4603      	mov	r3, r0
 80019d0:	613b      	str	r3, [r7, #16]

    *press = partial_out1 + partial_out2 + partial_data4;
 80019d2:	6979      	ldr	r1, [r7, #20]
 80019d4:	69b8      	ldr	r0, [r7, #24]
 80019d6:	f7ff f8cd 	bl	8000b74 <__addsf3>
 80019da:	4603      	mov	r3, r0
 80019dc:	6939      	ldr	r1, [r7, #16]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f8c8 	bl	8000b74 <__addsf3>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	601a      	str	r2, [r3, #0]

    return *press;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	372c      	adds	r7, #44	@ 0x2c
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd90      	pop	{r4, r7, pc}

080019f8 <BMP388_ReadBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af04      	add	r7, sp, #16
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	461a      	mov	r2, r3
 8001a04:	460b      	mov	r3, r1
 8001a06:	72fb      	strb	r3, [r7, #11]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(bmp->hi2c, BMP3_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	7afb      	ldrb	r3, [r7, #11]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	7abb      	ldrb	r3, [r7, #10]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	2164      	movs	r1, #100	@ 0x64
 8001a1a:	9102      	str	r1, [sp, #8]
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2301      	movs	r3, #1
 8001a24:	21ee      	movs	r1, #238	@ 0xee
 8001a26:	f003 f8c5 	bl	8004bb4 <HAL_I2C_Mem_Read>
 8001a2a:	4603      	mov	r3, r0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <BMP388_WriteBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_WriteBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af04      	add	r7, sp, #16
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	460b      	mov	r3, r1
 8001a42:	72fb      	strb	r3, [r7, #11]
 8001a44:	4613      	mov	r3, r2
 8001a46:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(bmp->hi2c, BMP3_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	7afb      	ldrb	r3, [r7, #11]
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	7abb      	ldrb	r3, [r7, #10]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2164      	movs	r1, #100	@ 0x64
 8001a56:	9102      	str	r1, [sp, #8]
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	21ee      	movs	r1, #238	@ 0xee
 8001a62:	f002 ffad 	bl	80049c0 <HAL_I2C_Mem_Write>
 8001a66:	4603      	mov	r3, r0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	2007      	movs	r0, #7
 8001a80:	f000 fa0a 	bl	8001e98 <bno055_writeData>
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	203d      	movs	r0, #61	@ 0x3d
 8001a9c:	f000 f9fc 	bl	8001e98 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001aa6:	2013      	movs	r0, #19
 8001aa8:	f000 f9ea 	bl	8001e80 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001aac:	e002      	b.n	8001ab4 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001aae:	2007      	movs	r0, #7
 8001ab0:	f000 f9e6 	bl	8001e80 <bno055_delay>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff ffe3 	bl	8001a8c <bno055_setOperationMode>
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001ace:	200c      	movs	r0, #12
 8001ad0:	f7ff ffdc 	bl	8001a8c <bno055_setOperationMode>
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001adc:	2120      	movs	r1, #32
 8001ade:	203f      	movs	r0, #63	@ 0x3f
 8001ae0:	f000 f9da 	bl	8001e98 <bno055_writeData>
  bno055_delay(700);
 8001ae4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001ae8:	f000 f9ca 	bl	8001e80 <bno055_delay>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
  bno055_reset();
 8001af6:	f7ff ffef 	bl	8001ad8 <bno055_reset>

  uint8_t id = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	2201      	movs	r2, #1
 8001b02:	4619      	mov	r1, r3
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 fab3 	bl	8002070 <bno055_readData>
  if (id != BNO055_ID) {
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b0e:	d004      	beq.n	8001b1a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	4619      	mov	r1, r3
 8001b14:	4809      	ldr	r0, [pc, #36]	@ (8001b3c <bno055_setup+0x4c>)
 8001b16:	f007 f83d 	bl	8008b94 <iprintf>
  }
  bno055_setPage(0);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff ffa8 	bl	8001a70 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001b20:	2100      	movs	r1, #0
 8001b22:	203f      	movs	r0, #63	@ 0x3f
 8001b24:	f000 f9b8 	bl	8001e98 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001b28:	f7ff ffc8 	bl	8001abc <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001b2c:	200a      	movs	r0, #10
 8001b2e:	f000 f9a7 	bl	8001e80 <bno055_delay>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	0800dbd8 	.word	0x0800dbd8

08001b40 <bno055_getCalibrationState>:
  uint8_t tmp;
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
  return tmp;
}

bno055_calibration_state_t bno055_getCalibrationState() {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff ff92 	bl	8001a70 <bno055_setPage>
  bno055_calibration_state_t cal = {.sys = 0, .gyro = 0, .mag = 0, .accel = 0};
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  uint8_t calState = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CALIB_STAT, &calState, 1);
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	2201      	movs	r2, #1
 8001b58:	4619      	mov	r1, r3
 8001b5a:	2035      	movs	r0, #53	@ 0x35
 8001b5c:	f000 fa88 	bl	8002070 <bno055_readData>
  cal.sys = (calState >> 6) & 0x03;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	099b      	lsrs	r3, r3, #6
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	723b      	strb	r3, [r7, #8]
  cal.gyro = (calState >> 4) & 0x03;
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	727b      	strb	r3, [r7, #9]
  cal.accel = (calState >> 2) & 0x03;
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	72fb      	strb	r3, [r7, #11]
  cal.mag = calState & 0x03;
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	72bb      	strb	r3, [r7, #10]
  return cal;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	2300      	movs	r3, #0
 8001b94:	7b3a      	ldrb	r2, [r7, #12]
 8001b96:	f362 0307 	bfi	r3, r2, #0, #8
 8001b9a:	7b7a      	ldrb	r2, [r7, #13]
 8001b9c:	f362 230f 	bfi	r3, r2, #8, #8
 8001ba0:	7bba      	ldrb	r2, [r7, #14]
 8001ba2:	f362 4317 	bfi	r3, r2, #16, #8
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	f362 631f 	bfi	r3, r2, #24, #8
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001bb4:	b5b0      	push	{r4, r5, r7, lr}
 8001bb6:	b08e      	sub	sp, #56	@ 0x38
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	70fb      	strb	r3, [r7, #3]
  bno055_setPage(0);
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff ff55 	bl	8001a70 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d107      	bne.n	8001bdc <bno055_getVector+0x28>
    bno055_readData(vec, buffer, 8);
 8001bcc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fa4b 	bl	8002070 <bno055_readData>
 8001bda:	e006      	b.n	8001bea <bno055_getVector+0x36>
  else
    bno055_readData(vec, buffer, 6);
 8001bdc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	2206      	movs	r2, #6
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fa43 	bl	8002070 <bno055_readData>

  double scale = 1;
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b77      	ldr	r3, [pc, #476]	@ (8001dcc <bno055_getVector+0x218>)
 8001bf0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	2b0e      	cmp	r3, #14
 8001bf8:	d109      	bne.n	8001c0e <bno055_getVector+0x5a>
    scale = magScale;
 8001bfa:	4b75      	ldr	r3, [pc, #468]	@ (8001dd0 <bno055_getVector+0x21c>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fbf0 	bl	80003e4 <__aeabi_ui2d>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001c0c:	e038      	b.n	8001c80 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d005      	beq.n	8001c20 <bno055_getVector+0x6c>
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	2b28      	cmp	r3, #40	@ 0x28
 8001c18:	d002      	beq.n	8001c20 <bno055_getVector+0x6c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c1e:	d109      	bne.n	8001c34 <bno055_getVector+0x80>
    scale = accelScale;
 8001c20:	4b6c      	ldr	r3, [pc, #432]	@ (8001dd4 <bno055_getVector+0x220>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fbdd 	bl	80003e4 <__aeabi_ui2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001c32:	e025      	b.n	8001c80 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	2b14      	cmp	r3, #20
 8001c38:	d109      	bne.n	8001c4e <bno055_getVector+0x9a>
    scale = angularRateScale;
 8001c3a:	4b67      	ldr	r3, [pc, #412]	@ (8001dd8 <bno055_getVector+0x224>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fbd0 	bl	80003e4 <__aeabi_ui2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001c4c:	e018      	b.n	8001c80 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	2b1a      	cmp	r3, #26
 8001c52:	d109      	bne.n	8001c68 <bno055_getVector+0xb4>
    scale = eulerScale;
 8001c54:	4b61      	ldr	r3, [pc, #388]	@ (8001ddc <bno055_getVector+0x228>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fbc3 	bl	80003e4 <__aeabi_ui2d>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001c66:	e00b      	b.n	8001c80 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	2b20      	cmp	r3, #32
 8001c6c:	d108      	bne.n	8001c80 <bno055_getVector+0xcc>
    scale = quaScale;
 8001c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8001de0 <bno055_getVector+0x22c>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fbb6 	bl	80003e4 <__aeabi_ui2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	2220      	movs	r2, #32
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f007 f917 	bl	8008ebc <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d150      	bne.n	8001d36 <bno055_getVector+0x182>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001c94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fbac 	bl	8000404 <__aeabi_i2d>
 8001cac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cb0:	f7fe fd3c 	bl	800072c <__aeabi_ddiv>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001cbc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fb98 	bl	8000404 <__aeabi_i2d>
 8001cd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cd8:	f7fe fd28 	bl	800072c <__aeabi_ddiv>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001ce4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fb84 	bl	8000404 <__aeabi_i2d>
 8001cfc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d00:	f7fe fd14 	bl	800072c <__aeabi_ddiv>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fb70 	bl	8000404 <__aeabi_i2d>
 8001d24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d28:	f7fe fd00 	bl	800072c <__aeabi_ddiv>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001d34:	e03b      	b.n	8001dae <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001d36:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fb5b 	bl	8000404 <__aeabi_i2d>
 8001d4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d52:	f7fe fceb 	bl	800072c <__aeabi_ddiv>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001d5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fb47 	bl	8000404 <__aeabi_i2d>
 8001d76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d7a:	f7fe fcd7 	bl	800072c <__aeabi_ddiv>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001d86:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	b21a      	sxth	r2, r3
 8001d8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fb33 	bl	8000404 <__aeabi_i2d>
 8001d9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001da2:	f7fe fcc3 	bl	800072c <__aeabi_ddiv>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  return xyz;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	461d      	mov	r5, r3
 8001db2:	f107 0408 	add.w	r4, r7, #8
 8001db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dbe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	3738      	adds	r7, #56	@ 0x38
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	3ff00000 	.word	0x3ff00000
 8001dd0:	20000006 	.word	0x20000006
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000002 	.word	0x20000002
 8001ddc:	20000004 	.word	0x20000004
 8001de0:	20000008 	.word	0x20000008

08001de4 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2108      	movs	r1, #8
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fedf 	bl	8001bb4 <bno055_getVector>
}
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	211a      	movs	r1, #26
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fed2 	bl	8001bb4 <bno055_getVector>
}
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e20:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e24:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d013      	beq.n	8001e58 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001e30:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e34:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001e38:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00b      	beq.n	8001e58 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001e40:	e000      	b.n	8001e44 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001e42:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001e44:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f9      	beq.n	8001e42 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001e4e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001e58:	687b      	ldr	r3, [r7, #4]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001e6c:	4a03      	ldr	r2, [pc, #12]	@ (8001e7c <bno055_assignI2C+0x18>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	20000214 	.word	0x20000214

08001e80 <bno055_delay>:

void bno055_delay(int time) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f001 fd6a 	bl	8003964 <HAL_Delay>
#endif
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	460a      	mov	r2, r1
 8001ea2:	71fb      	strb	r3, [r7, #7]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	733b      	strb	r3, [r7, #12]
 8001eac:	79bb      	ldrb	r3, [r7, #6]
 8001eae:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001eb0:	4b5a      	ldr	r3, [pc, #360]	@ (800201c <bno055_writeData+0x184>)
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	f107 020c 	add.w	r2, r7, #12
 8001eb8:	230a      	movs	r3, #10
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	2152      	movs	r1, #82	@ 0x52
 8001ec0:	f002 fa14 	bl	80042ec <HAL_I2C_Master_Transmit>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80a0 	beq.w	8002010 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d103      	bne.n	8001ede <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001ed6:	4852      	ldr	r0, [pc, #328]	@ (8002020 <bno055_writeData+0x188>)
 8001ed8:	f006 fec4 	bl	8008c64 <puts>
 8001edc:	e012      	b.n	8001f04 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d103      	bne.n	8001eec <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001ee4:	484f      	ldr	r0, [pc, #316]	@ (8002024 <bno055_writeData+0x18c>)
 8001ee6:	f006 febd 	bl	8008c64 <puts>
 8001eea:	e00b      	b.n	8001f04 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d103      	bne.n	8001efa <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001ef2:	484d      	ldr	r0, [pc, #308]	@ (8002028 <bno055_writeData+0x190>)
 8001ef4:	f006 feb6 	bl	8008c64 <puts>
 8001ef8:	e004      	b.n	8001f04 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
 8001efc:	4619      	mov	r1, r3
 8001efe:	484b      	ldr	r0, [pc, #300]	@ (800202c <bno055_writeData+0x194>)
 8001f00:	f006 fe48 	bl	8008b94 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001f04:	4b45      	ldr	r3, [pc, #276]	@ (800201c <bno055_writeData+0x184>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 f8d4 	bl	80050b6 <HAL_I2C_GetError>
 8001f0e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d07e      	beq.n	8002014 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d103      	bne.n	8001f24 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001f1c:	4844      	ldr	r0, [pc, #272]	@ (8002030 <bno055_writeData+0x198>)
 8001f1e:	f006 fea1 	bl	8008c64 <puts>
 8001f22:	e021      	b.n	8001f68 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d103      	bne.n	8001f32 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001f2a:	4842      	ldr	r0, [pc, #264]	@ (8002034 <bno055_writeData+0x19c>)
 8001f2c:	f006 fe9a 	bl	8008c64 <puts>
 8001f30:	e01a      	b.n	8001f68 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d103      	bne.n	8001f40 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001f38:	483f      	ldr	r0, [pc, #252]	@ (8002038 <bno055_writeData+0x1a0>)
 8001f3a:	f006 fe93 	bl	8008c64 <puts>
 8001f3e:	e013      	b.n	8001f68 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d103      	bne.n	8001f4e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001f46:	483d      	ldr	r0, [pc, #244]	@ (800203c <bno055_writeData+0x1a4>)
 8001f48:	f006 fe8c 	bl	8008c64 <puts>
 8001f4c:	e00c      	b.n	8001f68 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b10      	cmp	r3, #16
 8001f52:	d103      	bne.n	8001f5c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001f54:	483a      	ldr	r0, [pc, #232]	@ (8002040 <bno055_writeData+0x1a8>)
 8001f56:	f006 fe85 	bl	8008c64 <puts>
 8001f5a:	e005      	b.n	8001f68 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d102      	bne.n	8001f68 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001f62:	4838      	ldr	r0, [pc, #224]	@ (8002044 <bno055_writeData+0x1ac>)
 8001f64:	f006 fe7e 	bl	8008c64 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001f68:	4b2c      	ldr	r3, [pc, #176]	@ (800201c <bno055_writeData+0x184>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 f895 	bl	800509c <HAL_I2C_GetState>
 8001f72:	4603      	mov	r3, r0
 8001f74:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d103      	bne.n	8001f84 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001f7c:	4832      	ldr	r0, [pc, #200]	@ (8002048 <bno055_writeData+0x1b0>)
 8001f7e:	f006 fe71 	bl	8008c64 <puts>
 8001f82:	e048      	b.n	8002016 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	d103      	bne.n	8001f92 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001f8a:	482f      	ldr	r0, [pc, #188]	@ (8002048 <bno055_writeData+0x1b0>)
 8001f8c:	f006 fe6a 	bl	8008c64 <puts>
 8001f90:	e041      	b.n	8002016 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	2b24      	cmp	r3, #36	@ 0x24
 8001f96:	d103      	bne.n	8001fa0 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001f98:	482c      	ldr	r0, [pc, #176]	@ (800204c <bno055_writeData+0x1b4>)
 8001f9a:	f006 fe63 	bl	8008c64 <puts>
 8001f9e:	e03a      	b.n	8002016 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	2b21      	cmp	r3, #33	@ 0x21
 8001fa4:	d103      	bne.n	8001fae <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001fa6:	482a      	ldr	r0, [pc, #168]	@ (8002050 <bno055_writeData+0x1b8>)
 8001fa8:	f006 fe5c 	bl	8008c64 <puts>
 8001fac:	e033      	b.n	8002016 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	2b22      	cmp	r3, #34	@ 0x22
 8001fb2:	d103      	bne.n	8001fbc <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001fb4:	4827      	ldr	r0, [pc, #156]	@ (8002054 <bno055_writeData+0x1bc>)
 8001fb6:	f006 fe55 	bl	8008c64 <puts>
 8001fba:	e02c      	b.n	8002016 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2b28      	cmp	r3, #40	@ 0x28
 8001fc0:	d103      	bne.n	8001fca <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001fc2:	4825      	ldr	r0, [pc, #148]	@ (8002058 <bno055_writeData+0x1c0>)
 8001fc4:	f006 fe4e 	bl	8008c64 <puts>
 8001fc8:	e025      	b.n	8002016 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	2b29      	cmp	r3, #41	@ 0x29
 8001fce:	d103      	bne.n	8001fd8 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001fd0:	4822      	ldr	r0, [pc, #136]	@ (800205c <bno055_writeData+0x1c4>)
 8001fd2:	f006 fe47 	bl	8008c64 <puts>
 8001fd6:	e01e      	b.n	8002016 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fdc:	d103      	bne.n	8001fe6 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001fde:	4820      	ldr	r0, [pc, #128]	@ (8002060 <bno055_writeData+0x1c8>)
 8001fe0:	f006 fe40 	bl	8008c64 <puts>
 8001fe4:	e017      	b.n	8002016 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	2b60      	cmp	r3, #96	@ 0x60
 8001fea:	d103      	bne.n	8001ff4 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001fec:	481d      	ldr	r0, [pc, #116]	@ (8002064 <bno055_writeData+0x1cc>)
 8001fee:	f006 fe39 	bl	8008c64 <puts>
 8001ff2:	e010      	b.n	8002016 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ff8:	d103      	bne.n	8002002 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001ffa:	481b      	ldr	r0, [pc, #108]	@ (8002068 <bno055_writeData+0x1d0>)
 8001ffc:	f006 fe32 	bl	8008c64 <puts>
 8002000:	e009      	b.n	8002016 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	2be0      	cmp	r3, #224	@ 0xe0
 8002006:	d106      	bne.n	8002016 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002008:	4818      	ldr	r0, [pc, #96]	@ (800206c <bno055_writeData+0x1d4>)
 800200a:	f006 fe2b 	bl	8008c64 <puts>
 800200e:	e002      	b.n	8002016 <bno055_writeData+0x17e>
    return;
 8002010:	bf00      	nop
 8002012:	e000      	b.n	8002016 <bno055_writeData+0x17e>
    return;
 8002014:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000214 	.word	0x20000214
 8002020:	0800dc14 	.word	0x0800dc14
 8002024:	0800dc38 	.word	0x0800dc38
 8002028:	0800dc60 	.word	0x0800dc60
 800202c:	0800dc84 	.word	0x0800dc84
 8002030:	0800dc9c 	.word	0x0800dc9c
 8002034:	0800dcb0 	.word	0x0800dcb0
 8002038:	0800dcc4 	.word	0x0800dcc4
 800203c:	0800dcd8 	.word	0x0800dcd8
 8002040:	0800dcec 	.word	0x0800dcec
 8002044:	0800dd00 	.word	0x0800dd00
 8002048:	0800dd18 	.word	0x0800dd18
 800204c:	0800dd30 	.word	0x0800dd30
 8002050:	0800dd44 	.word	0x0800dd44
 8002054:	0800dd5c 	.word	0x0800dd5c
 8002058:	0800dd74 	.word	0x0800dd74
 800205c:	0800dd8c 	.word	0x0800dd8c
 8002060:	0800ddac 	.word	0x0800ddac
 8002064:	0800ddcc 	.word	0x0800ddcc
 8002068:	0800dde4 	.word	0x0800dde4
 800206c:	0800ddfc 	.word	0x0800ddfc

08002070 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af02      	add	r7, sp, #8
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
 800207c:	4613      	mov	r3, r2
 800207e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002080:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <bno055_readData+0x40>)
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	1dfa      	adds	r2, r7, #7
 8002086:	2364      	movs	r3, #100	@ 0x64
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2301      	movs	r3, #1
 800208c:	2152      	movs	r1, #82	@ 0x52
 800208e:	f002 f92d 	bl	80042ec <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002092:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <bno055_readData+0x40>)
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	79bb      	ldrb	r3, [r7, #6]
 8002098:	b29b      	uxth	r3, r3
 800209a:	2264      	movs	r2, #100	@ 0x64
 800209c:	9200      	str	r2, [sp, #0]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	2152      	movs	r1, #82	@ 0x52
 80020a2:	f002 fa21 	bl	80044e8 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000214 	.word	0x20000214

080020b4 <nmeaToDecimal>:
bno055_vector_t v;
bno055_calibration_state_t k;
int flag = 1;
float initialalt=0;

float nmeaToDecimal(float coordinate) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	int degree = (int) (coordinate / 100);
 80020bc:	4916      	ldr	r1, [pc, #88]	@ (8002118 <nmeaToDecimal+0x64>)
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe ff14 	bl	8000eec <__aeabi_fdiv>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f822 	bl	8001110 <__aeabi_f2iz>
 80020cc:	4603      	mov	r3, r0
 80020ce:	617b      	str	r3, [r7, #20]
	float minutes = coordinate - degree * 100;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2264      	movs	r2, #100	@ 0x64
 80020d4:	fb02 f303 	mul.w	r3, r2, r3
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe fdff 	bl	8000cdc <__aeabi_i2f>
 80020de:	4603      	mov	r3, r0
 80020e0:	4619      	mov	r1, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7fe fd44 	bl	8000b70 <__aeabi_fsub>
 80020e8:	4603      	mov	r3, r0
 80020ea:	613b      	str	r3, [r7, #16]
	float decimalDegree = minutes / 60;
 80020ec:	490b      	ldr	r1, [pc, #44]	@ (800211c <nmeaToDecimal+0x68>)
 80020ee:	6938      	ldr	r0, [r7, #16]
 80020f0:	f7fe fefc 	bl	8000eec <__aeabi_fdiv>
 80020f4:	4603      	mov	r3, r0
 80020f6:	60fb      	str	r3, [r7, #12]
	float decimal = degree + decimalDegree;
 80020f8:	6978      	ldr	r0, [r7, #20]
 80020fa:	f7fe fdef 	bl	8000cdc <__aeabi_i2f>
 80020fe:	4603      	mov	r3, r0
 8002100:	4619      	mov	r1, r3
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f7fe fd36 	bl	8000b74 <__addsf3>
 8002108:	4603      	mov	r3, r0
 800210a:	60bb      	str	r3, [r7, #8]
	return decimal;
 800210c:	68bb      	ldr	r3, [r7, #8]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	42c80000 	.word	0x42c80000
 800211c:	42700000 	.word	0x42700000

08002120 <gpsParse>:
{
	if (frequency == 0) return 0;
	return ((TIM_FREQ/(1000*frequency))-1);  // 1 is added in the register
}

void gpsParse(char *strParse) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af04      	add	r7, sp, #16
 8002126:	6078      	str	r0, [r7, #4]
	if (!strncmp(strParse, "$GNGGA", 6)) {
 8002128:	2206      	movs	r2, #6
 800212a:	4939      	ldr	r1, [pc, #228]	@ (8002210 <gpsParse+0xf0>)
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f006 fecd 	bl	8008ecc <strncmp>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d11c      	bne.n	8002172 <gpsParse+0x52>
		sscanf(strParse, "$GNGGA,%f,%f,%c,%f,%c", &utcTime, &nmeaLat,
 8002138:	4b36      	ldr	r3, [pc, #216]	@ (8002214 <gpsParse+0xf4>)
 800213a:	9302      	str	r3, [sp, #8]
 800213c:	4b36      	ldr	r3, [pc, #216]	@ (8002218 <gpsParse+0xf8>)
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	4b36      	ldr	r3, [pc, #216]	@ (800221c <gpsParse+0xfc>)
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	4b36      	ldr	r3, [pc, #216]	@ (8002220 <gpsParse+0x100>)
 8002146:	4a37      	ldr	r2, [pc, #220]	@ (8002224 <gpsParse+0x104>)
 8002148:	4937      	ldr	r1, [pc, #220]	@ (8002228 <gpsParse+0x108>)
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f006 fdb2 	bl	8008cb4 <siscanf>
				&northsouth, &nmeaLong, &eastwest);
		decimalLat = nmeaToDecimal(nmeaLat);
 8002150:	4b33      	ldr	r3, [pc, #204]	@ (8002220 <gpsParse+0x100>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ffad 	bl	80020b4 <nmeaToDecimal>
 800215a:	4603      	mov	r3, r0
 800215c:	4a33      	ldr	r2, [pc, #204]	@ (800222c <gpsParse+0x10c>)
 800215e:	6013      	str	r3, [r2, #0]
		decimalLong = nmeaToDecimal(nmeaLong);
 8002160:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <gpsParse+0xf8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ffa5 	bl	80020b4 <nmeaToDecimal>
 800216a:	4603      	mov	r3, r0
 800216c:	4a30      	ldr	r2, [pc, #192]	@ (8002230 <gpsParse+0x110>)
 800216e:	6013      	str	r3, [r2, #0]
		sscanf(strParse, "$GNRMC,%f,%c,%f,%c,%f,%c", &utcTime, &posStatus,
				&nmeaLat, &northsouth, &nmeaLong, &eastwest);
		decimalLat = nmeaToDecimal(nmeaLat);
		decimalLong = nmeaToDecimal(nmeaLong);
	}
}
 8002170:	e04a      	b.n	8002208 <gpsParse+0xe8>
	} else if (!strncmp(strParse, "$GNGLL", 6)) {
 8002172:	2206      	movs	r2, #6
 8002174:	492f      	ldr	r1, [pc, #188]	@ (8002234 <gpsParse+0x114>)
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f006 fea8 	bl	8008ecc <strncmp>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d11c      	bne.n	80021bc <gpsParse+0x9c>
		sscanf(strParse, "$GNGLL,%f,%c,%f,%c,%f", &nmeaLat, &northsouth,
 8002182:	4b28      	ldr	r3, [pc, #160]	@ (8002224 <gpsParse+0x104>)
 8002184:	9302      	str	r3, [sp, #8]
 8002186:	4b23      	ldr	r3, [pc, #140]	@ (8002214 <gpsParse+0xf4>)
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	4b23      	ldr	r3, [pc, #140]	@ (8002218 <gpsParse+0xf8>)
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	4b23      	ldr	r3, [pc, #140]	@ (800221c <gpsParse+0xfc>)
 8002190:	4a23      	ldr	r2, [pc, #140]	@ (8002220 <gpsParse+0x100>)
 8002192:	4929      	ldr	r1, [pc, #164]	@ (8002238 <gpsParse+0x118>)
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f006 fd8d 	bl	8008cb4 <siscanf>
		decimalLat = nmeaToDecimal(nmeaLat);
 800219a:	4b21      	ldr	r3, [pc, #132]	@ (8002220 <gpsParse+0x100>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff88 	bl	80020b4 <nmeaToDecimal>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4a21      	ldr	r2, [pc, #132]	@ (800222c <gpsParse+0x10c>)
 80021a8:	6013      	str	r3, [r2, #0]
		decimalLong = nmeaToDecimal(nmeaLong);
 80021aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002218 <gpsParse+0xf8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff80 	bl	80020b4 <nmeaToDecimal>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002230 <gpsParse+0x110>)
 80021b8:	6013      	str	r3, [r2, #0]
}
 80021ba:	e025      	b.n	8002208 <gpsParse+0xe8>
	} else if (!strncmp(strParse, "$GNRMC", 6)) {
 80021bc:	2206      	movs	r2, #6
 80021be:	491f      	ldr	r1, [pc, #124]	@ (800223c <gpsParse+0x11c>)
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f006 fe83 	bl	8008ecc <strncmp>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d11d      	bne.n	8002208 <gpsParse+0xe8>
		sscanf(strParse, "$GNRMC,%f,%c,%f,%c,%f,%c", &utcTime, &posStatus,
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <gpsParse+0xf4>)
 80021ce:	9303      	str	r3, [sp, #12]
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <gpsParse+0xf8>)
 80021d2:	9302      	str	r3, [sp, #8]
 80021d4:	4b11      	ldr	r3, [pc, #68]	@ (800221c <gpsParse+0xfc>)
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <gpsParse+0x100>)
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <gpsParse+0x120>)
 80021de:	4a11      	ldr	r2, [pc, #68]	@ (8002224 <gpsParse+0x104>)
 80021e0:	4918      	ldr	r1, [pc, #96]	@ (8002244 <gpsParse+0x124>)
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f006 fd66 	bl	8008cb4 <siscanf>
		decimalLat = nmeaToDecimal(nmeaLat);
 80021e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <gpsParse+0x100>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff61 	bl	80020b4 <nmeaToDecimal>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <gpsParse+0x10c>)
 80021f6:	6013      	str	r3, [r2, #0]
		decimalLong = nmeaToDecimal(nmeaLong);
 80021f8:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <gpsParse+0xf8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff59 	bl	80020b4 <nmeaToDecimal>
 8002202:	4603      	mov	r3, r0
 8002204:	4a0a      	ldr	r2, [pc, #40]	@ (8002230 <gpsParse+0x110>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	0800de14 	.word	0x0800de14
 8002214:	20000539 	.word	0x20000539
 8002218:	2000052c 	.word	0x2000052c
 800221c:	20000538 	.word	0x20000538
 8002220:	20000530 	.word	0x20000530
 8002224:	20000534 	.word	0x20000534
 8002228:	0800de1c 	.word	0x0800de1c
 800222c:	20000540 	.word	0x20000540
 8002230:	2000053c 	.word	0x2000053c
 8002234:	0800de34 	.word	0x0800de34
 8002238:	0800de3c 	.word	0x0800de3c
 800223c:	0800de54 	.word	0x0800de54
 8002240:	2000053a 	.word	0x2000053a
 8002244:	0800de5c 	.word	0x0800de5c

08002248 <gpsValidate>:

int gpsValidate(char *nmea) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	char check[3];
	char calculatedString[3];
	int index;
	int calculatedCheck;

	index = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
	calculatedCheck = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]

	// Ensure that the string starts with a "$"
	if (nmea[index] == '$')
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b24      	cmp	r3, #36	@ 0x24
 8002262:	d103      	bne.n	800226c <gpsValidate+0x24>
		index++;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmea[index] != 0) && (nmea[index] != '*') && (index < 75)) {
 800226a:	e00c      	b.n	8002286 <gpsValidate+0x3e>
		return 0;
 800226c:	2300      	movs	r3, #0
 800226e:	e047      	b.n	8002300 <gpsValidate+0xb8>
		calculatedCheck ^= nmea[index]; // calculate the checksum
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4053      	eors	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
		index++;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3301      	adds	r3, #1
 8002284:	617b      	str	r3, [r7, #20]
	while ((nmea[index] != 0) && (nmea[index] != '*') && (index < 75)) {
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <gpsValidate+0x5c>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b2a      	cmp	r3, #42	@ 0x2a
 800229c:	d002      	beq.n	80022a4 <gpsValidate+0x5c>
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b4a      	cmp	r3, #74	@ 0x4a
 80022a2:	dde5      	ble.n	8002270 <gpsValidate+0x28>
	}

	if (index >= 75) {
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b4a      	cmp	r3, #74	@ 0x4a
 80022a8:	dd01      	ble.n	80022ae <gpsValidate+0x66>
		return 0; // the string is too long so return an error
 80022aa:	2300      	movs	r3, #0
 80022ac:	e028      	b.n	8002300 <gpsValidate+0xb8>
	}

	if (nmea[index] == '*') {
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80022b8:	d119      	bne.n	80022ee <gpsValidate+0xa6>
		check[0] = nmea[index + 1];    //put hex chars in check string
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	733b      	strb	r3, [r7, #12]
		check[1] = nmea[index + 2];
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3302      	adds	r3, #2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	73bb      	strb	r3, [r7, #14]
	} else
		return 0;    // no checksum separator found therefore invalid data

	sprintf(calculatedString, "%02X", calculatedCheck);
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	490a      	ldr	r1, [pc, #40]	@ (8002308 <gpsValidate+0xc0>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f006 fcc8 	bl	8008c74 <siprintf>
	return ((calculatedString[0] == check[0])
 80022e4:	7a3a      	ldrb	r2, [r7, #8]
 80022e6:	7b3b      	ldrb	r3, [r7, #12]
			&& (calculatedString[1] == check[1])) ? 1 : 0;
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d108      	bne.n	80022fe <gpsValidate+0xb6>
 80022ec:	e001      	b.n	80022f2 <gpsValidate+0xaa>
		return 0;    // no checksum separator found therefore invalid data
 80022ee:	2300      	movs	r3, #0
 80022f0:	e006      	b.n	8002300 <gpsValidate+0xb8>
			&& (calculatedString[1] == check[1])) ? 1 : 0;
 80022f2:	7a7a      	ldrb	r2, [r7, #9]
 80022f4:	7b7b      	ldrb	r3, [r7, #13]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d101      	bne.n	80022fe <gpsValidate+0xb6>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <gpsValidate+0xb8>
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	0800de78 	.word	0x0800de78

0800230c <extract_float_from_bytes>:

float extract_float_from_bytes(uint8_t *data, uint16_t start_index) {
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]

    float value;
    memcpy(&value, &data[start_index], sizeof(float));  // Copies 4 bytes
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]
    return value;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
	...

08002330 <round2>:
float round2(float val) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
				 return round(val * 100.0) / 100.0;
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7fe f875 	bl	8000428 <__aeabi_f2d>
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <round2+0x44>)
 8002344:	f7fe f8c8 	bl	80004d8 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f00a fd50 	bl	800cdf4 <round>
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <round2+0x44>)
 800235a:	f7fe f9e7 	bl	800072c <__aeabi_ddiv>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	f7fe fbaf 	bl	8000ac8 <__aeabi_d2f>
 800236a:	4603      	mov	r3, r0
			  }
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40590000 	.word	0x40590000

08002378 <idfcc_test>:
void idfcc_test(uint8_t packet[])

{
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b0be      	sub	sp, #248	@ 0xf8
 800237c:	af02      	add	r7, sp, #8
 800237e:	6278      	str	r0, [r7, #36]	@ 0x24
	if (mode == 0) {
 8002380:	4bcf      	ldr	r3, [pc, #828]	@ (80026c0 <idfcc_test+0x348>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f04f 0100 	mov.w	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fe8f 	bl	80010ac <__aeabi_fcmpeq>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d100      	bne.n	8002396 <idfcc_test+0x1e>
      }
      else if(packet[1]==0x24)
      {mode= 0;}
      }

}
 8002394:	e3a4      	b.n	8002ae0 <idfcc_test+0x768>
	    if (packet[1] == 0x20) {
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	3301      	adds	r3, #1
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b20      	cmp	r3, #32
 800239e:	f040 819b 	bne.w	80026d8 <idfcc_test+0x360>
	        mode = 1;
 80023a2:	4bc7      	ldr	r3, [pc, #796]	@ (80026c0 <idfcc_test+0x348>)
 80023a4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023a8:	601a      	str	r2, [r3, #0]
	        HAL_Delay(900);
 80023aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80023ae:	f001 fad9 	bl	8003964 <HAL_Delay>
	            uint8_t header_test = 0xAA;
 80023b2:	23aa      	movs	r3, #170	@ 0xaa
 80023b4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	            float test_pressure = 0;
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	            float test_altitude = 0;
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	            float test_accx = 0, test_accy = 0, test_accz = 0;
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	            float test_angx = 0, test_angy = 0, test_angz = 0;
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	            int test_checksum = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	            uint8_t test_footer1 = 0x0D;
 80023fe:	230d      	movs	r3, #13
 8002400:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	            uint8_t test_footer2 = 0x0A;
 8002404:	230a      	movs	r3, #10
 8002406:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	            uint32_t raw_press = 0, raw_temp = 0, sensor_time = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002416:	2300      	movs	r3, #0
 8002418:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	            BMP388_ReadRawPressTempTime(&hbmp388, &raw_press, &raw_temp, &sensor_time);
 800241c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002420:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8002424:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8002428:	48a6      	ldr	r0, [pc, #664]	@ (80026c4 <idfcc_test+0x34c>)
 800242a:	f7fe ff5e 	bl	80012ea <BMP388_ReadRawPressTempTime>
	            BMP388_CompensateRawPressTemp(&hbmp388, raw_press, raw_temp, &test_pressure, &temp);
 800242e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8002432:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002436:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800243a:	48a3      	ldr	r0, [pc, #652]	@ (80026c8 <idfcc_test+0x350>)
 800243c:	9000      	str	r0, [sp, #0]
 800243e:	48a1      	ldr	r0, [pc, #644]	@ (80026c4 <idfcc_test+0x34c>)
 8002440:	f7fe ffcb 	bl	80013da <BMP388_CompensateRawPressTemp>
	            float test_altitude2 = round2(BMP388_FindAltitude(100400, test_pressure));
 8002444:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002448:	4619      	mov	r1, r3
 800244a:	48a0      	ldr	r0, [pc, #640]	@ (80026cc <idfcc_test+0x354>)
 800244c:	f7fe ffe4 	bl	8001418 <BMP388_FindAltitude>
 8002450:	4603      	mov	r3, r0
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff6c 	bl	8002330 <round2>
 8002458:	4603      	mov	r3, r0
 800245a:	67fb      	str	r3, [r7, #124]	@ 0x7c
	            float test_pressure2 = round2(test_pressure);
 800245c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff65 	bl	8002330 <round2>
 8002466:	4603      	mov	r3, r0
 8002468:	67bb      	str	r3, [r7, #120]	@ 0x78
	            v = bno055_getVectorEuler();
 800246a:	4c99      	ldr	r4, [pc, #612]	@ (80026d0 <idfcc_test+0x358>)
 800246c:	463b      	mov	r3, r7
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fcc5 	bl	8001dfe <bno055_getVectorEuler>
 8002474:	4625      	mov	r5, r4
 8002476:	463c      	mov	r4, r7
 8002478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002480:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	            test_angx = round2(v.w);
 8002484:	4b92      	ldr	r3, [pc, #584]	@ (80026d0 <idfcc_test+0x358>)
 8002486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f7fe fb1b 	bl	8000ac8 <__aeabi_d2f>
 8002492:	4603      	mov	r3, r0
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff4b 	bl	8002330 <round2>
 800249a:	4603      	mov	r3, r0
 800249c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	            test_angy = round2(v.x);
 80024a0:	4b8b      	ldr	r3, [pc, #556]	@ (80026d0 <idfcc_test+0x358>)
 80024a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	f7fe fb0d 	bl	8000ac8 <__aeabi_d2f>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff3d 	bl	8002330 <round2>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	            test_angz = round2(v.y);
 80024bc:	4b84      	ldr	r3, [pc, #528]	@ (80026d0 <idfcc_test+0x358>)
 80024be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe faff 	bl	8000ac8 <__aeabi_d2f>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff2f 	bl	8002330 <round2>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	            bno055_vector_t accel = bno055_getVectorAccelerometer();
 80024d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fc81 	bl	8001de4 <bno055_getVectorAccelerometer>
	            test_accx = round2(accel.x);
 80024e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7fe faed 	bl	8000ac8 <__aeabi_d2f>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff1d 	bl	8002330 <round2>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	            test_accy = round2(accel.y);
 80024fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	f7fe fae0 	bl	8000ac8 <__aeabi_d2f>
 8002508:	4603      	mov	r3, r0
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff10 	bl	8002330 <round2>
 8002510:	4603      	mov	r3, r0
 8002512:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	            test_accz = round2(accel.z);
 8002516:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	f7fe fad3 	bl	8000ac8 <__aeabi_d2f>
 8002522:	4603      	mov	r3, r0
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff03 	bl	8002330 <round2>
 800252a:	4603      	mov	r3, r0
 800252c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	            int index_test = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	            test_packet[index_test++] = header_test;
 8002536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002540:	33f0      	adds	r3, #240	@ 0xf0
 8002542:	443b      	add	r3, r7
 8002544:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8002548:	f803 2ca4 	strb.w	r2, [r3, #-164]
	            memcpy(&test_packet[index_test], &test_altitude2, sizeof(float)); index_test += sizeof(float);
 800254c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002554:	4413      	add	r3, r2
 8002556:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800255e:	3304      	adds	r3, #4
 8002560:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	            memcpy(&test_packet[index_test], &test_pressure2, sizeof(float)); index_test += sizeof(float);
 8002564:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800256c:	4413      	add	r3, r2
 800256e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002576:	3304      	adds	r3, #4
 8002578:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	            memcpy(&test_packet[index_test], &test_angx, sizeof(float)); index_test += sizeof(float);
 800257c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002584:	4413      	add	r3, r2
 8002586:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002590:	3304      	adds	r3, #4
 8002592:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	            memcpy(&test_packet[index_test], &test_angy, sizeof(float)); index_test += sizeof(float);
 8002596:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800259a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800259e:	4413      	add	r3, r2
 80025a0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025aa:	3304      	adds	r3, #4
 80025ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	            memcpy(&test_packet[index_test], &test_angz, sizeof(float)); index_test += sizeof(float);
 80025b0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80025b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025b8:	4413      	add	r3, r2
 80025ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025c4:	3304      	adds	r3, #4
 80025c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	            memcpy(&test_packet[index_test], &test_accx, sizeof(float)); index_test += sizeof(float);
 80025ca:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80025ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025d2:	4413      	add	r3, r2
 80025d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025de:	3304      	adds	r3, #4
 80025e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	            memcpy(&test_packet[index_test], &test_accy, sizeof(float)); index_test += sizeof(float);
 80025e4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80025e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025ec:	4413      	add	r3, r2
 80025ee:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025f8:	3304      	adds	r3, #4
 80025fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	            memcpy(&test_packet[index_test], &test_accz, sizeof(float)); index_test += sizeof(float);
 80025fe:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002606:	4413      	add	r3, r2
 8002608:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002612:	3304      	adds	r3, #4
 8002614:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	            for (int i = 1; i < index_test; i++) {
 8002618:	2301      	movs	r3, #1
 800261a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800261e:	e010      	b.n	8002642 <idfcc_test+0x2ca>
	                test_checksum += test_packet[i];
 8002620:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002624:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002628:	4413      	add	r3, r2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002632:	4413      	add	r3, r2
 8002634:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	            for (int i = 1; i < index_test; i++) {
 8002638:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800263c:	3301      	adds	r3, #1
 800263e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002642:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800264a:	429a      	cmp	r2, r3
 800264c:	dbe8      	blt.n	8002620 <idfcc_test+0x2a8>
	            test_checksum %= 256;
 800264e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002652:	425a      	negs	r2, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	bf58      	it	pl
 800265a:	4253      	negpl	r3, r2
 800265c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	            test_packet[index_test++] = test_checksum;
 8002660:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800266a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	33f0      	adds	r3, #240	@ 0xf0
 8002672:	443b      	add	r3, r7
 8002674:	f803 2ca4 	strb.w	r2, [r3, #-164]
	            test_packet[index_test++] = test_footer1;
 8002678:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002682:	33f0      	adds	r3, #240	@ 0xf0
 8002684:	443b      	add	r3, r7
 8002686:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 800268a:	f803 2ca4 	strb.w	r2, [r3, #-164]
	            test_packet[index_test++] = test_footer2;
 800268e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002698:	33f0      	adds	r3, #240	@ 0xf0
 800269a:	443b      	add	r3, r7
 800269c:	f897 20ae 	ldrb.w	r2, [r7, #174]	@ 0xae
 80026a0:	f803 2ca4 	strb.w	r2, [r3, #-164]
	            HAL_UART_Transmit(&huart2, test_packet, index_test, HAL_MAX_DELAY);
 80026a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	4808      	ldr	r0, [pc, #32]	@ (80026d4 <idfcc_test+0x35c>)
 80026b4:	f004 fd25 	bl	8007102 <HAL_UART_Transmit>
	            HAL_Delay(100);
 80026b8:	2064      	movs	r0, #100	@ 0x64
 80026ba:	f001 f953 	bl	8003964 <HAL_Delay>
	        while (1) {
 80026be:	e678      	b.n	80023b2 <idfcc_test+0x3a>
 80026c0:	20000550 	.word	0x20000550
 80026c4:	200003e4 	.word	0x200003e4
 80026c8:	20000548 	.word	0x20000548
 80026cc:	47c41800 	.word	0x47c41800
 80026d0:	20000578 	.word	0x20000578
 80026d4:	20000354 	.word	0x20000354
      else if(packet[1]==0x22 || mode==2)
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	3301      	adds	r3, #1
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b22      	cmp	r3, #34	@ 0x22
 80026e0:	d00a      	beq.n	80026f8 <idfcc_test+0x380>
 80026e2:	4bab      	ldr	r3, [pc, #684]	@ (8002990 <idfcc_test+0x618>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fcde 	bl	80010ac <__aeabi_fcmpeq>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 81ea 	beq.w	8002acc <idfcc_test+0x754>
		  mode = 2;
 80026f8:	4ba5      	ldr	r3, [pc, #660]	@ (8002990 <idfcc_test+0x618>)
 80026fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026fe:	601a      	str	r2, [r3, #0]
		  if(packet[1]!=0x24 && packet[0]==0xAB)
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	3301      	adds	r3, #1
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b24      	cmp	r3, #36	@ 0x24
 8002708:	f000 81bd 	beq.w	8002a86 <idfcc_test+0x70e>
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2bab      	cmp	r3, #171	@ 0xab
 8002712:	f040 81b8 	bne.w	8002a86 <idfcc_test+0x70e>
			  float taltitude = extract_float_from_bytes(packet, 1);
 8002716:	2101      	movs	r1, #1
 8002718:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800271a:	f7ff fdf7 	bl	800230c <extract_float_from_bytes>
 800271e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
			  float tpressure = extract_float_from_bytes(packet, 5);
 8002722:	2105      	movs	r1, #5
 8002724:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002726:	f7ff fdf1 	bl	800230c <extract_float_from_bytes>
 800272a:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
			  float acc_x    = extract_float_from_bytes(packet, 9);
 800272e:	2109      	movs	r1, #9
 8002730:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002732:	f7ff fdeb 	bl	800230c <extract_float_from_bytes>
 8002736:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
			  float acc_y = extract_float_from_bytes(packet, 13);
 800273a:	210d      	movs	r1, #13
 800273c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800273e:	f7ff fde5 	bl	800230c <extract_float_from_bytes>
 8002742:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
			  float acc_z = extract_float_from_bytes(packet, 17);
 8002746:	2111      	movs	r1, #17
 8002748:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800274a:	f7ff fddf 	bl	800230c <extract_float_from_bytes>
 800274e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
			  float ang_x   = extract_float_from_bytes(packet, 21);
 8002752:	2115      	movs	r1, #21
 8002754:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002756:	f7ff fdd9 	bl	800230c <extract_float_from_bytes>
 800275a:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
			  float ang_y = extract_float_from_bytes(packet, 25);
 800275e:	2119      	movs	r1, #25
 8002760:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002762:	f7ff fdd3 	bl	800230c <extract_float_from_bytes>
 8002766:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
			  float ang_z = extract_float_from_bytes(packet, 29);
 800276a:	211d      	movs	r1, #29
 800276c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800276e:	f7ff fdcd 	bl	800230c <extract_float_from_bytes>
 8002772:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
			  uint8_t test_checksum = packet[33];
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800277c:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			  uint8_t test_footer1 = packet[34];
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002786:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
			  uint8_t test_footer2 = packet[35];
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002790:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
			  if(flag)
 8002794:	4b7f      	ldr	r3, [pc, #508]	@ (8002994 <idfcc_test+0x61c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <idfcc_test+0x432>
				  initialalt = taltitude;
 800279c:	4a7e      	ldr	r2, [pc, #504]	@ (8002998 <idfcc_test+0x620>)
 800279e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027a2:	6013      	str	r3, [r2, #0]
				  flag = 0;
 80027a4:	4b7b      	ldr	r3, [pc, #492]	@ (8002994 <idfcc_test+0x61c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
			  float height = taltitude - initialalt;
 80027aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002998 <idfcc_test+0x620>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4619      	mov	r1, r3
 80027b0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80027b4:	f7fe f9dc 	bl	8000b70 <__aeabi_fsub>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			  currtime = HAL_GetTick();
 80027be:	f001 f8c7 	bl	8003950 <HAL_GetTick>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4a75      	ldr	r2, [pc, #468]	@ (800299c <idfcc_test+0x624>)
 80027c6:	6013      	str	r3, [r2, #0]
			  if(height>=50 && launch == 0)
 80027c8:	4975      	ldr	r1, [pc, #468]	@ (80029a0 <idfcc_test+0x628>)
 80027ca:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80027ce:	f7fe fc8b 	bl	80010e8 <__aeabi_fcmpge>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <idfcc_test+0x478>
 80027d8:	4b72      	ldr	r3, [pc, #456]	@ (80029a4 <idfcc_test+0x62c>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d107      	bne.n	80027f0 <idfcc_test+0x478>
			  	  launch=1;
 80027e0:	4b70      	ldr	r3, [pc, #448]	@ (80029a4 <idfcc_test+0x62c>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
			  	  t1= HAL_GetTick();
 80027e6:	f001 f8b3 	bl	8003950 <HAL_GetTick>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4a6e      	ldr	r2, [pc, #440]	@ (80029a8 <idfcc_test+0x630>)
 80027ee:	6013      	str	r3, [r2, #0]
			  if((currtime - t1) >= 3000 && launch == 1 && burnout == 0)
 80027f0:	4b6a      	ldr	r3, [pc, #424]	@ (800299c <idfcc_test+0x624>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b6c      	ldr	r3, [pc, #432]	@ (80029a8 <idfcc_test+0x630>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80027fe:	4293      	cmp	r3, r2
 8002800:	d90a      	bls.n	8002818 <idfcc_test+0x4a0>
 8002802:	4b68      	ldr	r3, [pc, #416]	@ (80029a4 <idfcc_test+0x62c>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d106      	bne.n	8002818 <idfcc_test+0x4a0>
 800280a:	4b68      	ldr	r3, [pc, #416]	@ (80029ac <idfcc_test+0x634>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <idfcc_test+0x4a0>
				  burnout=1;
 8002812:	4b66      	ldr	r3, [pc, #408]	@ (80029ac <idfcc_test+0x634>)
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
			  if(height>=500  && minalt == 0)
 8002818:	4965      	ldr	r1, [pc, #404]	@ (80029b0 <idfcc_test+0x638>)
 800281a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 800281e:	f7fe fc63 	bl	80010e8 <__aeabi_fcmpge>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <idfcc_test+0x4be>
 8002828:	4b62      	ldr	r3, [pc, #392]	@ (80029b4 <idfcc_test+0x63c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <idfcc_test+0x4be>
				  minalt = 1;
 8002830:	4b60      	ldr	r3, [pc, #384]	@ (80029b4 <idfcc_test+0x63c>)
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
			  if(ang_x + ang_y >= 80 )
 8002836:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800283a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800283e:	f7fe f999 	bl	8000b74 <__addsf3>
 8002842:	4603      	mov	r3, r0
 8002844:	495c      	ldr	r1, [pc, #368]	@ (80029b8 <idfcc_test+0x640>)
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fc4e 	bl	80010e8 <__aeabi_fcmpge>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <idfcc_test+0x4e0>
				  angle = 1;
 8002852:	4b5a      	ldr	r3, [pc, #360]	@ (80029bc <idfcc_test+0x644>)
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
			  if(height - prev_height < 0 && angle == 1 && apogee == 0)
 8002858:	4b59      	ldr	r3, [pc, #356]	@ (80029c0 <idfcc_test+0x648>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4619      	mov	r1, r3
 800285e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002862:	f7fe f985 	bl	8000b70 <__aeabi_fsub>
 8002866:	4603      	mov	r3, r0
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fc27 	bl	80010c0 <__aeabi_fcmplt>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <idfcc_test+0x516>
 8002878:	4b50      	ldr	r3, [pc, #320]	@ (80029bc <idfcc_test+0x644>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d106      	bne.n	800288e <idfcc_test+0x516>
 8002880:	4b50      	ldr	r3, [pc, #320]	@ (80029c4 <idfcc_test+0x64c>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <idfcc_test+0x516>
				  apogee = 1;
 8002888:	4b4e      	ldr	r3, [pc, #312]	@ (80029c4 <idfcc_test+0x64c>)
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
			 prev_height = height;
 800288e:	4a4c      	ldr	r2, [pc, #304]	@ (80029c0 <idfcc_test+0x648>)
 8002890:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002894:	6013      	str	r3, [r2, #0]
			 if(apogee == 1 && drift == 0)
 8002896:	4b4b      	ldr	r3, [pc, #300]	@ (80029c4 <idfcc_test+0x64c>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d10b      	bne.n	80028b6 <idfcc_test+0x53e>
 800289e:	4b4a      	ldr	r3, [pc, #296]	@ (80029c8 <idfcc_test+0x650>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <idfcc_test+0x53e>
				 drift = 1;
 80028a6:	4b48      	ldr	r3, [pc, #288]	@ (80029c8 <idfcc_test+0x650>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
				 t2=HAL_GetTick();
 80028ac:	f001 f850 	bl	8003950 <HAL_GetTick>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4a46      	ldr	r2, [pc, #280]	@ (80029cc <idfcc_test+0x654>)
 80028b4:	6013      	str	r3, [r2, #0]
			 if(height <= 550 && drift == 1 && fallalt == 0)
 80028b6:	4946      	ldr	r1, [pc, #280]	@ (80029d0 <idfcc_test+0x658>)
 80028b8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80028bc:	f7fe fc0a 	bl	80010d4 <__aeabi_fcmple>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <idfcc_test+0x564>
 80028c6:	4b40      	ldr	r3, [pc, #256]	@ (80029c8 <idfcc_test+0x650>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d106      	bne.n	80028dc <idfcc_test+0x564>
 80028ce:	4b41      	ldr	r3, [pc, #260]	@ (80029d4 <idfcc_test+0x65c>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <idfcc_test+0x564>
				 fallalt = 1;
 80028d6:	4b3f      	ldr	r3, [pc, #252]	@ (80029d4 <idfcc_test+0x65c>)
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
			 if(currtime - t2 > 5000 && fallalt == 1 && mainpara == 0)
 80028dc:	4b2f      	ldr	r3, [pc, #188]	@ (800299c <idfcc_test+0x624>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b3a      	ldr	r3, [pc, #232]	@ (80029cc <idfcc_test+0x654>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d90a      	bls.n	8002904 <idfcc_test+0x58c>
 80028ee:	4b39      	ldr	r3, [pc, #228]	@ (80029d4 <idfcc_test+0x65c>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d106      	bne.n	8002904 <idfcc_test+0x58c>
 80028f6:	4b38      	ldr	r3, [pc, #224]	@ (80029d8 <idfcc_test+0x660>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <idfcc_test+0x58c>
				 mainpara = 1;
 80028fe:	4b36      	ldr	r3, [pc, #216]	@ (80029d8 <idfcc_test+0x660>)
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
			 tr_packet[0] = 0xAA;
 8002904:	23aa      	movs	r3, #170	@ 0xaa
 8002906:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
			 tr_packet[1]=0;
 800290a:	2300      	movs	r3, #0
 800290c:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
			 if(launch==1){
 8002910:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <idfcc_test+0x62c>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <idfcc_test+0x5ac>
				 tr_packet[1]+=128;
 8002918:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800291c:	3b80      	subs	r3, #128	@ 0x80
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
			 if (burnout==1){
 8002924:	4b21      	ldr	r3, [pc, #132]	@ (80029ac <idfcc_test+0x634>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <idfcc_test+0x5c0>
				 tr_packet[1]+=64;
 800292c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8002930:	3340      	adds	r3, #64	@ 0x40
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
			 if (minalt==1){
 8002938:	4b1e      	ldr	r3, [pc, #120]	@ (80029b4 <idfcc_test+0x63c>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d105      	bne.n	800294c <idfcc_test+0x5d4>
				 tr_packet[1]+=32;
 8002940:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8002944:	3320      	adds	r3, #32
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
			 if (angle==1){
 800294c:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <idfcc_test+0x644>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <idfcc_test+0x5e8>
				 tr_packet[1]+=16;
 8002954:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8002958:	3310      	adds	r3, #16
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
			 if (apogee==1){
 8002960:	4b18      	ldr	r3, [pc, #96]	@ (80029c4 <idfcc_test+0x64c>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <idfcc_test+0x5fc>
				 tr_packet[1]+=8;
 8002968:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800296c:	3308      	adds	r3, #8
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
			 if (drift==1){
 8002974:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <idfcc_test+0x650>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d105      	bne.n	8002988 <idfcc_test+0x610>
				 tr_packet[1]+=4;
 800297c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8002980:	3304      	adds	r3, #4
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
			 if (fallalt==1){
 8002988:	4b12      	ldr	r3, [pc, #72]	@ (80029d4 <idfcc_test+0x65c>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	e025      	b.n	80029dc <idfcc_test+0x664>
 8002990:	20000550 	.word	0x20000550
 8002994:	2000000c 	.word	0x2000000c
 8002998:	2000059c 	.word	0x2000059c
 800299c:	2000055c 	.word	0x2000055c
 80029a0:	42480000 	.word	0x42480000
 80029a4:	20000554 	.word	0x20000554
 80029a8:	20000558 	.word	0x20000558
 80029ac:	20000560 	.word	0x20000560
 80029b0:	43fa0000 	.word	0x43fa0000
 80029b4:	20000561 	.word	0x20000561
 80029b8:	42a00000 	.word	0x42a00000
 80029bc:	20000562 	.word	0x20000562
 80029c0:	20000564 	.word	0x20000564
 80029c4:	20000555 	.word	0x20000555
 80029c8:	20000563 	.word	0x20000563
 80029cc:	2000056c 	.word	0x2000056c
 80029d0:	44098000 	.word	0x44098000
 80029d4:	20000568 	.word	0x20000568
 80029d8:	20000570 	.word	0x20000570
 80029dc:	d105      	bne.n	80029ea <idfcc_test+0x672>
				 tr_packet[1]+=2;
 80029de:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80029e2:	3302      	adds	r3, #2
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
			 if (mainpara==1){
 80029ea:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae8 <idfcc_test+0x770>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d105      	bne.n	80029fe <idfcc_test+0x686>
				 tr_packet[1]+=1;
 80029f2:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80029f6:	3301      	adds	r3, #1
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
			 tr_packet[2]=0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
			 int t_checksum=0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			 for (int i = 0; i < 3; i++) {
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a10:	e00f      	b.n	8002a32 <idfcc_test+0x6ba>
			 		t_checksum += packet[i];
 8002a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a22:	4413      	add	r3, r2
 8002a24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			 for (int i = 0; i < 3; i++) {
 8002a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	ddeb      	ble.n	8002a12 <idfcc_test+0x69a>
			 t_checksum %= 256;
 8002a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a3e:	425a      	negs	r2, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	bf58      	it	pl
 8002a46:	4253      	negpl	r3, r2
 8002a48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			 t_checksum += 6;
 8002a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a50:	3306      	adds	r3, #6
 8002a52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			 tr_packet[3] = t_checksum;
 8002a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
			 tr_packet[4] = 0x0D;
 8002a60:	230d      	movs	r3, #13
 8002a62:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			 tr_packet[5] = 0x0A;
 8002a66:	230a      	movs	r3, #10
 8002a68:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
			HAL_UART_Transmit(&huart2, tr_packet, sizeof(tr_packet), HAL_MAX_DELAY);
 8002a6c:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
 8002a74:	2206      	movs	r2, #6
 8002a76:	481d      	ldr	r0, [pc, #116]	@ (8002aec <idfcc_test+0x774>)
 8002a78:	f004 fb43 	bl	8007102 <HAL_UART_Transmit>
			HAL_Delay(100);
 8002a7c:	2064      	movs	r0, #100	@ 0x64
 8002a7e:	f000 ff71 	bl	8003964 <HAL_Delay>
		  {
 8002a82:	bf00      	nop
		  if(packet[1]!=0x24 && packet[0]==0xAB)
 8002a84:	e02c      	b.n	8002ae0 <idfcc_test+0x768>
			  mode=0;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	@ (8002af0 <idfcc_test+0x778>)
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
			  launch=0;
 8002a8e:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <idfcc_test+0x77c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
			  apogee=0;
 8002a94:	4b18      	ldr	r3, [pc, #96]	@ (8002af8 <idfcc_test+0x780>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
			  burnout=0;
 8002a9a:	4b18      	ldr	r3, [pc, #96]	@ (8002afc <idfcc_test+0x784>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
			  t1=0;
 8002aa0:	4b17      	ldr	r3, [pc, #92]	@ (8002b00 <idfcc_test+0x788>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
			  minalt=0;
 8002aa6:	4b17      	ldr	r3, [pc, #92]	@ (8002b04 <idfcc_test+0x78c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
			  angle=0;
 8002aac:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <idfcc_test+0x790>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
			  drift=0;
 8002ab2:	4b16      	ldr	r3, [pc, #88]	@ (8002b0c <idfcc_test+0x794>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
			  fallalt=0;
 8002ab8:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <idfcc_test+0x798>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
			  t2=0;
 8002abe:	4b15      	ldr	r3, [pc, #84]	@ (8002b14 <idfcc_test+0x79c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
			  mainpara=0;
 8002ac4:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <idfcc_test+0x770>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
		  if(packet[1]!=0x24 && packet[0]==0xAB)
 8002aca:	e009      	b.n	8002ae0 <idfcc_test+0x768>
      else if(packet[1]==0x24)
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	3301      	adds	r3, #1
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b24      	cmp	r3, #36	@ 0x24
 8002ad4:	d104      	bne.n	8002ae0 <idfcc_test+0x768>
      {mode= 0;}
 8002ad6:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <idfcc_test+0x778>)
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
}
 8002ade:	e7ff      	b.n	8002ae0 <idfcc_test+0x768>
 8002ae0:	bf00      	nop
 8002ae2:	37f0      	adds	r7, #240	@ 0xf0
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae8:	20000570 	.word	0x20000570
 8002aec:	20000354 	.word	0x20000354
 8002af0:	20000550 	.word	0x20000550
 8002af4:	20000554 	.word	0x20000554
 8002af8:	20000555 	.word	0x20000555
 8002afc:	20000560 	.word	0x20000560
 8002b00:	20000558 	.word	0x20000558
 8002b04:	20000561 	.word	0x20000561
 8002b08:	20000562 	.word	0x20000562
 8002b0c:	20000563 	.word	0x20000563
 8002b10:	20000568 	.word	0x20000568
 8002b14:	2000056c 	.word	0x2000056c

08002b18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
//	// ZOE Interrupt
	if (huart->Instance == USART2) {
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2c      	ldr	r2, [pc, #176]	@ (8002bd8 <HAL_UART_RxCpltCallback+0xc0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d12c      	bne.n	8002b84 <HAL_UART_RxCpltCallback+0x6c>
		// if the character received is other than 'enter' ascii13, save the data in buffer
		if (rxData != '\n' && rxIndex < sizeof(rxBuffer)) {
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bdc <HAL_UART_RxCpltCallback+0xc4>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b0a      	cmp	r3, #10
 8002b30:	d010      	beq.n	8002b54 <HAL_UART_RxCpltCallback+0x3c>
 8002b32:	4b2b      	ldr	r3, [pc, #172]	@ (8002be0 <HAL_UART_RxCpltCallback+0xc8>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b25b      	sxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db0b      	blt.n	8002b54 <HAL_UART_RxCpltCallback+0x3c>
			rxBuffer[rxIndex++] = rxData;
 8002b3c:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <HAL_UART_RxCpltCallback+0xc8>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	b2d1      	uxtb	r1, r2
 8002b44:	4a26      	ldr	r2, [pc, #152]	@ (8002be0 <HAL_UART_RxCpltCallback+0xc8>)
 8002b46:	7011      	strb	r1, [r2, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b24      	ldr	r3, [pc, #144]	@ (8002bdc <HAL_UART_RxCpltCallback+0xc4>)
 8002b4c:	7819      	ldrb	r1, [r3, #0]
 8002b4e:	4b25      	ldr	r3, [pc, #148]	@ (8002be4 <HAL_UART_RxCpltCallback+0xcc>)
 8002b50:	5499      	strb	r1, [r3, r2]
 8002b52:	e012      	b.n	8002b7a <HAL_UART_RxCpltCallback+0x62>
		} else {
			char *bfr = (char*) rxBuffer;
 8002b54:	4b23      	ldr	r3, [pc, #140]	@ (8002be4 <HAL_UART_RxCpltCallback+0xcc>)
 8002b56:	60fb      	str	r3, [r7, #12]
			if (gpsValidate((char*) rxBuffer))
 8002b58:	4822      	ldr	r0, [pc, #136]	@ (8002be4 <HAL_UART_RxCpltCallback+0xcc>)
 8002b5a:	f7ff fb75 	bl	8002248 <gpsValidate>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_UART_RxCpltCallback+0x52>
				gpsParse(bfr);
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f7ff fadb 	bl	8002120 <gpsParse>
			rxIndex = 0;
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <HAL_UART_RxCpltCallback+0xc8>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
			memset(rxBuffer, 0, sizeof(rxBuffer));
 8002b70:	2280      	movs	r2, #128	@ 0x80
 8002b72:	2100      	movs	r1, #0
 8002b74:	481b      	ldr	r0, [pc, #108]	@ (8002be4 <HAL_UART_RxCpltCallback+0xcc>)
 8002b76:	f006 f9a1 	bl	8008ebc <memset>
		}
		HAL_UART_Receive_IT(&huart2, &rxData, 1); // Enabling interrupt receive again
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4917      	ldr	r1, [pc, #92]	@ (8002bdc <HAL_UART_RxCpltCallback+0xc4>)
 8002b7e:	481a      	ldr	r0, [pc, #104]	@ (8002be8 <HAL_UART_RxCpltCallback+0xd0>)
 8002b80:	f004 fb4a 	bl	8007218 <HAL_UART_Receive_IT>
//			memset(rxBuffer2, 0, sizeof(rxBuffer2));
//		}
//		HAL_UART_Receive_IT(&huart2, &rxData2, 1); // Enabling interrupt receive again
//	}
//}
	if (huart->Instance == USART1) {
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a18      	ldr	r2, [pc, #96]	@ (8002bec <HAL_UART_RxCpltCallback+0xd4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d11f      	bne.n	8002bce <HAL_UART_RxCpltCallback+0xb6>
				// We separate messages with a hash token in start and end.

		 if (rxData2 != 0x0A && rxIndex2 < sizeof(rxBuffer2)) {
 8002b8e:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <HAL_UART_RxCpltCallback+0xd8>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b0a      	cmp	r3, #10
 8002b94:	d010      	beq.n	8002bb8 <HAL_UART_RxCpltCallback+0xa0>
 8002b96:	4b17      	ldr	r3, [pc, #92]	@ (8002bf4 <HAL_UART_RxCpltCallback+0xdc>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	db0b      	blt.n	8002bb8 <HAL_UART_RxCpltCallback+0xa0>
				rxBuffer2[rxIndex2++] = rxData2;
 8002ba0:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <HAL_UART_RxCpltCallback+0xdc>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	b2d1      	uxtb	r1, r2
 8002ba8:	4a12      	ldr	r2, [pc, #72]	@ (8002bf4 <HAL_UART_RxCpltCallback+0xdc>)
 8002baa:	7011      	strb	r1, [r2, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <HAL_UART_RxCpltCallback+0xd8>)
 8002bb0:	7819      	ldrb	r1, [r3, #0]
 8002bb2:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <HAL_UART_RxCpltCallback+0xe0>)
 8002bb4:	5499      	strb	r1, [r3, r2]

			}
		}
//	HAL_UART_Receive_IT(&huart1, &rxData2, 1);

}
 8002bb6:	e00a      	b.n	8002bce <HAL_UART_RxCpltCallback+0xb6>
			} else if (rxIndex2 != 0 && rxData2 == 0x0A) {
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf4 <HAL_UART_RxCpltCallback+0xdc>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d006      	beq.n	8002bce <HAL_UART_RxCpltCallback+0xb6>
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <HAL_UART_RxCpltCallback+0xd8>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b0a      	cmp	r3, #10
 8002bc6:	d102      	bne.n	8002bce <HAL_UART_RxCpltCallback+0xb6>
				idfcc_test(rxBuffer2);
 8002bc8:	480b      	ldr	r0, [pc, #44]	@ (8002bf8 <HAL_UART_RxCpltCallback+0xe0>)
 8002bca:	f7ff fbd5 	bl	8002378 <idfcc_test>
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40004400 	.word	0x40004400
 8002bdc:	200004a5 	.word	0x200004a5
 8002be0:	200004a4 	.word	0x200004a4
 8002be4:	20000424 	.word	0x20000424
 8002be8:	20000354 	.word	0x20000354
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	20000529 	.word	0x20000529
 8002bf4:	20000528 	.word	0x20000528
 8002bf8:	200004a8 	.word	0x200004a8

08002bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bfc:	b5b0      	push	{r4, r5, r7, lr}
 8002bfe:	b094      	sub	sp, #80	@ 0x50
 8002c00:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c02:	f000 fe4d 	bl	80038a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c06:	f000 f8e9 	bl	8002ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c0a:	f000 faaf 	bl	800316c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c0e:	f000 f92d 	bl	8002e6c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002c12:	f000 fa2d 	bl	8003070 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002c16:	f000 fa55 	bl	80030c4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002c1a:	f000 f955 	bl	8002ec8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002c1e:	f000 f989 	bl	8002f34 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8002c22:	f000 fa79 	bl	8003118 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_InitTick(0);
 8002c26:	2000      	movs	r0, #0
 8002c28:	f000 fe50 	bl	80038cc <HAL_InitTick>
//	bno055_assignI2C(&hi2c1);
//	bno055_setup();
//	bno055_setOperationModeNDOF();
  HAL_Delay(5000);
 8002c2c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002c30:	f000 fe98 	bl	8003964 <HAL_Delay>
  bno055_assignI2C(&hi2c1);
 8002c34:	485c      	ldr	r0, [pc, #368]	@ (8002da8 <main+0x1ac>)
 8002c36:	f7ff f915 	bl	8001e64 <bno055_assignI2C>
  	bno055_setup();
 8002c3a:	f7fe ff59 	bl	8001af0 <bno055_setup>
  	HAL_Delay(500);
 8002c3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c42:	f000 fe8f 	bl	8003964 <HAL_Delay>
	bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f7fe ff20 	bl	8001a8c <bno055_setOperationMode>
  	HAL_Delay(500);
 8002c4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c50:	f000 fe88 	bl	8003964 <HAL_Delay>
	bno055_reset();
 8002c54:	f7fe ff40 	bl	8001ad8 <bno055_reset>
	HAL_Delay(500);
 8002c58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c5c:	f000 fe82 	bl	8003964 <HAL_Delay>
  	bno055_setOperationModeNDOF();
 8002c60:	f7fe ff33 	bl	8001aca <bno055_setOperationModeNDOF>
//  	HAL_TIM_PWM_Start (&htim2, TIM_CHANNEL_1);
//    HAL_TIM_PWM_Start (&htim2, TIM_CHANNEL_2);
    HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_4);
 8002c64:	210c      	movs	r1, #12
 8002c66:	4851      	ldr	r0, [pc, #324]	@ (8002dac <main+0x1b0>)
 8002c68:	f003 fc70 	bl	800654c <HAL_TIM_PWM_Start>
	  hbmp388.hi2c = &hi2c1;
 8002c6c:	4b50      	ldr	r3, [pc, #320]	@ (8002db0 <main+0x1b4>)
 8002c6e:	4a4e      	ldr	r2, [pc, #312]	@ (8002da8 <main+0x1ac>)
 8002c70:	601a      	str	r2, [r3, #0]
	  BMP388_Init(&hbmp388);
 8002c72:	484f      	ldr	r0, [pc, #316]	@ (8002db0 <main+0x1b4>)
 8002c74:	f7fe faa8 	bl	80011c8 <BMP388_Init>
	  BMP388_SetTempOS(&hbmp388, BMP388_NO_OVERSAMPLING);
 8002c78:	2100      	movs	r1, #0
 8002c7a:	484d      	ldr	r0, [pc, #308]	@ (8002db0 <main+0x1b4>)
 8002c7c:	f7fe face 	bl	800121c <BMP388_SetTempOS>
	  BMP388_SetPressOS(&hbmp388, BMP388_OVERSAMPLING_8X);
 8002c80:	2103      	movs	r1, #3
 8002c82:	484b      	ldr	r0, [pc, #300]	@ (8002db0 <main+0x1b4>)
 8002c84:	f7fe fae9 	bl	800125a <BMP388_SetPressOS>
	  BMP388_SetIIRFilterCoeff(&hbmp388, BMP3_IIR_FILTER_COEFF_3);
 8002c88:	2102      	movs	r1, #2
 8002c8a:	4849      	ldr	r0, [pc, #292]	@ (8002db0 <main+0x1b4>)
 8002c8c:	f7fe fb03 	bl	8001296 <BMP388_SetIIRFilterCoeff>
	  BMP388_SetOutputDataRate(&hbmp388, BMP3_ODR_50_HZ);
 8002c90:	2102      	movs	r1, #2
 8002c92:	4847      	ldr	r0, [pc, #284]	@ (8002db0 <main+0x1b4>)
 8002c94:	f7fe fb15 	bl	80012c2 <BMP388_SetOutputDataRate>
	  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4946      	ldr	r1, [pc, #280]	@ (8002db4 <main+0x1b8>)
 8002c9c:	4846      	ldr	r0, [pc, #280]	@ (8002db8 <main+0x1bc>)
 8002c9e:	f004 fabb 	bl	8007218 <HAL_UART_Receive_IT>
//	  while (1){
//
//	  }
	  float ground_alt = 0;
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  for (int i = 0; i < 100; i++){
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cac:	e02c      	b.n	8002d08 <main+0x10c>
		uint32_t raw_press = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	637b      	str	r3, [r7, #52]	@ 0x34
		uint32_t raw_temp = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	633b      	str	r3, [r7, #48]	@ 0x30
		uint32_t sensor_time = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		BMP388_GetCalibData(&hbmp388);
 8002cba:	483d      	ldr	r0, [pc, #244]	@ (8002db0 <main+0x1b4>)
 8002cbc:	f7fe fc26 	bl	800150c <BMP388_GetCalibData>
		BMP388_ReadRawPressTempTime(&hbmp388, &raw_press, &raw_temp, &sensor_time);
 8002cc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cc4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002cc8:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002ccc:	4838      	ldr	r0, [pc, #224]	@ (8002db0 <main+0x1b4>)
 8002cce:	f7fe fb0c 	bl	80012ea <BMP388_ReadRawPressTempTime>
		BMP388_CompensateRawPressTemp(&hbmp388, raw_press, raw_temp, &press, &temp);
 8002cd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cd6:	4b39      	ldr	r3, [pc, #228]	@ (8002dbc <main+0x1c0>)
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	4b39      	ldr	r3, [pc, #228]	@ (8002dc0 <main+0x1c4>)
 8002cdc:	4834      	ldr	r0, [pc, #208]	@ (8002db0 <main+0x1b4>)
 8002cde:	f7fe fb7c 	bl	80013da <BMP388_CompensateRawPressTemp>
		ground_alt += BMP388_FindAltitude(100400, press);
 8002ce2:	4b37      	ldr	r3, [pc, #220]	@ (8002dc0 <main+0x1c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4836      	ldr	r0, [pc, #216]	@ (8002dc4 <main+0x1c8>)
 8002cea:	f7fe fb95 	bl	8001418 <BMP388_FindAltitude>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002cf4:	f7fd ff3e 	bl	8000b74 <__addsf3>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		HAL_Delay(50);
 8002cfc:	2032      	movs	r0, #50	@ 0x32
 8002cfe:	f000 fe31 	bl	8003964 <HAL_Delay>
	  for (int i = 0; i < 100; i++){
 8002d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d04:	3301      	adds	r3, #1
 8002d06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0a:	2b63      	cmp	r3, #99	@ 0x63
 8002d0c:	ddcf      	ble.n	8002cae <main+0xb2>
	  }
	  ground_alt /= 100;
 8002d0e:	492e      	ldr	r1, [pc, #184]	@ (8002dc8 <main+0x1cc>)
 8002d10:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002d12:	f7fe f8eb 	bl	8000eec <__aeabi_fdiv>
 8002d16:	4603      	mov	r3, r0
 8002d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_alt = ground_alt;
 8002d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8002dcc <main+0x1d0>)
 8002d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
	  k = bno055_getCalibrationState();
 8002d20:	f7fe ff0e 	bl	8001b40 <bno055_getCalibrationState>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd0 <main+0x1d4>)
 8002d28:	6013      	str	r3, [r2, #0]
	  v = bno055_getVectorEuler();
 8002d2a:	4c2a      	ldr	r4, [pc, #168]	@ (8002dd4 <main+0x1d8>)
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff f865 	bl	8001dfe <bno055_getVectorEuler>
 8002d34:	4625      	mov	r5, r4
 8002d36:	463c      	mov	r4, r7
 8002d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d40:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
//	  v = bno055_getVectorQuaternion();
	  printf("Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.w, v.x, v.y);
 8002d44:	4b23      	ldr	r3, [pc, #140]	@ (8002dd4 <main+0x1d8>)
 8002d46:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002d4a:	4b22      	ldr	r3, [pc, #136]	@ (8002dd4 <main+0x1d8>)
 8002d4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d50:	4920      	ldr	r1, [pc, #128]	@ (8002dd4 <main+0x1d8>)
 8002d52:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8002d56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d5a:	e9cd 2300 	strd	r2, r3, [sp]
 8002d5e:	4622      	mov	r2, r4
 8002d60:	462b      	mov	r3, r5
 8002d62:	481d      	ldr	r0, [pc, #116]	@ (8002dd8 <main+0x1dc>)
 8002d64:	f005 ff16 	bl	8008b94 <iprintf>
	  uint32_t raw_press = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
	  uint32_t raw_temp = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
	  uint32_t sensor_time = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
	  BMP388_GetCalibData(&hbmp388);
 8002d74:	480e      	ldr	r0, [pc, #56]	@ (8002db0 <main+0x1b4>)
 8002d76:	f7fe fbc9 	bl	800150c <BMP388_GetCalibData>
	  BMP388_ReadRawPressTempTime(&hbmp388, &raw_press, &raw_temp, &sensor_time);
 8002d7a:	f107 0320 	add.w	r3, r7, #32
 8002d7e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002d82:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002d86:	480a      	ldr	r0, [pc, #40]	@ (8002db0 <main+0x1b4>)
 8002d88:	f7fe faaf 	bl	80012ea <BMP388_ReadRawPressTempTime>
	  BMP388_CompensateRawPressTemp(&hbmp388, raw_press, raw_temp, &press, &temp);
 8002d8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d90:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <main+0x1c0>)
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <main+0x1c4>)
 8002d96:	4806      	ldr	r0, [pc, #24]	@ (8002db0 <main+0x1b4>)
 8002d98:	f7fe fb1f 	bl	80013da <BMP388_CompensateRawPressTemp>
//		k = bno055_getCalibrationState();
//		v = bno055_getVectorEuler();
//		printf("Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);
//	v = bno055_getVectorQuaternion();
//	printf("W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
		HAL_Delay(500);
 8002d9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002da0:	f000 fde0 	bl	8003964 <HAL_Delay>
	while (1) {
 8002da4:	bf00      	nop
 8002da6:	e7bb      	b.n	8002d20 <main+0x124>
 8002da8:	20000218 	.word	0x20000218
 8002dac:	200002c4 	.word	0x200002c4
 8002db0:	200003e4 	.word	0x200003e4
 8002db4:	200004a5 	.word	0x200004a5
 8002db8:	20000354 	.word	0x20000354
 8002dbc:	20000548 	.word	0x20000548
 8002dc0:	20000544 	.word	0x20000544
 8002dc4:	47c41800 	.word	0x47c41800
 8002dc8:	42c80000 	.word	0x42c80000
 8002dcc:	2000054c 	.word	0x2000054c
 8002dd0:	20000598 	.word	0x20000598
 8002dd4:	20000578 	.word	0x20000578
 8002dd8:	0800de80 	.word	0x0800de80

08002ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b090      	sub	sp, #64	@ 0x40
 8002de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de2:	f107 0318 	add.w	r3, r7, #24
 8002de6:	2228      	movs	r2, #40	@ 0x28
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f006 f866 	bl	8008ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002e08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e12:	2302      	movs	r3, #2
 8002e14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8002e1c:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 8002e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e22:	f107 0318 	add.w	r3, r7, #24
 8002e26:	4618      	mov	r0, r3
 8002e28:	f002 fe54 	bl	8005ad4 <HAL_RCC_OscConfig>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8002e32:	f000 fa3f 	bl	80032b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e36:	230f      	movs	r3, #15
 8002e38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	2102      	movs	r1, #2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 f8c0 	bl	8005fd8 <HAL_RCC_ClockConfig>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002e5e:	f000 fa29 	bl	80032b4 <Error_Handler>
  }
}
 8002e62:	bf00      	nop
 8002e64:	3740      	adds	r7, #64	@ 0x40
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e70:	4b12      	ldr	r3, [pc, #72]	@ (8002ebc <MX_I2C1_Init+0x50>)
 8002e72:	4a13      	ldr	r2, [pc, #76]	@ (8002ec0 <MX_I2C1_Init+0x54>)
 8002e74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002e76:	4b11      	ldr	r3, [pc, #68]	@ (8002ebc <MX_I2C1_Init+0x50>)
 8002e78:	4a12      	ldr	r2, [pc, #72]	@ (8002ec4 <MX_I2C1_Init+0x58>)
 8002e7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ebc <MX_I2C1_Init+0x50>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e82:	4b0e      	ldr	r3, [pc, #56]	@ (8002ebc <MX_I2C1_Init+0x50>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e88:	4b0c      	ldr	r3, [pc, #48]	@ (8002ebc <MX_I2C1_Init+0x50>)
 8002e8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e90:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <MX_I2C1_Init+0x50>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e96:	4b09      	ldr	r3, [pc, #36]	@ (8002ebc <MX_I2C1_Init+0x50>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e9c:	4b07      	ldr	r3, [pc, #28]	@ (8002ebc <MX_I2C1_Init+0x50>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <MX_I2C1_Init+0x50>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ea8:	4804      	ldr	r0, [pc, #16]	@ (8002ebc <MX_I2C1_Init+0x50>)
 8002eaa:	f001 f8db 	bl	8004064 <HAL_I2C_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002eb4:	f000 f9fe 	bl	80032b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002eb8:	bf00      	nop
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000218 	.word	0x20000218
 8002ec0:	40005400 	.word	0x40005400
 8002ec4:	00061a80 	.word	0x00061a80

08002ec8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ecc:	4b17      	ldr	r3, [pc, #92]	@ (8002f2c <MX_SPI2_Init+0x64>)
 8002ece:	4a18      	ldr	r2, [pc, #96]	@ (8002f30 <MX_SPI2_Init+0x68>)
 8002ed0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ed2:	4b16      	ldr	r3, [pc, #88]	@ (8002f2c <MX_SPI2_Init+0x64>)
 8002ed4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ed8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002eda:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <MX_SPI2_Init+0x64>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ee0:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <MX_SPI2_Init+0x64>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee6:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <MX_SPI2_Init+0x64>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eec:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <MX_SPI2_Init+0x64>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <MX_SPI2_Init+0x64>)
 8002ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ef8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <MX_SPI2_Init+0x64>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <MX_SPI2_Init+0x64>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <MX_SPI2_Init+0x64>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <MX_SPI2_Init+0x64>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <MX_SPI2_Init+0x64>)
 8002f14:	220a      	movs	r2, #10
 8002f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f18:	4804      	ldr	r0, [pc, #16]	@ (8002f2c <MX_SPI2_Init+0x64>)
 8002f1a:	f003 f9eb 	bl	80062f4 <HAL_SPI_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002f24:	f000 f9c6 	bl	80032b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	2000026c 	.word	0x2000026c
 8002f30:	40003800 	.word	0x40003800

08002f34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b096      	sub	sp, #88	@ 0x58
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f3a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	60da      	str	r2, [r3, #12]
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	615a      	str	r2, [r3, #20]
 8002f64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	2220      	movs	r2, #32
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f005 ffa5 	bl	8008ebc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f72:	4b3d      	ldr	r3, [pc, #244]	@ (8003068 <MX_TIM1_Init+0x134>)
 8002f74:	4a3d      	ldr	r2, [pc, #244]	@ (800306c <MX_TIM1_Init+0x138>)
 8002f76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002f78:	4b3b      	ldr	r3, [pc, #236]	@ (8003068 <MX_TIM1_Init+0x134>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003068 <MX_TIM1_Init+0x134>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002f84:	4b38      	ldr	r3, [pc, #224]	@ (8003068 <MX_TIM1_Init+0x134>)
 8002f86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f8c:	4b36      	ldr	r3, [pc, #216]	@ (8003068 <MX_TIM1_Init+0x134>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f92:	4b35      	ldr	r3, [pc, #212]	@ (8003068 <MX_TIM1_Init+0x134>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f98:	4b33      	ldr	r3, [pc, #204]	@ (8003068 <MX_TIM1_Init+0x134>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f9e:	4832      	ldr	r0, [pc, #200]	@ (8003068 <MX_TIM1_Init+0x134>)
 8002fa0:	f003 fa2c 	bl	80063fc <HAL_TIM_Base_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002faa:	f000 f983 	bl	80032b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fb4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002fb8:	4619      	mov	r1, r3
 8002fba:	482b      	ldr	r0, [pc, #172]	@ (8003068 <MX_TIM1_Init+0x134>)
 8002fbc:	f003 fc2a 	bl	8006814 <HAL_TIM_ConfigClockSource>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002fc6:	f000 f975 	bl	80032b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002fca:	4827      	ldr	r0, [pc, #156]	@ (8003068 <MX_TIM1_Init+0x134>)
 8002fcc:	f003 fa65 	bl	800649a <HAL_TIM_PWM_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002fd6:	f000 f96d 	bl	80032b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fe2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	481f      	ldr	r0, [pc, #124]	@ (8003068 <MX_TIM1_Init+0x134>)
 8002fea:	f003 ff8b 	bl	8006f04 <HAL_TIMEx_MasterConfigSynchronization>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002ff4:	f000 f95e 	bl	80032b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ff8:	2360      	movs	r3, #96	@ 0x60
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003004:	2300      	movs	r3, #0
 8003006:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003008:	2300      	movs	r3, #0
 800300a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800300c:	2300      	movs	r3, #0
 800300e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003010:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003014:	220c      	movs	r2, #12
 8003016:	4619      	mov	r1, r3
 8003018:	4813      	ldr	r0, [pc, #76]	@ (8003068 <MX_TIM1_Init+0x134>)
 800301a:	f003 fb39 	bl	8006690 <HAL_TIM_PWM_ConfigChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8003024:	f000 f946 	bl	80032b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003028:	2300      	movs	r3, #0
 800302a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800303c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003040:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	4619      	mov	r1, r3
 800304a:	4807      	ldr	r0, [pc, #28]	@ (8003068 <MX_TIM1_Init+0x134>)
 800304c:	f003 ffb8 	bl	8006fc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8003056:	f000 f92d 	bl	80032b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800305a:	4803      	ldr	r0, [pc, #12]	@ (8003068 <MX_TIM1_Init+0x134>)
 800305c:	f000 fa0a 	bl	8003474 <HAL_TIM_MspPostInit>

}
 8003060:	bf00      	nop
 8003062:	3758      	adds	r7, #88	@ 0x58
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	200002c4 	.word	0x200002c4
 800306c:	40012c00 	.word	0x40012c00

08003070 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003074:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <MX_USART1_UART_Init+0x4c>)
 8003076:	4a12      	ldr	r2, [pc, #72]	@ (80030c0 <MX_USART1_UART_Init+0x50>)
 8003078:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800307a:	4b10      	ldr	r3, [pc, #64]	@ (80030bc <MX_USART1_UART_Init+0x4c>)
 800307c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003080:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003082:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <MX_USART1_UART_Init+0x4c>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003088:	4b0c      	ldr	r3, [pc, #48]	@ (80030bc <MX_USART1_UART_Init+0x4c>)
 800308a:	2200      	movs	r2, #0
 800308c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800308e:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <MX_USART1_UART_Init+0x4c>)
 8003090:	2200      	movs	r2, #0
 8003092:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003094:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <MX_USART1_UART_Init+0x4c>)
 8003096:	220c      	movs	r2, #12
 8003098:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309a:	4b08      	ldr	r3, [pc, #32]	@ (80030bc <MX_USART1_UART_Init+0x4c>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a0:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <MX_USART1_UART_Init+0x4c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030a6:	4805      	ldr	r0, [pc, #20]	@ (80030bc <MX_USART1_UART_Init+0x4c>)
 80030a8:	f003 ffdb 	bl	8007062 <HAL_UART_Init>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030b2:	f000 f8ff 	bl	80032b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	2000030c 	.word	0x2000030c
 80030c0:	40013800 	.word	0x40013800

080030c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030c8:	4b11      	ldr	r3, [pc, #68]	@ (8003110 <MX_USART2_UART_Init+0x4c>)
 80030ca:	4a12      	ldr	r2, [pc, #72]	@ (8003114 <MX_USART2_UART_Init+0x50>)
 80030cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030ce:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <MX_USART2_UART_Init+0x4c>)
 80030d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003110 <MX_USART2_UART_Init+0x4c>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <MX_USART2_UART_Init+0x4c>)
 80030de:	2200      	movs	r2, #0
 80030e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003110 <MX_USART2_UART_Init+0x4c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030e8:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <MX_USART2_UART_Init+0x4c>)
 80030ea:	220c      	movs	r2, #12
 80030ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ee:	4b08      	ldr	r3, [pc, #32]	@ (8003110 <MX_USART2_UART_Init+0x4c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f4:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <MX_USART2_UART_Init+0x4c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030fa:	4805      	ldr	r0, [pc, #20]	@ (8003110 <MX_USART2_UART_Init+0x4c>)
 80030fc:	f003 ffb1 	bl	8007062 <HAL_UART_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003106:	f000 f8d5 	bl	80032b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000354 	.word	0x20000354
 8003114:	40004400 	.word	0x40004400

08003118 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <MX_USART3_UART_Init+0x4c>)
 800311e:	4a12      	ldr	r2, [pc, #72]	@ (8003168 <MX_USART3_UART_Init+0x50>)
 8003120:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003122:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <MX_USART3_UART_Init+0x4c>)
 8003124:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003128:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800312a:	4b0e      	ldr	r3, [pc, #56]	@ (8003164 <MX_USART3_UART_Init+0x4c>)
 800312c:	2200      	movs	r2, #0
 800312e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003130:	4b0c      	ldr	r3, [pc, #48]	@ (8003164 <MX_USART3_UART_Init+0x4c>)
 8003132:	2200      	movs	r2, #0
 8003134:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003136:	4b0b      	ldr	r3, [pc, #44]	@ (8003164 <MX_USART3_UART_Init+0x4c>)
 8003138:	2200      	movs	r2, #0
 800313a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800313c:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <MX_USART3_UART_Init+0x4c>)
 800313e:	220c      	movs	r2, #12
 8003140:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003142:	4b08      	ldr	r3, [pc, #32]	@ (8003164 <MX_USART3_UART_Init+0x4c>)
 8003144:	2200      	movs	r2, #0
 8003146:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003148:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <MX_USART3_UART_Init+0x4c>)
 800314a:	2200      	movs	r2, #0
 800314c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800314e:	4805      	ldr	r0, [pc, #20]	@ (8003164 <MX_USART3_UART_Init+0x4c>)
 8003150:	f003 ff87 	bl	8007062 <HAL_UART_Init>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800315a:	f000 f8ab 	bl	80032b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	2000039c 	.word	0x2000039c
 8003168:	40004800 	.word	0x40004800

0800316c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003172:	f107 0310 	add.w	r3, r7, #16
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003180:	4b3a      	ldr	r3, [pc, #232]	@ (800326c <MX_GPIO_Init+0x100>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	4a39      	ldr	r2, [pc, #228]	@ (800326c <MX_GPIO_Init+0x100>)
 8003186:	f043 0310 	orr.w	r3, r3, #16
 800318a:	6193      	str	r3, [r2, #24]
 800318c:	4b37      	ldr	r3, [pc, #220]	@ (800326c <MX_GPIO_Init+0x100>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003198:	4b34      	ldr	r3, [pc, #208]	@ (800326c <MX_GPIO_Init+0x100>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	4a33      	ldr	r2, [pc, #204]	@ (800326c <MX_GPIO_Init+0x100>)
 800319e:	f043 0320 	orr.w	r3, r3, #32
 80031a2:	6193      	str	r3, [r2, #24]
 80031a4:	4b31      	ldr	r3, [pc, #196]	@ (800326c <MX_GPIO_Init+0x100>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b0:	4b2e      	ldr	r3, [pc, #184]	@ (800326c <MX_GPIO_Init+0x100>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	4a2d      	ldr	r2, [pc, #180]	@ (800326c <MX_GPIO_Init+0x100>)
 80031b6:	f043 0304 	orr.w	r3, r3, #4
 80031ba:	6193      	str	r3, [r2, #24]
 80031bc:	4b2b      	ldr	r3, [pc, #172]	@ (800326c <MX_GPIO_Init+0x100>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c8:	4b28      	ldr	r3, [pc, #160]	@ (800326c <MX_GPIO_Init+0x100>)
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	4a27      	ldr	r2, [pc, #156]	@ (800326c <MX_GPIO_Init+0x100>)
 80031ce:	f043 0308 	orr.w	r3, r3, #8
 80031d2:	6193      	str	r3, [r2, #24]
 80031d4:	4b25      	ldr	r3, [pc, #148]	@ (800326c <MX_GPIO_Init+0x100>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80031e0:	2200      	movs	r2, #0
 80031e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80031e6:	4822      	ldr	r0, [pc, #136]	@ (8003270 <MX_GPIO_Init+0x104>)
 80031e8:	f000 ff24 	bl	8004034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80031ec:	2201      	movs	r2, #1
 80031ee:	2110      	movs	r1, #16
 80031f0:	4820      	ldr	r0, [pc, #128]	@ (8003274 <MX_GPIO_Init+0x108>)
 80031f2:	f000 ff1f 	bl	8004034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2180      	movs	r1, #128	@ 0x80
 80031fa:	481e      	ldr	r0, [pc, #120]	@ (8003274 <MX_GPIO_Init+0x108>)
 80031fc:	f000 ff1a 	bl	8004034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003200:	2201      	movs	r2, #1
 8003202:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003206:	481c      	ldr	r0, [pc, #112]	@ (8003278 <MX_GPIO_Init+0x10c>)
 8003208:	f000 ff14 	bl	8004034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800320c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003212:	2301      	movs	r3, #1
 8003214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321a:	2302      	movs	r3, #2
 800321c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800321e:	f107 0310 	add.w	r3, r7, #16
 8003222:	4619      	mov	r1, r3
 8003224:	4812      	ldr	r0, [pc, #72]	@ (8003270 <MX_GPIO_Init+0x104>)
 8003226:	f000 fd81 	bl	8003d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 800322a:	2390      	movs	r3, #144	@ 0x90
 800322c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800322e:	2301      	movs	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003236:	2302      	movs	r3, #2
 8003238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323a:	f107 0310 	add.w	r3, r7, #16
 800323e:	4619      	mov	r1, r3
 8003240:	480c      	ldr	r0, [pc, #48]	@ (8003274 <MX_GPIO_Init+0x108>)
 8003242:	f000 fd73 	bl	8003d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800324a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800324c:	2301      	movs	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003254:	2302      	movs	r3, #2
 8003256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003258:	f107 0310 	add.w	r3, r7, #16
 800325c:	4619      	mov	r1, r3
 800325e:	4806      	ldr	r0, [pc, #24]	@ (8003278 <MX_GPIO_Init+0x10c>)
 8003260:	f000 fd64 	bl	8003d2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003264:	bf00      	nop
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	40011000 	.word	0x40011000
 8003274:	40010800 	.word	0x40010800
 8003278:	40010c00 	.word	0x40010c00

0800327c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	e009      	b.n	80032a2 <_write+0x26>
		ITM_SendChar(*ptr++);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	60ba      	str	r2, [r7, #8]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fdbe 	bl	8001e18 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3301      	adds	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	dbf1      	blt.n	800328e <_write+0x12>
	}
	return len;
 80032aa:	687b      	ldr	r3, [r7, #4]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032b8:	b672      	cpsid	i
}
 80032ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80032bc:	bf00      	nop
 80032be:	e7fd      	b.n	80032bc <Error_Handler+0x8>

080032c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032c6:	4b15      	ldr	r3, [pc, #84]	@ (800331c <HAL_MspInit+0x5c>)
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	4a14      	ldr	r2, [pc, #80]	@ (800331c <HAL_MspInit+0x5c>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6193      	str	r3, [r2, #24]
 80032d2:	4b12      	ldr	r3, [pc, #72]	@ (800331c <HAL_MspInit+0x5c>)
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <HAL_MspInit+0x5c>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	4a0e      	ldr	r2, [pc, #56]	@ (800331c <HAL_MspInit+0x5c>)
 80032e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e8:	61d3      	str	r3, [r2, #28]
 80032ea:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <HAL_MspInit+0x5c>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003320 <HAL_MspInit+0x60>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	4a04      	ldr	r2, [pc, #16]	@ (8003320 <HAL_MspInit+0x60>)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	40021000 	.word	0x40021000
 8003320:	40010000 	.word	0x40010000

08003324 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 0310 	add.w	r3, r7, #16
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a15      	ldr	r2, [pc, #84]	@ (8003394 <HAL_I2C_MspInit+0x70>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d123      	bne.n	800338c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003344:	4b14      	ldr	r3, [pc, #80]	@ (8003398 <HAL_I2C_MspInit+0x74>)
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	4a13      	ldr	r2, [pc, #76]	@ (8003398 <HAL_I2C_MspInit+0x74>)
 800334a:	f043 0308 	orr.w	r3, r3, #8
 800334e:	6193      	str	r3, [r2, #24]
 8003350:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <HAL_I2C_MspInit+0x74>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800335c:	23c0      	movs	r3, #192	@ 0xc0
 800335e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003360:	2312      	movs	r3, #18
 8003362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003364:	2303      	movs	r3, #3
 8003366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003368:	f107 0310 	add.w	r3, r7, #16
 800336c:	4619      	mov	r1, r3
 800336e:	480b      	ldr	r0, [pc, #44]	@ (800339c <HAL_I2C_MspInit+0x78>)
 8003370:	f000 fcdc 	bl	8003d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003374:	4b08      	ldr	r3, [pc, #32]	@ (8003398 <HAL_I2C_MspInit+0x74>)
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	4a07      	ldr	r2, [pc, #28]	@ (8003398 <HAL_I2C_MspInit+0x74>)
 800337a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800337e:	61d3      	str	r3, [r2, #28]
 8003380:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <HAL_I2C_MspInit+0x74>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800338c:	bf00      	nop
 800338e:	3720      	adds	r7, #32
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40005400 	.word	0x40005400
 8003398:	40021000 	.word	0x40021000
 800339c:	40010c00 	.word	0x40010c00

080033a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 0310 	add.w	r3, r7, #16
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1c      	ldr	r2, [pc, #112]	@ (800342c <HAL_SPI_MspInit+0x8c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d131      	bne.n	8003424 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003430 <HAL_SPI_MspInit+0x90>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003430 <HAL_SPI_MspInit+0x90>)
 80033c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ca:	61d3      	str	r3, [r2, #28]
 80033cc:	4b18      	ldr	r3, [pc, #96]	@ (8003430 <HAL_SPI_MspInit+0x90>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d8:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <HAL_SPI_MspInit+0x90>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	4a14      	ldr	r2, [pc, #80]	@ (8003430 <HAL_SPI_MspInit+0x90>)
 80033de:	f043 0308 	orr.w	r3, r3, #8
 80033e2:	6193      	str	r3, [r2, #24]
 80033e4:	4b12      	ldr	r3, [pc, #72]	@ (8003430 <HAL_SPI_MspInit+0x90>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80033f0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80033f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033fa:	2303      	movs	r3, #3
 80033fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fe:	f107 0310 	add.w	r3, r7, #16
 8003402:	4619      	mov	r1, r3
 8003404:	480b      	ldr	r0, [pc, #44]	@ (8003434 <HAL_SPI_MspInit+0x94>)
 8003406:	f000 fc91 	bl	8003d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800340a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800340e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003418:	f107 0310 	add.w	r3, r7, #16
 800341c:	4619      	mov	r1, r3
 800341e:	4805      	ldr	r0, [pc, #20]	@ (8003434 <HAL_SPI_MspInit+0x94>)
 8003420:	f000 fc84 	bl	8003d2c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003424:	bf00      	nop
 8003426:	3720      	adds	r7, #32
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40003800 	.word	0x40003800
 8003430:	40021000 	.word	0x40021000
 8003434:	40010c00 	.word	0x40010c00

08003438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a09      	ldr	r2, [pc, #36]	@ (800346c <HAL_TIM_Base_MspInit+0x34>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d10b      	bne.n	8003462 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800344a:	4b09      	ldr	r3, [pc, #36]	@ (8003470 <HAL_TIM_Base_MspInit+0x38>)
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	4a08      	ldr	r2, [pc, #32]	@ (8003470 <HAL_TIM_Base_MspInit+0x38>)
 8003450:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003454:	6193      	str	r3, [r2, #24]
 8003456:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <HAL_TIM_Base_MspInit+0x38>)
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40021000 	.word	0x40021000

08003474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 0310 	add.w	r3, r7, #16
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a10      	ldr	r2, [pc, #64]	@ (80034d0 <HAL_TIM_MspPostInit+0x5c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d118      	bne.n	80034c6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003494:	4b0f      	ldr	r3, [pc, #60]	@ (80034d4 <HAL_TIM_MspPostInit+0x60>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	4a0e      	ldr	r2, [pc, #56]	@ (80034d4 <HAL_TIM_MspPostInit+0x60>)
 800349a:	f043 0304 	orr.w	r3, r3, #4
 800349e:	6193      	str	r3, [r2, #24]
 80034a0:	4b0c      	ldr	r3, [pc, #48]	@ (80034d4 <HAL_TIM_MspPostInit+0x60>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b6:	2302      	movs	r3, #2
 80034b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ba:	f107 0310 	add.w	r3, r7, #16
 80034be:	4619      	mov	r1, r3
 80034c0:	4805      	ldr	r0, [pc, #20]	@ (80034d8 <HAL_TIM_MspPostInit+0x64>)
 80034c2:	f000 fc33 	bl	8003d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80034c6:	bf00      	nop
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40010800 	.word	0x40010800

080034dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08c      	sub	sp, #48	@ 0x30
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	f107 0320 	add.w	r3, r7, #32
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003664 <HAL_UART_MspInit+0x188>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d13a      	bne.n	8003572 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	4a59      	ldr	r2, [pc, #356]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 8003502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003506:	6193      	str	r3, [r2, #24]
 8003508:	4b57      	ldr	r3, [pc, #348]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003514:	4b54      	ldr	r3, [pc, #336]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	4a53      	ldr	r2, [pc, #332]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 800351a:	f043 0304 	orr.w	r3, r3, #4
 800351e:	6193      	str	r3, [r2, #24]
 8003520:	4b51      	ldr	r3, [pc, #324]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800352c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003536:	2303      	movs	r3, #3
 8003538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353a:	f107 0320 	add.w	r3, r7, #32
 800353e:	4619      	mov	r1, r3
 8003540:	484a      	ldr	r0, [pc, #296]	@ (800366c <HAL_UART_MspInit+0x190>)
 8003542:	f000 fbf3 	bl	8003d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800354a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800354c:	2300      	movs	r3, #0
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	2300      	movs	r3, #0
 8003552:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003554:	f107 0320 	add.w	r3, r7, #32
 8003558:	4619      	mov	r1, r3
 800355a:	4844      	ldr	r0, [pc, #272]	@ (800366c <HAL_UART_MspInit+0x190>)
 800355c:	f000 fbe6 	bl	8003d2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003560:	2200      	movs	r2, #0
 8003562:	2101      	movs	r1, #1
 8003564:	2025      	movs	r0, #37	@ 0x25
 8003566:	f000 faf8 	bl	8003b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800356a:	2025      	movs	r0, #37	@ 0x25
 800356c:	f000 fb11 	bl	8003b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003570:	e074      	b.n	800365c <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a3e      	ldr	r2, [pc, #248]	@ (8003670 <HAL_UART_MspInit+0x194>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d138      	bne.n	80035ee <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 800357c:	4b3a      	ldr	r3, [pc, #232]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4a39      	ldr	r2, [pc, #228]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 8003582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003586:	61d3      	str	r3, [r2, #28]
 8003588:	4b37      	ldr	r3, [pc, #220]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003594:	4b34      	ldr	r3, [pc, #208]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	4a33      	ldr	r2, [pc, #204]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 800359a:	f043 0304 	orr.w	r3, r3, #4
 800359e:	6193      	str	r3, [r2, #24]
 80035a0:	4b31      	ldr	r3, [pc, #196]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035ac:	2304      	movs	r3, #4
 80035ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b0:	2302      	movs	r3, #2
 80035b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035b4:	2303      	movs	r3, #3
 80035b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b8:	f107 0320 	add.w	r3, r7, #32
 80035bc:	4619      	mov	r1, r3
 80035be:	482b      	ldr	r0, [pc, #172]	@ (800366c <HAL_UART_MspInit+0x190>)
 80035c0:	f000 fbb4 	bl	8003d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035c4:	2308      	movs	r3, #8
 80035c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035c8:	2300      	movs	r3, #0
 80035ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d0:	f107 0320 	add.w	r3, r7, #32
 80035d4:	4619      	mov	r1, r3
 80035d6:	4825      	ldr	r0, [pc, #148]	@ (800366c <HAL_UART_MspInit+0x190>)
 80035d8:	f000 fba8 	bl	8003d2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80035dc:	2200      	movs	r2, #0
 80035de:	2101      	movs	r1, #1
 80035e0:	2026      	movs	r0, #38	@ 0x26
 80035e2:	f000 faba 	bl	8003b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035e6:	2026      	movs	r0, #38	@ 0x26
 80035e8:	f000 fad3 	bl	8003b92 <HAL_NVIC_EnableIRQ>
}
 80035ec:	e036      	b.n	800365c <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a20      	ldr	r2, [pc, #128]	@ (8003674 <HAL_UART_MspInit+0x198>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d131      	bne.n	800365c <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 80035fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003602:	61d3      	str	r3, [r2, #28]
 8003604:	4b18      	ldr	r3, [pc, #96]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003610:	4b15      	ldr	r3, [pc, #84]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	4a14      	ldr	r2, [pc, #80]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 8003616:	f043 0308 	orr.w	r3, r3, #8
 800361a:	6193      	str	r3, [r2, #24]
 800361c:	4b12      	ldr	r3, [pc, #72]	@ (8003668 <HAL_UART_MspInit+0x18c>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800362c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362e:	2302      	movs	r3, #2
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003632:	2303      	movs	r3, #3
 8003634:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003636:	f107 0320 	add.w	r3, r7, #32
 800363a:	4619      	mov	r1, r3
 800363c:	480e      	ldr	r0, [pc, #56]	@ (8003678 <HAL_UART_MspInit+0x19c>)
 800363e:	f000 fb75 	bl	8003d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003642:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003648:	2300      	movs	r3, #0
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003650:	f107 0320 	add.w	r3, r7, #32
 8003654:	4619      	mov	r1, r3
 8003656:	4808      	ldr	r0, [pc, #32]	@ (8003678 <HAL_UART_MspInit+0x19c>)
 8003658:	f000 fb68 	bl	8003d2c <HAL_GPIO_Init>
}
 800365c:	bf00      	nop
 800365e:	3730      	adds	r7, #48	@ 0x30
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40013800 	.word	0x40013800
 8003668:	40021000 	.word	0x40021000
 800366c:	40010800 	.word	0x40010800
 8003670:	40004400 	.word	0x40004400
 8003674:	40004800 	.word	0x40004800
 8003678:	40010c00 	.word	0x40010c00

0800367c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003680:	bf00      	nop
 8003682:	e7fd      	b.n	8003680 <NMI_Handler+0x4>

08003684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <HardFault_Handler+0x4>

0800368c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <MemManage_Handler+0x4>

08003694 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003698:	bf00      	nop
 800369a:	e7fd      	b.n	8003698 <BusFault_Handler+0x4>

0800369c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <UsageFault_Handler+0x4>

080036a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036cc:	f000 f92e 	bl	800392c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036d8:	4802      	ldr	r0, [pc, #8]	@ (80036e4 <USART1_IRQHandler+0x10>)
 80036da:	f003 fdc3 	bl	8007264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	2000030c 	.word	0x2000030c

080036e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036ec:	4802      	ldr	r0, [pc, #8]	@ (80036f8 <USART2_IRQHandler+0x10>)
 80036ee:	f003 fdb9 	bl	8007264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000354 	.word	0x20000354

080036fc <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
	return 1;
 8003700:	2301      	movs	r3, #1
}
 8003702:	4618      	mov	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <_kill>:

int _kill(int pid, int sig) {
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8003714:	f005 fc36 	bl	8008f84 <__errno>
 8003718:	4603      	mov	r3, r0
 800371a:	2216      	movs	r2, #22
 800371c:	601a      	str	r2, [r3, #0]
	return -1;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <_exit>:

void _exit(int status) {
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003732:	f04f 31ff 	mov.w	r1, #4294967295
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff ffe7 	bl	800370a <_kill>
	while (1) {
 800373c:	bf00      	nop
 800373e:	e7fd      	b.n	800373c <_exit+0x12>

08003740 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e00a      	b.n	8003768 <_read+0x28>
		*ptr++ = __io_getchar();
 8003752:	f3af 8000 	nop.w
 8003756:	4601      	mov	r1, r0
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	60ba      	str	r2, [r7, #8]
 800375e:	b2ca      	uxtb	r2, r1
 8003760:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	3301      	adds	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	429a      	cmp	r2, r3
 800376e:	dbf0      	blt.n	8003752 <_read+0x12>
	}

	return len;
 8003770:	687b      	ldr	r3, [r7, #4]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <_fstat>:

int _fstat(int file, struct stat *st) {
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037a0:	605a      	str	r2, [r3, #4]
	return 0;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <_isatty>:

int _isatty(int file) {
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80037b6:	2301      	movs	r3, #1
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80037c2:	b480      	push	{r7}
 80037c4:	b085      	sub	sp, #20
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
	...

080037dc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80037e4:	4a14      	ldr	r2, [pc, #80]	@ (8003838 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80037e6:	4b15      	ldr	r3, [pc, #84]	@ (800383c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80037f0:	4b13      	ldr	r3, [pc, #76]	@ (8003840 <_sbrk+0x64>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80037f8:	4b11      	ldr	r3, [pc, #68]	@ (8003840 <_sbrk+0x64>)
 80037fa:	4a12      	ldr	r2, [pc, #72]	@ (8003844 <_sbrk+0x68>)
 80037fc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80037fe:	4b10      	ldr	r3, [pc, #64]	@ (8003840 <_sbrk+0x64>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	429a      	cmp	r2, r3
 800380a:	d207      	bcs.n	800381c <_sbrk+0x40>
		errno = ENOMEM;
 800380c:	f005 fbba 	bl	8008f84 <__errno>
 8003810:	4603      	mov	r3, r0
 8003812:	220c      	movs	r2, #12
 8003814:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003816:	f04f 33ff 	mov.w	r3, #4294967295
 800381a:	e009      	b.n	8003830 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800381c:	4b08      	ldr	r3, [pc, #32]	@ (8003840 <_sbrk+0x64>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003822:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <_sbrk+0x64>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	4a05      	ldr	r2, [pc, #20]	@ (8003840 <_sbrk+0x64>)
 800382c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800382e:	68fb      	ldr	r3, [r7, #12]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20005000 	.word	0x20005000
 800383c:	00000400 	.word	0x00000400
 8003840:	200005a0 	.word	0x200005a0
 8003844:	200006f8 	.word	0x200006f8

08003848 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003854:	f7ff fff8 	bl	8003848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003858:	480b      	ldr	r0, [pc, #44]	@ (8003888 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800385a:	490c      	ldr	r1, [pc, #48]	@ (800388c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800385c:	4a0c      	ldr	r2, [pc, #48]	@ (8003890 <LoopFillZerobss+0x16>)
  movs r3, #0
 800385e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003860:	e002      	b.n	8003868 <LoopCopyDataInit>

08003862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003866:	3304      	adds	r3, #4

08003868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800386a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800386c:	d3f9      	bcc.n	8003862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800386e:	4a09      	ldr	r2, [pc, #36]	@ (8003894 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003870:	4c09      	ldr	r4, [pc, #36]	@ (8003898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003874:	e001      	b.n	800387a <LoopFillZerobss>

08003876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003878:	3204      	adds	r2, #4

0800387a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800387a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800387c:	d3fb      	bcc.n	8003876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800387e:	f005 fb87 	bl	8008f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003882:	f7ff f9bb 	bl	8002bfc <main>
  bx lr
 8003886:	4770      	bx	lr
  ldr r0, =_sdata
 8003888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800388c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003890:	0800e368 	.word	0x0800e368
  ldr r2, =_sbss
 8003894:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003898:	200006f4 	.word	0x200006f4

0800389c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800389c:	e7fe      	b.n	800389c <ADC1_2_IRQHandler>
	...

080038a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038a4:	4b08      	ldr	r3, [pc, #32]	@ (80038c8 <HAL_Init+0x28>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a07      	ldr	r2, [pc, #28]	@ (80038c8 <HAL_Init+0x28>)
 80038aa:	f043 0310 	orr.w	r3, r3, #16
 80038ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038b0:	2003      	movs	r0, #3
 80038b2:	f000 f947 	bl	8003b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038b6:	2000      	movs	r0, #0
 80038b8:	f000 f808 	bl	80038cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038bc:	f7ff fd00 	bl	80032c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40022000 	.word	0x40022000

080038cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038d4:	4b12      	ldr	r3, [pc, #72]	@ (8003920 <HAL_InitTick+0x54>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b12      	ldr	r3, [pc, #72]	@ (8003924 <HAL_InitTick+0x58>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	4619      	mov	r1, r3
 80038de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f95f 	bl	8003bae <HAL_SYSTICK_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e00e      	b.n	8003918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b0f      	cmp	r3, #15
 80038fe:	d80a      	bhi.n	8003916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003900:	2200      	movs	r2, #0
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	f04f 30ff 	mov.w	r0, #4294967295
 8003908:	f000 f927 	bl	8003b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800390c:	4a06      	ldr	r2, [pc, #24]	@ (8003928 <HAL_InitTick+0x5c>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e000      	b.n	8003918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000010 	.word	0x20000010
 8003924:	20000018 	.word	0x20000018
 8003928:	20000014 	.word	0x20000014

0800392c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003930:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <HAL_IncTick+0x1c>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	4b05      	ldr	r3, [pc, #20]	@ (800394c <HAL_IncTick+0x20>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4413      	add	r3, r2
 800393c:	4a03      	ldr	r2, [pc, #12]	@ (800394c <HAL_IncTick+0x20>)
 800393e:	6013      	str	r3, [r2, #0]
}
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	20000018 	.word	0x20000018
 800394c:	200005a4 	.word	0x200005a4

08003950 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return uwTick;
 8003954:	4b02      	ldr	r3, [pc, #8]	@ (8003960 <HAL_GetTick+0x10>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr
 8003960:	200005a4 	.word	0x200005a4

08003964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800396c:	f7ff fff0 	bl	8003950 <HAL_GetTick>
 8003970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d005      	beq.n	800398a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800397e:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <HAL_Delay+0x44>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800398a:	bf00      	nop
 800398c:	f7ff ffe0 	bl	8003950 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	429a      	cmp	r2, r3
 800399a:	d8f7      	bhi.n	800398c <HAL_Delay+0x28>
  {
  }
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000018 	.word	0x20000018

080039ac <__NVIC_SetPriorityGrouping>:
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039bc:	4b0c      	ldr	r3, [pc, #48]	@ (80039f0 <__NVIC_SetPriorityGrouping+0x44>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039c8:	4013      	ands	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039de:	4a04      	ldr	r2, [pc, #16]	@ (80039f0 <__NVIC_SetPriorityGrouping+0x44>)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	60d3      	str	r3, [r2, #12]
}
 80039e4:	bf00      	nop
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <__NVIC_GetPriorityGrouping>:
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f8:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <__NVIC_GetPriorityGrouping+0x18>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	f003 0307 	and.w	r3, r3, #7
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <__NVIC_EnableIRQ>:
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	db0b      	blt.n	8003a3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	f003 021f 	and.w	r2, r3, #31
 8003a28:	4906      	ldr	r1, [pc, #24]	@ (8003a44 <__NVIC_EnableIRQ+0x34>)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	2001      	movs	r0, #1
 8003a32:	fa00 f202 	lsl.w	r2, r0, r2
 8003a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	e000e100 	.word	0xe000e100

08003a48 <__NVIC_SetPriority>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	6039      	str	r1, [r7, #0]
 8003a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	db0a      	blt.n	8003a72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	490c      	ldr	r1, [pc, #48]	@ (8003a94 <__NVIC_SetPriority+0x4c>)
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a70:	e00a      	b.n	8003a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	4908      	ldr	r1, [pc, #32]	@ (8003a98 <__NVIC_SetPriority+0x50>)
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	3b04      	subs	r3, #4
 8003a80:	0112      	lsls	r2, r2, #4
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	440b      	add	r3, r1
 8003a86:	761a      	strb	r2, [r3, #24]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000e100 	.word	0xe000e100
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <NVIC_EncodePriority>:
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b089      	sub	sp, #36	@ 0x24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f1c3 0307 	rsb	r3, r3, #7
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	bf28      	it	cs
 8003aba:	2304      	movcs	r3, #4
 8003abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d902      	bls.n	8003acc <NVIC_EncodePriority+0x30>
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3b03      	subs	r3, #3
 8003aca:	e000      	b.n	8003ace <NVIC_EncodePriority+0x32>
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43da      	mvns	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	401a      	ands	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	43d9      	mvns	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	4313      	orrs	r3, r2
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3724      	adds	r7, #36	@ 0x24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <SysTick_Config>:
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b10:	d301      	bcc.n	8003b16 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003b12:	2301      	movs	r3, #1
 8003b14:	e00f      	b.n	8003b36 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b16:	4a0a      	ldr	r2, [pc, #40]	@ (8003b40 <SysTick_Config+0x40>)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b1e:	210f      	movs	r1, #15
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295
 8003b24:	f7ff ff90 	bl	8003a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <SysTick_Config+0x40>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b2e:	4b04      	ldr	r3, [pc, #16]	@ (8003b40 <SysTick_Config+0x40>)
 8003b30:	2207      	movs	r2, #7
 8003b32:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	e000e010 	.word	0xe000e010

08003b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff ff2d 	bl	80039ac <__NVIC_SetPriorityGrouping>
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b086      	sub	sp, #24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	4603      	mov	r3, r0
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b6c:	f7ff ff42 	bl	80039f4 <__NVIC_GetPriorityGrouping>
 8003b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	6978      	ldr	r0, [r7, #20]
 8003b78:	f7ff ff90 	bl	8003a9c <NVIC_EncodePriority>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff ff5f 	bl	8003a48 <__NVIC_SetPriority>
}
 8003b8a:	bf00      	nop
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	4603      	mov	r3, r0
 8003b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff ff35 	bl	8003a10 <__NVIC_EnableIRQ>
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff ffa2 	bl	8003b00 <SysTick_Config>
 8003bbc:	4603      	mov	r3, r0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b085      	sub	sp, #20
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d008      	beq.n	8003bf0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2204      	movs	r2, #4
 8003be2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e020      	b.n	8003c32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 020e 	bic.w	r2, r2, #14
 8003bfe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c18:	2101      	movs	r1, #1
 8003c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d005      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2204      	movs	r2, #4
 8003c58:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
 8003c5e:	e051      	b.n	8003d04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 020e 	bic.w	r2, r2, #14
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a22      	ldr	r2, [pc, #136]	@ (8003d10 <HAL_DMA_Abort_IT+0xd4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d029      	beq.n	8003cde <HAL_DMA_Abort_IT+0xa2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a21      	ldr	r2, [pc, #132]	@ (8003d14 <HAL_DMA_Abort_IT+0xd8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d022      	beq.n	8003cda <HAL_DMA_Abort_IT+0x9e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1f      	ldr	r2, [pc, #124]	@ (8003d18 <HAL_DMA_Abort_IT+0xdc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01a      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0x98>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d1c <HAL_DMA_Abort_IT+0xe0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d012      	beq.n	8003cce <HAL_DMA_Abort_IT+0x92>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1c      	ldr	r2, [pc, #112]	@ (8003d20 <HAL_DMA_Abort_IT+0xe4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_DMA_Abort_IT+0x8c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d24 <HAL_DMA_Abort_IT+0xe8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d102      	bne.n	8003cc2 <HAL_DMA_Abort_IT+0x86>
 8003cbc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003cc0:	e00e      	b.n	8003ce0 <HAL_DMA_Abort_IT+0xa4>
 8003cc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cc6:	e00b      	b.n	8003ce0 <HAL_DMA_Abort_IT+0xa4>
 8003cc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ccc:	e008      	b.n	8003ce0 <HAL_DMA_Abort_IT+0xa4>
 8003cce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cd2:	e005      	b.n	8003ce0 <HAL_DMA_Abort_IT+0xa4>
 8003cd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cd8:	e002      	b.n	8003ce0 <HAL_DMA_Abort_IT+0xa4>
 8003cda:	2310      	movs	r3, #16
 8003cdc:	e000      	b.n	8003ce0 <HAL_DMA_Abort_IT+0xa4>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	4a11      	ldr	r2, [pc, #68]	@ (8003d28 <HAL_DMA_Abort_IT+0xec>)
 8003ce2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
    } 
  }
  return status;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40020008 	.word	0x40020008
 8003d14:	4002001c 	.word	0x4002001c
 8003d18:	40020030 	.word	0x40020030
 8003d1c:	40020044 	.word	0x40020044
 8003d20:	40020058 	.word	0x40020058
 8003d24:	4002006c 	.word	0x4002006c
 8003d28:	40020000 	.word	0x40020000

08003d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b08b      	sub	sp, #44	@ 0x2c
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d36:	2300      	movs	r3, #0
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d3e:	e169      	b.n	8004014 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d40:	2201      	movs	r2, #1
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	f040 8158 	bne.w	800400e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4a9a      	ldr	r2, [pc, #616]	@ (8003fcc <HAL_GPIO_Init+0x2a0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d05e      	beq.n	8003e26 <HAL_GPIO_Init+0xfa>
 8003d68:	4a98      	ldr	r2, [pc, #608]	@ (8003fcc <HAL_GPIO_Init+0x2a0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d875      	bhi.n	8003e5a <HAL_GPIO_Init+0x12e>
 8003d6e:	4a98      	ldr	r2, [pc, #608]	@ (8003fd0 <HAL_GPIO_Init+0x2a4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d058      	beq.n	8003e26 <HAL_GPIO_Init+0xfa>
 8003d74:	4a96      	ldr	r2, [pc, #600]	@ (8003fd0 <HAL_GPIO_Init+0x2a4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d86f      	bhi.n	8003e5a <HAL_GPIO_Init+0x12e>
 8003d7a:	4a96      	ldr	r2, [pc, #600]	@ (8003fd4 <HAL_GPIO_Init+0x2a8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d052      	beq.n	8003e26 <HAL_GPIO_Init+0xfa>
 8003d80:	4a94      	ldr	r2, [pc, #592]	@ (8003fd4 <HAL_GPIO_Init+0x2a8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d869      	bhi.n	8003e5a <HAL_GPIO_Init+0x12e>
 8003d86:	4a94      	ldr	r2, [pc, #592]	@ (8003fd8 <HAL_GPIO_Init+0x2ac>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d04c      	beq.n	8003e26 <HAL_GPIO_Init+0xfa>
 8003d8c:	4a92      	ldr	r2, [pc, #584]	@ (8003fd8 <HAL_GPIO_Init+0x2ac>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d863      	bhi.n	8003e5a <HAL_GPIO_Init+0x12e>
 8003d92:	4a92      	ldr	r2, [pc, #584]	@ (8003fdc <HAL_GPIO_Init+0x2b0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d046      	beq.n	8003e26 <HAL_GPIO_Init+0xfa>
 8003d98:	4a90      	ldr	r2, [pc, #576]	@ (8003fdc <HAL_GPIO_Init+0x2b0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d85d      	bhi.n	8003e5a <HAL_GPIO_Init+0x12e>
 8003d9e:	2b12      	cmp	r3, #18
 8003da0:	d82a      	bhi.n	8003df8 <HAL_GPIO_Init+0xcc>
 8003da2:	2b12      	cmp	r3, #18
 8003da4:	d859      	bhi.n	8003e5a <HAL_GPIO_Init+0x12e>
 8003da6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dac <HAL_GPIO_Init+0x80>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003e27 	.word	0x08003e27
 8003db0:	08003e01 	.word	0x08003e01
 8003db4:	08003e13 	.word	0x08003e13
 8003db8:	08003e55 	.word	0x08003e55
 8003dbc:	08003e5b 	.word	0x08003e5b
 8003dc0:	08003e5b 	.word	0x08003e5b
 8003dc4:	08003e5b 	.word	0x08003e5b
 8003dc8:	08003e5b 	.word	0x08003e5b
 8003dcc:	08003e5b 	.word	0x08003e5b
 8003dd0:	08003e5b 	.word	0x08003e5b
 8003dd4:	08003e5b 	.word	0x08003e5b
 8003dd8:	08003e5b 	.word	0x08003e5b
 8003ddc:	08003e5b 	.word	0x08003e5b
 8003de0:	08003e5b 	.word	0x08003e5b
 8003de4:	08003e5b 	.word	0x08003e5b
 8003de8:	08003e5b 	.word	0x08003e5b
 8003dec:	08003e5b 	.word	0x08003e5b
 8003df0:	08003e09 	.word	0x08003e09
 8003df4:	08003e1d 	.word	0x08003e1d
 8003df8:	4a79      	ldr	r2, [pc, #484]	@ (8003fe0 <HAL_GPIO_Init+0x2b4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003dfe:	e02c      	b.n	8003e5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	623b      	str	r3, [r7, #32]
          break;
 8003e06:	e029      	b.n	8003e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	623b      	str	r3, [r7, #32]
          break;
 8003e10:	e024      	b.n	8003e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	3308      	adds	r3, #8
 8003e18:	623b      	str	r3, [r7, #32]
          break;
 8003e1a:	e01f      	b.n	8003e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	330c      	adds	r3, #12
 8003e22:	623b      	str	r3, [r7, #32]
          break;
 8003e24:	e01a      	b.n	8003e5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e2e:	2304      	movs	r3, #4
 8003e30:	623b      	str	r3, [r7, #32]
          break;
 8003e32:	e013      	b.n	8003e5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d105      	bne.n	8003e48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e3c:	2308      	movs	r3, #8
 8003e3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	611a      	str	r2, [r3, #16]
          break;
 8003e46:	e009      	b.n	8003e5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e48:	2308      	movs	r3, #8
 8003e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	615a      	str	r2, [r3, #20]
          break;
 8003e52:	e003      	b.n	8003e5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e54:	2300      	movs	r3, #0
 8003e56:	623b      	str	r3, [r7, #32]
          break;
 8003e58:	e000      	b.n	8003e5c <HAL_GPIO_Init+0x130>
          break;
 8003e5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2bff      	cmp	r3, #255	@ 0xff
 8003e60:	d801      	bhi.n	8003e66 <HAL_GPIO_Init+0x13a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	e001      	b.n	8003e6a <HAL_GPIO_Init+0x13e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2bff      	cmp	r3, #255	@ 0xff
 8003e70:	d802      	bhi.n	8003e78 <HAL_GPIO_Init+0x14c>
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	e002      	b.n	8003e7e <HAL_GPIO_Init+0x152>
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	3b08      	subs	r3, #8
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	210f      	movs	r1, #15
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	401a      	ands	r2, r3
 8003e90:	6a39      	ldr	r1, [r7, #32]
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80b1 	beq.w	800400e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003eac:	4b4d      	ldr	r3, [pc, #308]	@ (8003fe4 <HAL_GPIO_Init+0x2b8>)
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe4 <HAL_GPIO_Init+0x2b8>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6193      	str	r3, [r2, #24]
 8003eb8:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe4 <HAL_GPIO_Init+0x2b8>)
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ec4:	4a48      	ldr	r2, [pc, #288]	@ (8003fe8 <HAL_GPIO_Init+0x2bc>)
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	089b      	lsrs	r3, r3, #2
 8003eca:	3302      	adds	r3, #2
 8003ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	220f      	movs	r2, #15
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a40      	ldr	r2, [pc, #256]	@ (8003fec <HAL_GPIO_Init+0x2c0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <HAL_GPIO_Init+0x1ec>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ff0 <HAL_GPIO_Init+0x2c4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00d      	beq.n	8003f14 <HAL_GPIO_Init+0x1e8>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a3e      	ldr	r2, [pc, #248]	@ (8003ff4 <HAL_GPIO_Init+0x2c8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <HAL_GPIO_Init+0x1e4>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff8 <HAL_GPIO_Init+0x2cc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d101      	bne.n	8003f0c <HAL_GPIO_Init+0x1e0>
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e006      	b.n	8003f1a <HAL_GPIO_Init+0x1ee>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	e004      	b.n	8003f1a <HAL_GPIO_Init+0x1ee>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e002      	b.n	8003f1a <HAL_GPIO_Init+0x1ee>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <HAL_GPIO_Init+0x1ee>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f1c:	f002 0203 	and.w	r2, r2, #3
 8003f20:	0092      	lsls	r2, r2, #2
 8003f22:	4093      	lsls	r3, r2
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f2a:	492f      	ldr	r1, [pc, #188]	@ (8003fe8 <HAL_GPIO_Init+0x2bc>)
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	089b      	lsrs	r3, r3, #2
 8003f30:	3302      	adds	r3, #2
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d006      	beq.n	8003f52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f44:	4b2d      	ldr	r3, [pc, #180]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	492c      	ldr	r1, [pc, #176]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	608b      	str	r3, [r1, #8]
 8003f50:	e006      	b.n	8003f60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f52:	4b2a      	ldr	r3, [pc, #168]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	4928      	ldr	r1, [pc, #160]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d006      	beq.n	8003f7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f6c:	4b23      	ldr	r3, [pc, #140]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	4922      	ldr	r1, [pc, #136]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60cb      	str	r3, [r1, #12]
 8003f78:	e006      	b.n	8003f88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f7a:	4b20      	ldr	r3, [pc, #128]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	43db      	mvns	r3, r3
 8003f82:	491e      	ldr	r1, [pc, #120]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d006      	beq.n	8003fa2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f94:	4b19      	ldr	r3, [pc, #100]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	4918      	ldr	r1, [pc, #96]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
 8003fa0:	e006      	b.n	8003fb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003fa2:	4b16      	ldr	r3, [pc, #88]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	4914      	ldr	r1, [pc, #80]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d021      	beq.n	8004000 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	490e      	ldr	r1, [pc, #56]	@ (8003ffc <HAL_GPIO_Init+0x2d0>)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
 8003fc8:	e021      	b.n	800400e <HAL_GPIO_Init+0x2e2>
 8003fca:	bf00      	nop
 8003fcc:	10320000 	.word	0x10320000
 8003fd0:	10310000 	.word	0x10310000
 8003fd4:	10220000 	.word	0x10220000
 8003fd8:	10210000 	.word	0x10210000
 8003fdc:	10120000 	.word	0x10120000
 8003fe0:	10110000 	.word	0x10110000
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40010800 	.word	0x40010800
 8003ff0:	40010c00 	.word	0x40010c00
 8003ff4:	40011000 	.word	0x40011000
 8003ff8:	40011400 	.word	0x40011400
 8003ffc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004000:	4b0b      	ldr	r3, [pc, #44]	@ (8004030 <HAL_GPIO_Init+0x304>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	43db      	mvns	r3, r3
 8004008:	4909      	ldr	r1, [pc, #36]	@ (8004030 <HAL_GPIO_Init+0x304>)
 800400a:	4013      	ands	r3, r2
 800400c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	3301      	adds	r3, #1
 8004012:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	fa22 f303 	lsr.w	r3, r2, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	f47f ae8e 	bne.w	8003d40 <HAL_GPIO_Init+0x14>
  }
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop
 8004028:	372c      	adds	r7, #44	@ 0x2c
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	40010400 	.word	0x40010400

08004034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	807b      	strh	r3, [r7, #2]
 8004040:	4613      	mov	r3, r2
 8004042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004044:	787b      	ldrb	r3, [r7, #1]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800404a:	887a      	ldrh	r2, [r7, #2]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004050:	e003      	b.n	800405a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004052:	887b      	ldrh	r3, [r7, #2]
 8004054:	041a      	lsls	r2, r3, #16
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	611a      	str	r2, [r3, #16]
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e12b      	b.n	80042ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff f94a 	bl	8003324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	@ 0x24
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040c8:	f002 f8ce 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 80040cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4a81      	ldr	r2, [pc, #516]	@ (80042d8 <HAL_I2C_Init+0x274>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d807      	bhi.n	80040e8 <HAL_I2C_Init+0x84>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a80      	ldr	r2, [pc, #512]	@ (80042dc <HAL_I2C_Init+0x278>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	bf94      	ite	ls
 80040e0:	2301      	movls	r3, #1
 80040e2:	2300      	movhi	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	e006      	b.n	80040f6 <HAL_I2C_Init+0x92>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a7d      	ldr	r2, [pc, #500]	@ (80042e0 <HAL_I2C_Init+0x27c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	bf94      	ite	ls
 80040f0:	2301      	movls	r3, #1
 80040f2:	2300      	movhi	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e0e7      	b.n	80042ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4a78      	ldr	r2, [pc, #480]	@ (80042e4 <HAL_I2C_Init+0x280>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	0c9b      	lsrs	r3, r3, #18
 8004108:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4a6a      	ldr	r2, [pc, #424]	@ (80042d8 <HAL_I2C_Init+0x274>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d802      	bhi.n	8004138 <HAL_I2C_Init+0xd4>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	3301      	adds	r3, #1
 8004136:	e009      	b.n	800414c <HAL_I2C_Init+0xe8>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	4a69      	ldr	r2, [pc, #420]	@ (80042e8 <HAL_I2C_Init+0x284>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	099b      	lsrs	r3, r3, #6
 800414a:	3301      	adds	r3, #1
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	430b      	orrs	r3, r1
 8004152:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800415e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	495c      	ldr	r1, [pc, #368]	@ (80042d8 <HAL_I2C_Init+0x274>)
 8004168:	428b      	cmp	r3, r1
 800416a:	d819      	bhi.n	80041a0 <HAL_I2C_Init+0x13c>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	1e59      	subs	r1, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	fbb1 f3f3 	udiv	r3, r1, r3
 800417a:	1c59      	adds	r1, r3, #1
 800417c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004180:	400b      	ands	r3, r1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_I2C_Init+0x138>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1e59      	subs	r1, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	fbb1 f3f3 	udiv	r3, r1, r3
 8004194:	3301      	adds	r3, #1
 8004196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419a:	e051      	b.n	8004240 <HAL_I2C_Init+0x1dc>
 800419c:	2304      	movs	r3, #4
 800419e:	e04f      	b.n	8004240 <HAL_I2C_Init+0x1dc>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d111      	bne.n	80041cc <HAL_I2C_Init+0x168>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	1e58      	subs	r0, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6859      	ldr	r1, [r3, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	440b      	add	r3, r1
 80041b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ba:	3301      	adds	r3, #1
 80041bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e012      	b.n	80041f2 <HAL_I2C_Init+0x18e>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	1e58      	subs	r0, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	0099      	lsls	r1, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e2:	3301      	adds	r3, #1
 80041e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_I2C_Init+0x196>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e022      	b.n	8004240 <HAL_I2C_Init+0x1dc>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10e      	bne.n	8004220 <HAL_I2C_Init+0x1bc>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1e58      	subs	r0, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	460b      	mov	r3, r1
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	440b      	add	r3, r1
 8004210:	fbb0 f3f3 	udiv	r3, r0, r3
 8004214:	3301      	adds	r3, #1
 8004216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800421e:	e00f      	b.n	8004240 <HAL_I2C_Init+0x1dc>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1e58      	subs	r0, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6859      	ldr	r1, [r3, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	0099      	lsls	r1, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	fbb0 f3f3 	udiv	r3, r0, r3
 8004236:	3301      	adds	r3, #1
 8004238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	6809      	ldr	r1, [r1, #0]
 8004244:	4313      	orrs	r3, r2
 8004246:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800426e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6911      	ldr	r1, [r2, #16]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68d2      	ldr	r2, [r2, #12]
 800427a:	4311      	orrs	r1, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	430b      	orrs	r3, r1
 8004282:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	000186a0 	.word	0x000186a0
 80042dc:	001e847f 	.word	0x001e847f
 80042e0:	003d08ff 	.word	0x003d08ff
 80042e4:	431bde83 	.word	0x431bde83
 80042e8:	10624dd3 	.word	0x10624dd3

080042ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	461a      	mov	r2, r3
 80042f8:	460b      	mov	r3, r1
 80042fa:	817b      	strh	r3, [r7, #10]
 80042fc:	4613      	mov	r3, r2
 80042fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004300:	f7ff fb26 	bl	8003950 <HAL_GetTick>
 8004304:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b20      	cmp	r3, #32
 8004310:	f040 80e0 	bne.w	80044d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	2319      	movs	r3, #25
 800431a:	2201      	movs	r2, #1
 800431c:	4970      	ldr	r1, [pc, #448]	@ (80044e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f001 f9a2 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800432a:	2302      	movs	r3, #2
 800432c:	e0d3      	b.n	80044d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_I2C_Master_Transmit+0x50>
 8004338:	2302      	movs	r3, #2
 800433a:	e0cc      	b.n	80044d6 <HAL_I2C_Master_Transmit+0x1ea>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b01      	cmp	r3, #1
 8004350:	d007      	beq.n	8004362 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004370:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2221      	movs	r2, #33	@ 0x21
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2210      	movs	r2, #16
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	893a      	ldrh	r2, [r7, #8]
 8004392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a50      	ldr	r2, [pc, #320]	@ (80044e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80043a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043a4:	8979      	ldrh	r1, [r7, #10]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fe8e 	bl	80050cc <I2C_MasterRequestWrite>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e08d      	b.n	80044d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80043d0:	e066      	b.n	80044a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	6a39      	ldr	r1, [r7, #32]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f001 fa60 	bl	800589c <I2C_WaitOnTXEFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00d      	beq.n	80043fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d107      	bne.n	80043fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e06b      	b.n	80044d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004402:	781a      	ldrb	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b04      	cmp	r3, #4
 800443a:	d11b      	bne.n	8004474 <HAL_I2C_Master_Transmit+0x188>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004440:	2b00      	cmp	r3, #0
 8004442:	d017      	beq.n	8004474 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	781a      	ldrb	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	6a39      	ldr	r1, [r7, #32]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f001 fa57 	bl	800592c <I2C_WaitOnBTFFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00d      	beq.n	80044a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004488:	2b04      	cmp	r3, #4
 800448a:	d107      	bne.n	800449c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800449a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e01a      	b.n	80044d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d194      	bne.n	80043d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e000      	b.n	80044d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	00100002 	.word	0x00100002
 80044e4:	ffff0000 	.word	0xffff0000

080044e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08c      	sub	sp, #48	@ 0x30
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	461a      	mov	r2, r3
 80044f4:	460b      	mov	r3, r1
 80044f6:	817b      	strh	r3, [r7, #10]
 80044f8:	4613      	mov	r3, r2
 80044fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004500:	f7ff fa26 	bl	8003950 <HAL_GetTick>
 8004504:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b20      	cmp	r3, #32
 8004510:	f040 824b 	bne.w	80049aa <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	2319      	movs	r3, #25
 800451a:	2201      	movs	r2, #1
 800451c:	497f      	ldr	r1, [pc, #508]	@ (800471c <HAL_I2C_Master_Receive+0x234>)
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f001 f8a2 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800452a:	2302      	movs	r3, #2
 800452c:	e23e      	b.n	80049ac <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_I2C_Master_Receive+0x54>
 8004538:	2302      	movs	r3, #2
 800453a:	e237      	b.n	80049ac <HAL_I2C_Master_Receive+0x4c4>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b01      	cmp	r3, #1
 8004550:	d007      	beq.n	8004562 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0201 	orr.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004570:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2222      	movs	r2, #34	@ 0x22
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2210      	movs	r2, #16
 800457e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	893a      	ldrh	r2, [r7, #8]
 8004592:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a5f      	ldr	r2, [pc, #380]	@ (8004720 <HAL_I2C_Master_Receive+0x238>)
 80045a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045a4:	8979      	ldrh	r1, [r7, #10]
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fe10 	bl	80051d0 <I2C_MasterRequestRead>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e1f8      	b.n	80049ac <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d113      	bne.n	80045ea <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c2:	2300      	movs	r3, #0
 80045c4:	61fb      	str	r3, [r7, #28]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	e1cc      	b.n	8004984 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d11e      	bne.n	8004630 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004600:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004602:	b672      	cpsid	i
}
 8004604:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800462c:	b662      	cpsie	i
}
 800462e:	e035      	b.n	800469c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004634:	2b02      	cmp	r3, #2
 8004636:	d11e      	bne.n	8004676 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004646:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004648:	b672      	cpsid	i
}
 800464a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004670:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004672:	b662      	cpsie	i
}
 8004674:	e012      	b.n	800469c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004684:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800469c:	e172      	b.n	8004984 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	f200 811f 	bhi.w	80048e6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d123      	bne.n	80046f8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f001 f981 	bl	80059bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e173      	b.n	80049ac <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046f6:	e145      	b.n	8004984 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d152      	bne.n	80047a6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004706:	2200      	movs	r2, #0
 8004708:	4906      	ldr	r1, [pc, #24]	@ (8004724 <HAL_I2C_Master_Receive+0x23c>)
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 ffac 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e148      	b.n	80049ac <HAL_I2C_Master_Receive+0x4c4>
 800471a:	bf00      	nop
 800471c:	00100002 	.word	0x00100002
 8004720:	ffff0000 	.word	0xffff0000
 8004724:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004728:	b672      	cpsid	i
}
 800472a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800473a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800476e:	b662      	cpsie	i
}
 8004770:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047a4:	e0ee      	b.n	8004984 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ac:	2200      	movs	r2, #0
 80047ae:	4981      	ldr	r1, [pc, #516]	@ (80049b4 <HAL_I2C_Master_Receive+0x4cc>)
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 ff59 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0f5      	b.n	80049ac <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047d0:	b672      	cpsid	i
}
 80047d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004806:	4b6c      	ldr	r3, [pc, #432]	@ (80049b8 <HAL_I2C_Master_Receive+0x4d0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	08db      	lsrs	r3, r3, #3
 800480c:	4a6b      	ldr	r2, [pc, #428]	@ (80049bc <HAL_I2C_Master_Receive+0x4d4>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	0a1a      	lsrs	r2, r3, #8
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	00da      	lsls	r2, r3, #3
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	3b01      	subs	r3, #1
 8004824:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d118      	bne.n	800485e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004846:	f043 0220 	orr.w	r2, r3, #32
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800484e:	b662      	cpsie	i
}
 8004850:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e0a6      	b.n	80049ac <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b04      	cmp	r3, #4
 800486a:	d1d9      	bne.n	8004820 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800487a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80048ae:	b662      	cpsie	i
}
 80048b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048e4:	e04e      	b.n	8004984 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f001 f866 	bl	80059bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e058      	b.n	80049ac <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b04      	cmp	r3, #4
 8004938:	d124      	bne.n	8004984 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493e:	2b03      	cmp	r3, #3
 8004940:	d107      	bne.n	8004952 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004950:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	f47f ae88 	bne.w	800469e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	e000      	b.n	80049ac <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80049aa:	2302      	movs	r3, #2
  }
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3728      	adds	r7, #40	@ 0x28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	00010004 	.word	0x00010004
 80049b8:	20000010 	.word	0x20000010
 80049bc:	14f8b589 	.word	0x14f8b589

080049c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	4608      	mov	r0, r1
 80049ca:	4611      	mov	r1, r2
 80049cc:	461a      	mov	r2, r3
 80049ce:	4603      	mov	r3, r0
 80049d0:	817b      	strh	r3, [r7, #10]
 80049d2:	460b      	mov	r3, r1
 80049d4:	813b      	strh	r3, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049da:	f7fe ffb9 	bl	8003950 <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	f040 80d9 	bne.w	8004ba0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	2319      	movs	r3, #25
 80049f4:	2201      	movs	r2, #1
 80049f6:	496d      	ldr	r1, [pc, #436]	@ (8004bac <HAL_I2C_Mem_Write+0x1ec>)
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fe35 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a04:	2302      	movs	r3, #2
 8004a06:	e0cc      	b.n	8004ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_I2C_Mem_Write+0x56>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e0c5      	b.n	8004ba2 <HAL_I2C_Mem_Write+0x1e2>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d007      	beq.n	8004a3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2221      	movs	r2, #33	@ 0x21
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2240      	movs	r2, #64	@ 0x40
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a3a      	ldr	r2, [r7, #32]
 8004a66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a4d      	ldr	r2, [pc, #308]	@ (8004bb0 <HAL_I2C_Mem_Write+0x1f0>)
 8004a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a7e:	88f8      	ldrh	r0, [r7, #6]
 8004a80:	893a      	ldrh	r2, [r7, #8]
 8004a82:	8979      	ldrh	r1, [r7, #10]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 fc6c 	bl	800536c <I2C_RequestMemoryWrite>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d052      	beq.n	8004b40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e081      	b.n	8004ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fefa 	bl	800589c <I2C_WaitOnTXEFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00d      	beq.n	8004aca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d107      	bne.n	8004ac6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e06b      	b.n	8004ba2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	781a      	ldrb	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d11b      	bne.n	8004b40 <HAL_I2C_Mem_Write+0x180>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d017      	beq.n	8004b40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	781a      	ldrb	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1aa      	bne.n	8004a9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 feed 	bl	800592c <I2C_WaitOnBTFFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00d      	beq.n	8004b74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d107      	bne.n	8004b70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e016      	b.n	8004ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e000      	b.n	8004ba2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ba0:	2302      	movs	r3, #2
  }
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	00100002 	.word	0x00100002
 8004bb0:	ffff0000 	.word	0xffff0000

08004bb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08c      	sub	sp, #48	@ 0x30
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	817b      	strh	r3, [r7, #10]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	813b      	strh	r3, [r7, #8]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bd2:	f7fe febd 	bl	8003950 <HAL_GetTick>
 8004bd6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b20      	cmp	r3, #32
 8004be2:	f040 8250 	bne.w	8005086 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	2319      	movs	r3, #25
 8004bec:	2201      	movs	r2, #1
 8004bee:	4982      	ldr	r1, [pc, #520]	@ (8004df8 <HAL_I2C_Mem_Read+0x244>)
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 fd39 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e243      	b.n	8005088 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_I2C_Mem_Read+0x5a>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e23c      	b.n	8005088 <HAL_I2C_Mem_Read+0x4d4>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d007      	beq.n	8004c34 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2222      	movs	r2, #34	@ 0x22
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2240      	movs	r2, #64	@ 0x40
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4a62      	ldr	r2, [pc, #392]	@ (8004dfc <HAL_I2C_Mem_Read+0x248>)
 8004c74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c76:	88f8      	ldrh	r0, [r7, #6]
 8004c78:	893a      	ldrh	r2, [r7, #8]
 8004c7a:	8979      	ldrh	r1, [r7, #10]
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	9301      	str	r3, [sp, #4]
 8004c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	4603      	mov	r3, r0
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fc06 	bl	8005498 <I2C_RequestMemoryRead>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e1f8      	b.n	8005088 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d113      	bne.n	8004cc6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	61fb      	str	r3, [r7, #28]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	e1cc      	b.n	8005060 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d11e      	bne.n	8004d0c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cdc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cde:	b672      	cpsid	i
}
 8004ce0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d08:	b662      	cpsie	i
}
 8004d0a:	e035      	b.n	8004d78 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d11e      	bne.n	8004d52 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d24:	b672      	cpsid	i
}
 8004d26:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d4e:	b662      	cpsie	i
}
 8004d50:	e012      	b.n	8004d78 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d60:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d62:	2300      	movs	r3, #0
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004d78:	e172      	b.n	8005060 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	f200 811f 	bhi.w	8004fc2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d123      	bne.n	8004dd4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 fe13 	bl	80059bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e173      	b.n	8005088 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dd2:	e145      	b.n	8005060 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d152      	bne.n	8004e82 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de2:	2200      	movs	r2, #0
 8004de4:	4906      	ldr	r1, [pc, #24]	@ (8004e00 <HAL_I2C_Mem_Read+0x24c>)
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 fc3e 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d008      	beq.n	8004e04 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e148      	b.n	8005088 <HAL_I2C_Mem_Read+0x4d4>
 8004df6:	bf00      	nop
 8004df8:	00100002 	.word	0x00100002
 8004dfc:	ffff0000 	.word	0xffff0000
 8004e00:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e04:	b672      	cpsid	i
}
 8004e06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e4a:	b662      	cpsie	i
}
 8004e4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e80:	e0ee      	b.n	8005060 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	2200      	movs	r2, #0
 8004e8a:	4981      	ldr	r1, [pc, #516]	@ (8005090 <HAL_I2C_Mem_Read+0x4dc>)
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fbeb 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0f5      	b.n	8005088 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004eac:	b672      	cpsid	i
}
 8004eae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ee2:	4b6c      	ldr	r3, [pc, #432]	@ (8005094 <HAL_I2C_Mem_Read+0x4e0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	08db      	lsrs	r3, r3, #3
 8004ee8:	4a6b      	ldr	r2, [pc, #428]	@ (8005098 <HAL_I2C_Mem_Read+0x4e4>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	0a1a      	lsrs	r2, r3, #8
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	00da      	lsls	r2, r3, #3
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d118      	bne.n	8004f3a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	f043 0220 	orr.w	r2, r3, #32
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004f2a:	b662      	cpsie	i
}
 8004f2c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0a6      	b.n	8005088 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d1d9      	bne.n	8004efc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691a      	ldr	r2, [r3, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f8a:	b662      	cpsie	i
}
 8004f8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fc0:	e04e      	b.n	8005060 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fcf8 	bl	80059bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e058      	b.n	8005088 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b04      	cmp	r3, #4
 8005014:	d124      	bne.n	8005060 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800501a:	2b03      	cmp	r3, #3
 800501c:	d107      	bne.n	800502e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800502c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005064:	2b00      	cmp	r3, #0
 8005066:	f47f ae88 	bne.w	8004d7a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3728      	adds	r7, #40	@ 0x28
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	00010004 	.word	0x00010004
 8005094:	20000010 	.word	0x20000010
 8005098:	14f8b589 	.word	0x14f8b589

0800509c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050aa:	b2db      	uxtb	r3, r3
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr

080050cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	607a      	str	r2, [r7, #4]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	460b      	mov	r3, r1
 80050da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d006      	beq.n	80050f6 <I2C_MasterRequestWrite+0x2a>
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d003      	beq.n	80050f6 <I2C_MasterRequestWrite+0x2a>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050f4:	d108      	bne.n	8005108 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e00b      	b.n	8005120 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510c:	2b12      	cmp	r3, #18
 800510e:	d107      	bne.n	8005120 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800511e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fa9b 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00d      	beq.n	8005154 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005146:	d103      	bne.n	8005150 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800514e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e035      	b.n	80051c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800515c:	d108      	bne.n	8005170 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800515e:	897b      	ldrh	r3, [r7, #10]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	461a      	mov	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800516c:	611a      	str	r2, [r3, #16]
 800516e:	e01b      	b.n	80051a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005170:	897b      	ldrh	r3, [r7, #10]
 8005172:	11db      	asrs	r3, r3, #7
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f003 0306 	and.w	r3, r3, #6
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f063 030f 	orn	r3, r3, #15
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	490e      	ldr	r1, [pc, #56]	@ (80051c8 <I2C_MasterRequestWrite+0xfc>)
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fae4 	bl	800575c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e010      	b.n	80051c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800519e:	897b      	ldrh	r3, [r7, #10]
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4907      	ldr	r1, [pc, #28]	@ (80051cc <I2C_MasterRequestWrite+0x100>)
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 fad4 	bl	800575c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	00010008 	.word	0x00010008
 80051cc:	00010002 	.word	0x00010002

080051d0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	607a      	str	r2, [r7, #4]
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	460b      	mov	r3, r1
 80051de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051f4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d006      	beq.n	800520a <I2C_MasterRequestRead+0x3a>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d003      	beq.n	800520a <I2C_MasterRequestRead+0x3a>
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005208:	d108      	bne.n	800521c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e00b      	b.n	8005234 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005220:	2b11      	cmp	r3, #17
 8005222:	d107      	bne.n	8005234 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005232:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 fa11 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00d      	beq.n	8005268 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800525a:	d103      	bne.n	8005264 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005262:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e079      	b.n	800535c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005270:	d108      	bne.n	8005284 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005272:	897b      	ldrh	r3, [r7, #10]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	b2da      	uxtb	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	611a      	str	r2, [r3, #16]
 8005282:	e05f      	b.n	8005344 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005284:	897b      	ldrh	r3, [r7, #10]
 8005286:	11db      	asrs	r3, r3, #7
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f003 0306 	and.w	r3, r3, #6
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f063 030f 	orn	r3, r3, #15
 8005294:	b2da      	uxtb	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	4930      	ldr	r1, [pc, #192]	@ (8005364 <I2C_MasterRequestRead+0x194>)
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fa5a 	bl	800575c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e054      	b.n	800535c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052b2:	897b      	ldrh	r3, [r7, #10]
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4929      	ldr	r1, [pc, #164]	@ (8005368 <I2C_MasterRequestRead+0x198>)
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 fa4a 	bl	800575c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e044      	b.n	800535c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d2:	2300      	movs	r3, #0
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052f6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f9af 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00d      	beq.n	800532c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800531e:	d103      	bne.n	8005328 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005326:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e017      	b.n	800535c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800532c:	897b      	ldrh	r3, [r7, #10]
 800532e:	11db      	asrs	r3, r3, #7
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f003 0306 	and.w	r3, r3, #6
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f063 030e 	orn	r3, r3, #14
 800533c:	b2da      	uxtb	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	4907      	ldr	r1, [pc, #28]	@ (8005368 <I2C_MasterRequestRead+0x198>)
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 fa06 	bl	800575c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	00010008 	.word	0x00010008
 8005368:	00010002 	.word	0x00010002

0800536c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af02      	add	r7, sp, #8
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	4608      	mov	r0, r1
 8005376:	4611      	mov	r1, r2
 8005378:	461a      	mov	r2, r3
 800537a:	4603      	mov	r3, r0
 800537c:	817b      	strh	r3, [r7, #10]
 800537e:	460b      	mov	r3, r1
 8005380:	813b      	strh	r3, [r7, #8]
 8005382:	4613      	mov	r3, r2
 8005384:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005394:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	2200      	movs	r2, #0
 800539e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 f960 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00d      	beq.n	80053ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053bc:	d103      	bne.n	80053c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e05f      	b.n	800548a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ca:	897b      	ldrh	r3, [r7, #10]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	6a3a      	ldr	r2, [r7, #32]
 80053de:	492d      	ldr	r1, [pc, #180]	@ (8005494 <I2C_RequestMemoryWrite+0x128>)
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 f9bb 	bl	800575c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e04c      	b.n	800548a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005408:	6a39      	ldr	r1, [r7, #32]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 fa46 	bl	800589c <I2C_WaitOnTXEFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	2b04      	cmp	r3, #4
 800541c:	d107      	bne.n	800542e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800542c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e02b      	b.n	800548a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d105      	bne.n	8005444 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005438:	893b      	ldrh	r3, [r7, #8]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	611a      	str	r2, [r3, #16]
 8005442:	e021      	b.n	8005488 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005444:	893b      	ldrh	r3, [r7, #8]
 8005446:	0a1b      	lsrs	r3, r3, #8
 8005448:	b29b      	uxth	r3, r3
 800544a:	b2da      	uxtb	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005454:	6a39      	ldr	r1, [r7, #32]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 fa20 	bl	800589c <I2C_WaitOnTXEFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00d      	beq.n	800547e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	2b04      	cmp	r3, #4
 8005468:	d107      	bne.n	800547a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005478:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e005      	b.n	800548a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800547e:	893b      	ldrh	r3, [r7, #8]
 8005480:	b2da      	uxtb	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	00010002 	.word	0x00010002

08005498 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	4608      	mov	r0, r1
 80054a2:	4611      	mov	r1, r2
 80054a4:	461a      	mov	r2, r3
 80054a6:	4603      	mov	r3, r0
 80054a8:	817b      	strh	r3, [r7, #10]
 80054aa:	460b      	mov	r3, r1
 80054ac:	813b      	strh	r3, [r7, #8]
 80054ae:	4613      	mov	r3, r2
 80054b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	2200      	movs	r2, #0
 80054da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 f8c2 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00d      	beq.n	8005506 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054f8:	d103      	bne.n	8005502 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005500:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e0aa      	b.n	800565c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005506:	897b      	ldrh	r3, [r7, #10]
 8005508:	b2db      	uxtb	r3, r3
 800550a:	461a      	mov	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005514:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	6a3a      	ldr	r2, [r7, #32]
 800551a:	4952      	ldr	r1, [pc, #328]	@ (8005664 <I2C_RequestMemoryRead+0x1cc>)
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f91d 	bl	800575c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e097      	b.n	800565c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005544:	6a39      	ldr	r1, [r7, #32]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f9a8 	bl	800589c <I2C_WaitOnTXEFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00d      	beq.n	800556e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	2b04      	cmp	r3, #4
 8005558:	d107      	bne.n	800556a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005568:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e076      	b.n	800565c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800556e:	88fb      	ldrh	r3, [r7, #6]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d105      	bne.n	8005580 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005574:	893b      	ldrh	r3, [r7, #8]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	611a      	str	r2, [r3, #16]
 800557e:	e021      	b.n	80055c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005580:	893b      	ldrh	r3, [r7, #8]
 8005582:	0a1b      	lsrs	r3, r3, #8
 8005584:	b29b      	uxth	r3, r3
 8005586:	b2da      	uxtb	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800558e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005590:	6a39      	ldr	r1, [r7, #32]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f982 	bl	800589c <I2C_WaitOnTXEFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00d      	beq.n	80055ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d107      	bne.n	80055b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e050      	b.n	800565c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055ba:	893b      	ldrh	r3, [r7, #8]
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c6:	6a39      	ldr	r1, [r7, #32]
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f967 	bl	800589c <I2C_WaitOnTXEFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00d      	beq.n	80055f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d107      	bne.n	80055ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e035      	b.n	800565c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	2200      	movs	r2, #0
 8005608:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f82b 	bl	8005668 <I2C_WaitOnFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00d      	beq.n	8005634 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005626:	d103      	bne.n	8005630 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800562e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e013      	b.n	800565c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005634:	897b      	ldrh	r3, [r7, #10]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f043 0301 	orr.w	r3, r3, #1
 800563c:	b2da      	uxtb	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	6a3a      	ldr	r2, [r7, #32]
 8005648:	4906      	ldr	r1, [pc, #24]	@ (8005664 <I2C_RequestMemoryRead+0x1cc>)
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 f886 	bl	800575c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	00010002 	.word	0x00010002

08005668 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005678:	e048      	b.n	800570c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d044      	beq.n	800570c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005682:	f7fe f965 	bl	8003950 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d302      	bcc.n	8005698 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d139      	bne.n	800570c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	0c1b      	lsrs	r3, r3, #16
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d10d      	bne.n	80056be <I2C_WaitOnFlagUntilTimeout+0x56>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	43da      	mvns	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4013      	ands	r3, r2
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	e00c      	b.n	80056d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	43da      	mvns	r2, r3
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4013      	ands	r3, r2
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d116      	bne.n	800570c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	f043 0220 	orr.w	r2, r3, #32
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e023      	b.n	8005754 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	0c1b      	lsrs	r3, r3, #16
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b01      	cmp	r3, #1
 8005714:	d10d      	bne.n	8005732 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	43da      	mvns	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4013      	ands	r3, r2
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	bf0c      	ite	eq
 8005728:	2301      	moveq	r3, #1
 800572a:	2300      	movne	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	e00c      	b.n	800574c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	43da      	mvns	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4013      	ands	r3, r2
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	429a      	cmp	r2, r3
 8005750:	d093      	beq.n	800567a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800576a:	e071      	b.n	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577a:	d123      	bne.n	80057c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800578a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005794:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b0:	f043 0204 	orr.w	r2, r3, #4
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e067      	b.n	8005894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d041      	beq.n	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057cc:	f7fe f8c0 	bl	8003950 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d136      	bne.n	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	0c1b      	lsrs	r3, r3, #16
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d10c      	bne.n	8005806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	43da      	mvns	r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4013      	ands	r3, r2
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bf14      	ite	ne
 80057fe:	2301      	movne	r3, #1
 8005800:	2300      	moveq	r3, #0
 8005802:	b2db      	uxtb	r3, r3
 8005804:	e00b      	b.n	800581e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	43da      	mvns	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4013      	ands	r3, r2
 8005812:	b29b      	uxth	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	bf14      	ite	ne
 8005818:	2301      	movne	r3, #1
 800581a:	2300      	moveq	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d016      	beq.n	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583c:	f043 0220 	orr.w	r2, r3, #32
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e021      	b.n	8005894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	0c1b      	lsrs	r3, r3, #16
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b01      	cmp	r3, #1
 8005858:	d10c      	bne.n	8005874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	43da      	mvns	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	4013      	ands	r3, r2
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	bf14      	ite	ne
 800586c:	2301      	movne	r3, #1
 800586e:	2300      	moveq	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e00b      	b.n	800588c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	43da      	mvns	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4013      	ands	r3, r2
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	bf14      	ite	ne
 8005886:	2301      	movne	r3, #1
 8005888:	2300      	moveq	r3, #0
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	f47f af6d 	bne.w	800576c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058a8:	e034      	b.n	8005914 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f8e3 	bl	8005a76 <I2C_IsAcknowledgeFailed>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e034      	b.n	8005924 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d028      	beq.n	8005914 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c2:	f7fe f845 	bl	8003950 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d302      	bcc.n	80058d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d11d      	bne.n	8005914 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e2:	2b80      	cmp	r3, #128	@ 0x80
 80058e4:	d016      	beq.n	8005914 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005900:	f043 0220 	orr.w	r2, r3, #32
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e007      	b.n	8005924 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591e:	2b80      	cmp	r3, #128	@ 0x80
 8005920:	d1c3      	bne.n	80058aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005938:	e034      	b.n	80059a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f89b 	bl	8005a76 <I2C_IsAcknowledgeFailed>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e034      	b.n	80059b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d028      	beq.n	80059a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005952:	f7fd fffd 	bl	8003950 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	429a      	cmp	r2, r3
 8005960:	d302      	bcc.n	8005968 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d11d      	bne.n	80059a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b04      	cmp	r3, #4
 8005974:	d016      	beq.n	80059a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005990:	f043 0220 	orr.w	r2, r3, #32
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e007      	b.n	80059b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d1c3      	bne.n	800593a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059c8:	e049      	b.n	8005a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d119      	bne.n	8005a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0210 	mvn.w	r2, #16
 80059e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e030      	b.n	8005a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0c:	f7fd ffa0 	bl	8003950 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d302      	bcc.n	8005a22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d11d      	bne.n	8005a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2c:	2b40      	cmp	r3, #64	@ 0x40
 8005a2e:	d016      	beq.n	8005a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	f043 0220 	orr.w	r2, r3, #32
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e007      	b.n	8005a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a68:	2b40      	cmp	r3, #64	@ 0x40
 8005a6a:	d1ae      	bne.n	80059ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a8c:	d11b      	bne.n	8005ac6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a96:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	f043 0204 	orr.w	r2, r3, #4
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e000      	b.n	8005ac8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr
	...

08005ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e272      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 8087 	beq.w	8005c02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005af4:	4b92      	ldr	r3, [pc, #584]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f003 030c 	and.w	r3, r3, #12
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d00c      	beq.n	8005b1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b00:	4b8f      	ldr	r3, [pc, #572]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f003 030c 	and.w	r3, r3, #12
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d112      	bne.n	8005b32 <HAL_RCC_OscConfig+0x5e>
 8005b0c:	4b8c      	ldr	r3, [pc, #560]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b18:	d10b      	bne.n	8005b32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b1a:	4b89      	ldr	r3, [pc, #548]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d06c      	beq.n	8005c00 <HAL_RCC_OscConfig+0x12c>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d168      	bne.n	8005c00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e24c      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b3a:	d106      	bne.n	8005b4a <HAL_RCC_OscConfig+0x76>
 8005b3c:	4b80      	ldr	r3, [pc, #512]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a7f      	ldr	r2, [pc, #508]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	e02e      	b.n	8005ba8 <HAL_RCC_OscConfig+0xd4>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10c      	bne.n	8005b6c <HAL_RCC_OscConfig+0x98>
 8005b52:	4b7b      	ldr	r3, [pc, #492]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a7a      	ldr	r2, [pc, #488]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	4b78      	ldr	r3, [pc, #480]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a77      	ldr	r2, [pc, #476]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	e01d      	b.n	8005ba8 <HAL_RCC_OscConfig+0xd4>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b74:	d10c      	bne.n	8005b90 <HAL_RCC_OscConfig+0xbc>
 8005b76:	4b72      	ldr	r3, [pc, #456]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a71      	ldr	r2, [pc, #452]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	4b6f      	ldr	r3, [pc, #444]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a6e      	ldr	r2, [pc, #440]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	e00b      	b.n	8005ba8 <HAL_RCC_OscConfig+0xd4>
 8005b90:	4b6b      	ldr	r3, [pc, #428]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a6a      	ldr	r2, [pc, #424]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	4b68      	ldr	r3, [pc, #416]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a67      	ldr	r2, [pc, #412]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ba6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d013      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb0:	f7fd fece 	bl	8003950 <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bb8:	f7fd feca 	bl	8003950 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b64      	cmp	r3, #100	@ 0x64
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e200      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bca:	4b5d      	ldr	r3, [pc, #372]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0f0      	beq.n	8005bb8 <HAL_RCC_OscConfig+0xe4>
 8005bd6:	e014      	b.n	8005c02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd8:	f7fd feba 	bl	8003950 <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005be0:	f7fd feb6 	bl	8003950 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b64      	cmp	r3, #100	@ 0x64
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e1ec      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bf2:	4b53      	ldr	r3, [pc, #332]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f0      	bne.n	8005be0 <HAL_RCC_OscConfig+0x10c>
 8005bfe:	e000      	b.n	8005c02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d063      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c0e:	4b4c      	ldr	r3, [pc, #304]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f003 030c 	and.w	r3, r3, #12
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c1a:	4b49      	ldr	r3, [pc, #292]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f003 030c 	and.w	r3, r3, #12
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d11c      	bne.n	8005c60 <HAL_RCC_OscConfig+0x18c>
 8005c26:	4b46      	ldr	r3, [pc, #280]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d116      	bne.n	8005c60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c32:	4b43      	ldr	r3, [pc, #268]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <HAL_RCC_OscConfig+0x176>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d001      	beq.n	8005c4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e1c0      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	4939      	ldr	r1, [pc, #228]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c5e:	e03a      	b.n	8005cd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d020      	beq.n	8005caa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c68:	4b36      	ldr	r3, [pc, #216]	@ (8005d44 <HAL_RCC_OscConfig+0x270>)
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6e:	f7fd fe6f 	bl	8003950 <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c74:	e008      	b.n	8005c88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c76:	f7fd fe6b 	bl	8003950 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e1a1      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c88:	4b2d      	ldr	r3, [pc, #180]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0f0      	beq.n	8005c76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c94:	4b2a      	ldr	r3, [pc, #168]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	4927      	ldr	r1, [pc, #156]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	600b      	str	r3, [r1, #0]
 8005ca8:	e015      	b.n	8005cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005caa:	4b26      	ldr	r3, [pc, #152]	@ (8005d44 <HAL_RCC_OscConfig+0x270>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb0:	f7fd fe4e 	bl	8003950 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb8:	f7fd fe4a 	bl	8003950 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e180      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cca:	4b1d      	ldr	r3, [pc, #116]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1f0      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d03a      	beq.n	8005d58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d019      	beq.n	8005d1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cea:	4b17      	ldr	r3, [pc, #92]	@ (8005d48 <HAL_RCC_OscConfig+0x274>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cf0:	f7fd fe2e 	bl	8003950 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf8:	f7fd fe2a 	bl	8003950 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e160      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d40 <HAL_RCC_OscConfig+0x26c>)
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f0      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005d16:	2001      	movs	r0, #1
 8005d18:	f000 face 	bl	80062b8 <RCC_Delay>
 8005d1c:	e01c      	b.n	8005d58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d48 <HAL_RCC_OscConfig+0x274>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d24:	f7fd fe14 	bl	8003950 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d2a:	e00f      	b.n	8005d4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d2c:	f7fd fe10 	bl	8003950 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d908      	bls.n	8005d4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e146      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
 8005d3e:	bf00      	nop
 8005d40:	40021000 	.word	0x40021000
 8005d44:	42420000 	.word	0x42420000
 8005d48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d4c:	4b92      	ldr	r3, [pc, #584]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e9      	bne.n	8005d2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80a6 	beq.w	8005eb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d66:	2300      	movs	r3, #0
 8005d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d6a:	4b8b      	ldr	r3, [pc, #556]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10d      	bne.n	8005d92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d76:	4b88      	ldr	r3, [pc, #544]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	4a87      	ldr	r2, [pc, #540]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d80:	61d3      	str	r3, [r2, #28]
 8005d82:	4b85      	ldr	r3, [pc, #532]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d8a:	60bb      	str	r3, [r7, #8]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d92:	4b82      	ldr	r3, [pc, #520]	@ (8005f9c <HAL_RCC_OscConfig+0x4c8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d118      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8005f9c <HAL_RCC_OscConfig+0x4c8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a7e      	ldr	r2, [pc, #504]	@ (8005f9c <HAL_RCC_OscConfig+0x4c8>)
 8005da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005daa:	f7fd fdd1 	bl	8003950 <HAL_GetTick>
 8005dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db0:	e008      	b.n	8005dc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db2:	f7fd fdcd 	bl	8003950 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b64      	cmp	r3, #100	@ 0x64
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e103      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc4:	4b75      	ldr	r3, [pc, #468]	@ (8005f9c <HAL_RCC_OscConfig+0x4c8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0f0      	beq.n	8005db2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d106      	bne.n	8005de6 <HAL_RCC_OscConfig+0x312>
 8005dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	4a6e      	ldr	r2, [pc, #440]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005dde:	f043 0301 	orr.w	r3, r3, #1
 8005de2:	6213      	str	r3, [r2, #32]
 8005de4:	e02d      	b.n	8005e42 <HAL_RCC_OscConfig+0x36e>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10c      	bne.n	8005e08 <HAL_RCC_OscConfig+0x334>
 8005dee:	4b6a      	ldr	r3, [pc, #424]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	4a69      	ldr	r2, [pc, #420]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005df4:	f023 0301 	bic.w	r3, r3, #1
 8005df8:	6213      	str	r3, [r2, #32]
 8005dfa:	4b67      	ldr	r3, [pc, #412]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	4a66      	ldr	r2, [pc, #408]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005e00:	f023 0304 	bic.w	r3, r3, #4
 8005e04:	6213      	str	r3, [r2, #32]
 8005e06:	e01c      	b.n	8005e42 <HAL_RCC_OscConfig+0x36e>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	2b05      	cmp	r3, #5
 8005e0e:	d10c      	bne.n	8005e2a <HAL_RCC_OscConfig+0x356>
 8005e10:	4b61      	ldr	r3, [pc, #388]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	4a60      	ldr	r2, [pc, #384]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005e16:	f043 0304 	orr.w	r3, r3, #4
 8005e1a:	6213      	str	r3, [r2, #32]
 8005e1c:	4b5e      	ldr	r3, [pc, #376]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	4a5d      	ldr	r2, [pc, #372]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005e22:	f043 0301 	orr.w	r3, r3, #1
 8005e26:	6213      	str	r3, [r2, #32]
 8005e28:	e00b      	b.n	8005e42 <HAL_RCC_OscConfig+0x36e>
 8005e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	4a5a      	ldr	r2, [pc, #360]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	6213      	str	r3, [r2, #32]
 8005e36:	4b58      	ldr	r3, [pc, #352]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	4a57      	ldr	r2, [pc, #348]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005e3c:	f023 0304 	bic.w	r3, r3, #4
 8005e40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d015      	beq.n	8005e76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e4a:	f7fd fd81 	bl	8003950 <HAL_GetTick>
 8005e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e50:	e00a      	b.n	8005e68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e52:	f7fd fd7d 	bl	8003950 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e0b1      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e68:	4b4b      	ldr	r3, [pc, #300]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0ee      	beq.n	8005e52 <HAL_RCC_OscConfig+0x37e>
 8005e74:	e014      	b.n	8005ea0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e76:	f7fd fd6b 	bl	8003950 <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e7c:	e00a      	b.n	8005e94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e7e:	f7fd fd67 	bl	8003950 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e09b      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e94:	4b40      	ldr	r3, [pc, #256]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1ee      	bne.n	8005e7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d105      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	4a3b      	ldr	r2, [pc, #236]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005eb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 8087 	beq.w	8005fca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ebc:	4b36      	ldr	r3, [pc, #216]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f003 030c 	and.w	r3, r3, #12
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d061      	beq.n	8005f8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d146      	bne.n	8005f5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed0:	4b33      	ldr	r3, [pc, #204]	@ (8005fa0 <HAL_RCC_OscConfig+0x4cc>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed6:	f7fd fd3b 	bl	8003950 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005edc:	e008      	b.n	8005ef0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ede:	f7fd fd37 	bl	8003950 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e06d      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ef0:	4b29      	ldr	r3, [pc, #164]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f0      	bne.n	8005ede <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f04:	d108      	bne.n	8005f18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f06:	4b24      	ldr	r3, [pc, #144]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	4921      	ldr	r1, [pc, #132]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f18:	4b1f      	ldr	r3, [pc, #124]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a19      	ldr	r1, [r3, #32]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	491b      	ldr	r1, [pc, #108]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f30:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa0 <HAL_RCC_OscConfig+0x4cc>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f36:	f7fd fd0b 	bl	8003950 <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f3e:	f7fd fd07 	bl	8003950 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e03d      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f50:	4b11      	ldr	r3, [pc, #68]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0f0      	beq.n	8005f3e <HAL_RCC_OscConfig+0x46a>
 8005f5c:	e035      	b.n	8005fca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f5e:	4b10      	ldr	r3, [pc, #64]	@ (8005fa0 <HAL_RCC_OscConfig+0x4cc>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f64:	f7fd fcf4 	bl	8003950 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6c:	f7fd fcf0 	bl	8003950 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e026      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f7e:	4b06      	ldr	r3, [pc, #24]	@ (8005f98 <HAL_RCC_OscConfig+0x4c4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f0      	bne.n	8005f6c <HAL_RCC_OscConfig+0x498>
 8005f8a:	e01e      	b.n	8005fca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d107      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e019      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40007000 	.word	0x40007000
 8005fa0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd4 <HAL_RCC_OscConfig+0x500>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d106      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d001      	beq.n	8005fca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40021000 	.word	0x40021000

08005fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0d0      	b.n	800618e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fec:	4b6a      	ldr	r3, [pc, #424]	@ (8006198 <HAL_RCC_ClockConfig+0x1c0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d910      	bls.n	800601c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ffa:	4b67      	ldr	r3, [pc, #412]	@ (8006198 <HAL_RCC_ClockConfig+0x1c0>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f023 0207 	bic.w	r2, r3, #7
 8006002:	4965      	ldr	r1, [pc, #404]	@ (8006198 <HAL_RCC_ClockConfig+0x1c0>)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	4313      	orrs	r3, r2
 8006008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800600a:	4b63      	ldr	r3, [pc, #396]	@ (8006198 <HAL_RCC_ClockConfig+0x1c0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d001      	beq.n	800601c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e0b8      	b.n	800618e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d020      	beq.n	800606a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006034:	4b59      	ldr	r3, [pc, #356]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	4a58      	ldr	r2, [pc, #352]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 800603a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800603e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b00      	cmp	r3, #0
 800604a:	d005      	beq.n	8006058 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800604c:	4b53      	ldr	r3, [pc, #332]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	4a52      	ldr	r2, [pc, #328]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 8006052:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006056:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006058:	4b50      	ldr	r3, [pc, #320]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	494d      	ldr	r1, [pc, #308]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 8006066:	4313      	orrs	r3, r2
 8006068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d040      	beq.n	80060f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d107      	bne.n	800608e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607e:	4b47      	ldr	r3, [pc, #284]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d115      	bne.n	80060b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e07f      	b.n	800618e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d107      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006096:	4b41      	ldr	r3, [pc, #260]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d109      	bne.n	80060b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e073      	b.n	800618e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a6:	4b3d      	ldr	r3, [pc, #244]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e06b      	b.n	800618e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060b6:	4b39      	ldr	r3, [pc, #228]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f023 0203 	bic.w	r2, r3, #3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	4936      	ldr	r1, [pc, #216]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060c8:	f7fd fc42 	bl	8003950 <HAL_GetTick>
 80060cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ce:	e00a      	b.n	80060e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060d0:	f7fd fc3e 	bl	8003950 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060de:	4293      	cmp	r3, r2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e053      	b.n	800618e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060e6:	4b2d      	ldr	r3, [pc, #180]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f003 020c 	and.w	r2, r3, #12
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d1eb      	bne.n	80060d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060f8:	4b27      	ldr	r3, [pc, #156]	@ (8006198 <HAL_RCC_ClockConfig+0x1c0>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d210      	bcs.n	8006128 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006106:	4b24      	ldr	r3, [pc, #144]	@ (8006198 <HAL_RCC_ClockConfig+0x1c0>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f023 0207 	bic.w	r2, r3, #7
 800610e:	4922      	ldr	r1, [pc, #136]	@ (8006198 <HAL_RCC_ClockConfig+0x1c0>)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	4313      	orrs	r3, r2
 8006114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006116:	4b20      	ldr	r3, [pc, #128]	@ (8006198 <HAL_RCC_ClockConfig+0x1c0>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	429a      	cmp	r2, r3
 8006122:	d001      	beq.n	8006128 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e032      	b.n	800618e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	d008      	beq.n	8006146 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006134:	4b19      	ldr	r3, [pc, #100]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	4916      	ldr	r1, [pc, #88]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 8006142:	4313      	orrs	r3, r2
 8006144:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006152:	4b12      	ldr	r3, [pc, #72]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	490e      	ldr	r1, [pc, #56]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 8006162:	4313      	orrs	r3, r2
 8006164:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006166:	f000 f821 	bl	80061ac <HAL_RCC_GetSysClockFreq>
 800616a:	4602      	mov	r2, r0
 800616c:	4b0b      	ldr	r3, [pc, #44]	@ (800619c <HAL_RCC_ClockConfig+0x1c4>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	091b      	lsrs	r3, r3, #4
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	490a      	ldr	r1, [pc, #40]	@ (80061a0 <HAL_RCC_ClockConfig+0x1c8>)
 8006178:	5ccb      	ldrb	r3, [r1, r3]
 800617a:	fa22 f303 	lsr.w	r3, r2, r3
 800617e:	4a09      	ldr	r2, [pc, #36]	@ (80061a4 <HAL_RCC_ClockConfig+0x1cc>)
 8006180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006182:	4b09      	ldr	r3, [pc, #36]	@ (80061a8 <HAL_RCC_ClockConfig+0x1d0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f7fd fba0 	bl	80038cc <HAL_InitTick>

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40022000 	.word	0x40022000
 800619c:	40021000 	.word	0x40021000
 80061a0:	0800deb4 	.word	0x0800deb4
 80061a4:	20000010 	.word	0x20000010
 80061a8:	20000014 	.word	0x20000014

080061ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	2300      	movs	r3, #0
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
 80061be:	2300      	movs	r3, #0
 80061c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80061c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x94>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 030c 	and.w	r3, r3, #12
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d002      	beq.n	80061dc <HAL_RCC_GetSysClockFreq+0x30>
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d003      	beq.n	80061e2 <HAL_RCC_GetSysClockFreq+0x36>
 80061da:	e027      	b.n	800622c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80061dc:	4b19      	ldr	r3, [pc, #100]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x98>)
 80061de:	613b      	str	r3, [r7, #16]
      break;
 80061e0:	e027      	b.n	8006232 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	0c9b      	lsrs	r3, r3, #18
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	4a17      	ldr	r2, [pc, #92]	@ (8006248 <HAL_RCC_GetSysClockFreq+0x9c>)
 80061ec:	5cd3      	ldrb	r3, [r2, r3]
 80061ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d010      	beq.n	800621c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061fa:	4b11      	ldr	r3, [pc, #68]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x94>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	0c5b      	lsrs	r3, r3, #17
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	4a11      	ldr	r2, [pc, #68]	@ (800624c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006206:	5cd3      	ldrb	r3, [r2, r3]
 8006208:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a0d      	ldr	r2, [pc, #52]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x98>)
 800620e:	fb03 f202 	mul.w	r2, r3, r2
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	fbb2 f3f3 	udiv	r3, r2, r3
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	e004      	b.n	8006226 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a0c      	ldr	r2, [pc, #48]	@ (8006250 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006220:	fb02 f303 	mul.w	r3, r2, r3
 8006224:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	613b      	str	r3, [r7, #16]
      break;
 800622a:	e002      	b.n	8006232 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800622c:	4b05      	ldr	r3, [pc, #20]	@ (8006244 <HAL_RCC_GetSysClockFreq+0x98>)
 800622e:	613b      	str	r3, [r7, #16]
      break;
 8006230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006232:	693b      	ldr	r3, [r7, #16]
}
 8006234:	4618      	mov	r0, r3
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	40021000 	.word	0x40021000
 8006244:	007a1200 	.word	0x007a1200
 8006248:	0800decc 	.word	0x0800decc
 800624c:	0800dedc 	.word	0x0800dedc
 8006250:	003d0900 	.word	0x003d0900

08006254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006258:	4b02      	ldr	r3, [pc, #8]	@ (8006264 <HAL_RCC_GetHCLKFreq+0x10>)
 800625a:	681b      	ldr	r3, [r3, #0]
}
 800625c:	4618      	mov	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr
 8006264:	20000010 	.word	0x20000010

08006268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800626c:	f7ff fff2 	bl	8006254 <HAL_RCC_GetHCLKFreq>
 8006270:	4602      	mov	r2, r0
 8006272:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	0a1b      	lsrs	r3, r3, #8
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	4903      	ldr	r1, [pc, #12]	@ (800628c <HAL_RCC_GetPCLK1Freq+0x24>)
 800627e:	5ccb      	ldrb	r3, [r1, r3]
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40021000 	.word	0x40021000
 800628c:	0800dec4 	.word	0x0800dec4

08006290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006294:	f7ff ffde 	bl	8006254 <HAL_RCC_GetHCLKFreq>
 8006298:	4602      	mov	r2, r0
 800629a:	4b05      	ldr	r3, [pc, #20]	@ (80062b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	0adb      	lsrs	r3, r3, #11
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	4903      	ldr	r1, [pc, #12]	@ (80062b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062a6:	5ccb      	ldrb	r3, [r1, r3]
 80062a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40021000 	.word	0x40021000
 80062b4:	0800dec4 	.word	0x0800dec4

080062b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80062c0:	4b0a      	ldr	r3, [pc, #40]	@ (80062ec <RCC_Delay+0x34>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a0a      	ldr	r2, [pc, #40]	@ (80062f0 <RCC_Delay+0x38>)
 80062c6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ca:	0a5b      	lsrs	r3, r3, #9
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
 80062d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80062d4:	bf00      	nop
  }
  while (Delay --);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	1e5a      	subs	r2, r3, #1
 80062da:	60fa      	str	r2, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1f9      	bne.n	80062d4 <RCC_Delay+0x1c>
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bc80      	pop	{r7}
 80062ea:	4770      	bx	lr
 80062ec:	20000010 	.word	0x20000010
 80062f0:	10624dd3 	.word	0x10624dd3

080062f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e076      	b.n	80063f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630a:	2b00      	cmp	r3, #0
 800630c:	d108      	bne.n	8006320 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006316:	d009      	beq.n	800632c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	61da      	str	r2, [r3, #28]
 800631e:	e005      	b.n	800632c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fd f82a 	bl	80033a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006362:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b0:	ea42 0103 	orr.w	r1, r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	0c1a      	lsrs	r2, r3, #16
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f002 0204 	and.w	r2, r2, #4
 80063d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69da      	ldr	r2, [r3, #28]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e041      	b.n	8006492 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fd f808 	bl	8003438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	4619      	mov	r1, r3
 800643a:	4610      	mov	r0, r2
 800643c:	f000 fab2 	bl	80069a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e041      	b.n	8006530 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f839 	bl	8006538 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4619      	mov	r1, r3
 80064d8:	4610      	mov	r0, r2
 80064da:	f000 fa63 	bl	80069a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr
	...

0800654c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <HAL_TIM_PWM_Start+0x24>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b01      	cmp	r3, #1
 8006566:	bf14      	ite	ne
 8006568:	2301      	movne	r3, #1
 800656a:	2300      	moveq	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	e022      	b.n	80065b6 <HAL_TIM_PWM_Start+0x6a>
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b04      	cmp	r3, #4
 8006574:	d109      	bne.n	800658a <HAL_TIM_PWM_Start+0x3e>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b01      	cmp	r3, #1
 8006580:	bf14      	ite	ne
 8006582:	2301      	movne	r3, #1
 8006584:	2300      	moveq	r3, #0
 8006586:	b2db      	uxtb	r3, r3
 8006588:	e015      	b.n	80065b6 <HAL_TIM_PWM_Start+0x6a>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b08      	cmp	r3, #8
 800658e:	d109      	bne.n	80065a4 <HAL_TIM_PWM_Start+0x58>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	bf14      	ite	ne
 800659c:	2301      	movne	r3, #1
 800659e:	2300      	moveq	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	e008      	b.n	80065b6 <HAL_TIM_PWM_Start+0x6a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	bf14      	ite	ne
 80065b0:	2301      	movne	r3, #1
 80065b2:	2300      	moveq	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e05e      	b.n	800667c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <HAL_TIM_PWM_Start+0x82>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065cc:	e013      	b.n	80065f6 <HAL_TIM_PWM_Start+0xaa>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d104      	bne.n	80065de <HAL_TIM_PWM_Start+0x92>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065dc:	e00b      	b.n	80065f6 <HAL_TIM_PWM_Start+0xaa>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d104      	bne.n	80065ee <HAL_TIM_PWM_Start+0xa2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065ec:	e003      	b.n	80065f6 <HAL_TIM_PWM_Start+0xaa>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2202      	movs	r2, #2
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2201      	movs	r2, #1
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fc5c 	bl	8006ebc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a1e      	ldr	r2, [pc, #120]	@ (8006684 <HAL_TIM_PWM_Start+0x138>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d107      	bne.n	800661e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800661c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a18      	ldr	r2, [pc, #96]	@ (8006684 <HAL_TIM_PWM_Start+0x138>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00e      	beq.n	8006646 <HAL_TIM_PWM_Start+0xfa>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006630:	d009      	beq.n	8006646 <HAL_TIM_PWM_Start+0xfa>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a14      	ldr	r2, [pc, #80]	@ (8006688 <HAL_TIM_PWM_Start+0x13c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d004      	beq.n	8006646 <HAL_TIM_PWM_Start+0xfa>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a12      	ldr	r2, [pc, #72]	@ (800668c <HAL_TIM_PWM_Start+0x140>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d111      	bne.n	800666a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b06      	cmp	r3, #6
 8006656:	d010      	beq.n	800667a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006668:	e007      	b.n	800667a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0201 	orr.w	r2, r2, #1
 8006678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40012c00 	.word	0x40012c00
 8006688:	40000400 	.word	0x40000400
 800668c:	40000800 	.word	0x40000800

08006690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066aa:	2302      	movs	r3, #2
 80066ac:	e0ae      	b.n	800680c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b0c      	cmp	r3, #12
 80066ba:	f200 809f 	bhi.w	80067fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066be:	a201      	add	r2, pc, #4	@ (adr r2, 80066c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	080066f9 	.word	0x080066f9
 80066c8:	080067fd 	.word	0x080067fd
 80066cc:	080067fd 	.word	0x080067fd
 80066d0:	080067fd 	.word	0x080067fd
 80066d4:	08006739 	.word	0x08006739
 80066d8:	080067fd 	.word	0x080067fd
 80066dc:	080067fd 	.word	0x080067fd
 80066e0:	080067fd 	.word	0x080067fd
 80066e4:	0800677b 	.word	0x0800677b
 80066e8:	080067fd 	.word	0x080067fd
 80066ec:	080067fd 	.word	0x080067fd
 80066f0:	080067fd 	.word	0x080067fd
 80066f4:	080067bb 	.word	0x080067bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 f9be 	bl	8006a80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699a      	ldr	r2, [r3, #24]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0208 	orr.w	r2, r2, #8
 8006712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0204 	bic.w	r2, r2, #4
 8006722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6999      	ldr	r1, [r3, #24]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	619a      	str	r2, [r3, #24]
      break;
 8006736:	e064      	b.n	8006802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fa04 	bl	8006b4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6999      	ldr	r1, [r3, #24]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	021a      	lsls	r2, r3, #8
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	619a      	str	r2, [r3, #24]
      break;
 8006778:	e043      	b.n	8006802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68b9      	ldr	r1, [r7, #8]
 8006780:	4618      	mov	r0, r3
 8006782:	f000 fa4d 	bl	8006c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69da      	ldr	r2, [r3, #28]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f042 0208 	orr.w	r2, r2, #8
 8006794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0204 	bic.w	r2, r2, #4
 80067a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69d9      	ldr	r1, [r3, #28]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	61da      	str	r2, [r3, #28]
      break;
 80067b8:	e023      	b.n	8006802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fa97 	bl	8006cf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69da      	ldr	r2, [r3, #28]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69da      	ldr	r2, [r3, #28]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69d9      	ldr	r1, [r3, #28]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	021a      	lsls	r2, r3, #8
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	61da      	str	r2, [r3, #28]
      break;
 80067fa:	e002      	b.n	8006802 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006800:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_TIM_ConfigClockSource+0x1c>
 800682c:	2302      	movs	r3, #2
 800682e:	e0b4      	b.n	800699a <HAL_TIM_ConfigClockSource+0x186>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800684e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006856:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006868:	d03e      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0xd4>
 800686a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800686e:	f200 8087 	bhi.w	8006980 <HAL_TIM_ConfigClockSource+0x16c>
 8006872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006876:	f000 8086 	beq.w	8006986 <HAL_TIM_ConfigClockSource+0x172>
 800687a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800687e:	d87f      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x16c>
 8006880:	2b70      	cmp	r3, #112	@ 0x70
 8006882:	d01a      	beq.n	80068ba <HAL_TIM_ConfigClockSource+0xa6>
 8006884:	2b70      	cmp	r3, #112	@ 0x70
 8006886:	d87b      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x16c>
 8006888:	2b60      	cmp	r3, #96	@ 0x60
 800688a:	d050      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x11a>
 800688c:	2b60      	cmp	r3, #96	@ 0x60
 800688e:	d877      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x16c>
 8006890:	2b50      	cmp	r3, #80	@ 0x50
 8006892:	d03c      	beq.n	800690e <HAL_TIM_ConfigClockSource+0xfa>
 8006894:	2b50      	cmp	r3, #80	@ 0x50
 8006896:	d873      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x16c>
 8006898:	2b40      	cmp	r3, #64	@ 0x40
 800689a:	d058      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x13a>
 800689c:	2b40      	cmp	r3, #64	@ 0x40
 800689e:	d86f      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x16c>
 80068a0:	2b30      	cmp	r3, #48	@ 0x30
 80068a2:	d064      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x15a>
 80068a4:	2b30      	cmp	r3, #48	@ 0x30
 80068a6:	d86b      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x16c>
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d060      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x15a>
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	d867      	bhi.n	8006980 <HAL_TIM_ConfigClockSource+0x16c>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d05c      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x15a>
 80068b4:	2b10      	cmp	r3, #16
 80068b6:	d05a      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x15a>
 80068b8:	e062      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068ca:	f000 fad8 	bl	8006e7e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	609a      	str	r2, [r3, #8]
      break;
 80068e6:	e04f      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068f8:	f000 fac1 	bl	8006e7e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800690a:	609a      	str	r2, [r3, #8]
      break;
 800690c:	e03c      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800691a:	461a      	mov	r2, r3
 800691c:	f000 fa38 	bl	8006d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2150      	movs	r1, #80	@ 0x50
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fa8f 	bl	8006e4a <TIM_ITRx_SetConfig>
      break;
 800692c:	e02c      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800693a:	461a      	mov	r2, r3
 800693c:	f000 fa56 	bl	8006dec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2160      	movs	r1, #96	@ 0x60
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fa7f 	bl	8006e4a <TIM_ITRx_SetConfig>
      break;
 800694c:	e01c      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800695a:	461a      	mov	r2, r3
 800695c:	f000 fa18 	bl	8006d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2140      	movs	r1, #64	@ 0x40
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fa6f 	bl	8006e4a <TIM_ITRx_SetConfig>
      break;
 800696c:	e00c      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4619      	mov	r1, r3
 8006978:	4610      	mov	r0, r2
 800697a:	f000 fa66 	bl	8006e4a <TIM_ITRx_SetConfig>
      break;
 800697e:	e003      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
      break;
 8006984:	e000      	b.n	8006988 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006986:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a2f      	ldr	r2, [pc, #188]	@ (8006a74 <TIM_Base_SetConfig+0xd0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00b      	beq.n	80069d4 <TIM_Base_SetConfig+0x30>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c2:	d007      	beq.n	80069d4 <TIM_Base_SetConfig+0x30>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a78 <TIM_Base_SetConfig+0xd4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_Base_SetConfig+0x30>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a2b      	ldr	r2, [pc, #172]	@ (8006a7c <TIM_Base_SetConfig+0xd8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d108      	bne.n	80069e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a22      	ldr	r2, [pc, #136]	@ (8006a74 <TIM_Base_SetConfig+0xd0>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00b      	beq.n	8006a06 <TIM_Base_SetConfig+0x62>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069f4:	d007      	beq.n	8006a06 <TIM_Base_SetConfig+0x62>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a78 <TIM_Base_SetConfig+0xd4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d003      	beq.n	8006a06 <TIM_Base_SetConfig+0x62>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a1e      	ldr	r2, [pc, #120]	@ (8006a7c <TIM_Base_SetConfig+0xd8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d108      	bne.n	8006a18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8006a74 <TIM_Base_SetConfig+0xd0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d103      	bne.n	8006a4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d005      	beq.n	8006a6a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f023 0201 	bic.w	r2, r3, #1
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	611a      	str	r2, [r3, #16]
  }
}
 8006a6a:	bf00      	nop
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc80      	pop	{r7}
 8006a72:	4770      	bx	lr
 8006a74:	40012c00 	.word	0x40012c00
 8006a78:	40000400 	.word	0x40000400
 8006a7c:	40000800 	.word	0x40000800

08006a80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	f023 0201 	bic.w	r2, r3, #1
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f023 0302 	bic.w	r3, r3, #2
 8006ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8006b48 <TIM_OC1_SetConfig+0xc8>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d10c      	bne.n	8006af6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f023 0308 	bic.w	r3, r3, #8
 8006ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f023 0304 	bic.w	r3, r3, #4
 8006af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a13      	ldr	r2, [pc, #76]	@ (8006b48 <TIM_OC1_SetConfig+0xc8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d111      	bne.n	8006b22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	621a      	str	r2, [r3, #32]
}
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40012c00 	.word	0x40012c00

08006b4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	f023 0210 	bic.w	r2, r3, #16
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f023 0320 	bic.w	r3, r3, #32
 8006b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8006c1c <TIM_OC2_SetConfig+0xd0>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d10d      	bne.n	8006bc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a14      	ldr	r2, [pc, #80]	@ (8006c1c <TIM_OC2_SetConfig+0xd0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d113      	bne.n	8006bf8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	621a      	str	r2, [r3, #32]
}
 8006c12:	bf00      	nop
 8006c14:	371c      	adds	r7, #28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bc80      	pop	{r7}
 8006c1a:	4770      	bx	lr
 8006c1c:	40012c00 	.word	0x40012c00

08006c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0303 	bic.w	r3, r3, #3
 8006c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf0 <TIM_OC3_SetConfig+0xd0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d10d      	bne.n	8006c9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	021b      	lsls	r3, r3, #8
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a14      	ldr	r2, [pc, #80]	@ (8006cf0 <TIM_OC3_SetConfig+0xd0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d113      	bne.n	8006cca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	621a      	str	r2, [r3, #32]
}
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	40012c00 	.word	0x40012c00

08006cf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	021b      	lsls	r3, r3, #8
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	031b      	lsls	r3, r3, #12
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8006d8c <TIM_OC4_SetConfig+0x98>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d109      	bne.n	8006d68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	019b      	lsls	r3, r3, #6
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	621a      	str	r2, [r3, #32]
}
 8006d82:	bf00      	nop
 8006d84:	371c      	adds	r7, #28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr
 8006d8c:	40012c00 	.word	0x40012c00

08006d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	f023 0201 	bic.w	r2, r3, #1
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f023 030a 	bic.w	r3, r3, #10
 8006dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	621a      	str	r2, [r3, #32]
}
 8006de2:	bf00      	nop
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f023 0210 	bic.w	r2, r3, #16
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	031b      	lsls	r3, r3, #12
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	621a      	str	r2, [r3, #32]
}
 8006e40:	bf00      	nop
 8006e42:	371c      	adds	r7, #28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr

08006e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f043 0307 	orr.w	r3, r3, #7
 8006e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	609a      	str	r2, [r3, #8]
}
 8006e74:	bf00      	nop
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr

08006e7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b087      	sub	sp, #28
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	607a      	str	r2, [r7, #4]
 8006e8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	021a      	lsls	r2, r3, #8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	609a      	str	r2, [r3, #8]
}
 8006eb2:	bf00      	nop
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	2201      	movs	r2, #1
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6a1a      	ldr	r2, [r3, #32]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	43db      	mvns	r3, r3
 8006ede:	401a      	ands	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a1a      	ldr	r2, [r3, #32]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f003 031f 	and.w	r3, r3, #31
 8006eee:	6879      	ldr	r1, [r7, #4]
 8006ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	621a      	str	r2, [r3, #32]
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bc80      	pop	{r7}
 8006f02:	4770      	bx	lr

08006f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f18:	2302      	movs	r3, #2
 8006f1a:	e046      	b.n	8006faa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a16      	ldr	r2, [pc, #88]	@ (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00e      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f68:	d009      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a12      	ldr	r2, [pc, #72]	@ (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d004      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a10      	ldr	r2, [pc, #64]	@ (8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d10c      	bne.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bc80      	pop	{r7}
 8006fb2:	4770      	bx	lr
 8006fb4:	40012c00 	.word	0x40012c00
 8006fb8:	40000400 	.word	0x40000400
 8006fbc:	40000800 	.word	0x40000800

08006fc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d101      	bne.n	8006fdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e03d      	b.n	8007058 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	bc80      	pop	{r7}
 8007060:	4770      	bx	lr

08007062 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e042      	b.n	80070fa <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d106      	bne.n	800708e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7fc fa27 	bl	80034dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2224      	movs	r2, #36	@ 0x24
 8007092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68da      	ldr	r2, [r3, #12]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fdb8 	bl	8007c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691a      	ldr	r2, [r3, #16]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80070ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	695a      	ldr	r2, [r3, #20]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b08a      	sub	sp, #40	@ 0x28
 8007106:	af02      	add	r7, sp, #8
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4613      	mov	r3, r2
 8007110:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b20      	cmp	r3, #32
 8007120:	d175      	bne.n	800720e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <HAL_UART_Transmit+0x2c>
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e06e      	b.n	8007210 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2221      	movs	r2, #33	@ 0x21
 800713c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007140:	f7fc fc06 	bl	8003950 <HAL_GetTick>
 8007144:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	88fa      	ldrh	r2, [r7, #6]
 800714a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	88fa      	ldrh	r2, [r7, #6]
 8007150:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800715a:	d108      	bne.n	800716e <HAL_UART_Transmit+0x6c>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d104      	bne.n	800716e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007164:	2300      	movs	r3, #0
 8007166:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	61bb      	str	r3, [r7, #24]
 800716c:	e003      	b.n	8007176 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007176:	e02e      	b.n	80071d6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2200      	movs	r2, #0
 8007180:	2180      	movs	r1, #128	@ 0x80
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 fb1d 	bl	80077c2 <UART_WaitOnFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2220      	movs	r2, #32
 8007192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e03a      	b.n	8007210 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10b      	bne.n	80071b8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071ae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	3302      	adds	r3, #2
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	e007      	b.n	80071c8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	781a      	ldrb	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	3301      	adds	r3, #1
 80071c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071da:	b29b      	uxth	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1cb      	bne.n	8007178 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2200      	movs	r2, #0
 80071e8:	2140      	movs	r1, #64	@ 0x40
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 fae9 	bl	80077c2 <UART_WaitOnFlagUntilTimeout>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e006      	b.n	8007210 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2220      	movs	r2, #32
 8007206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	e000      	b.n	8007210 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800720e:	2302      	movs	r3, #2
  }
}
 8007210:	4618      	mov	r0, r3
 8007212:	3720      	adds	r7, #32
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4613      	mov	r3, r2
 8007224:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b20      	cmp	r3, #32
 8007230:	d112      	bne.n	8007258 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <HAL_UART_Receive_IT+0x26>
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e00b      	b.n	800725a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	461a      	mov	r2, r3
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 fb10 	bl	8007874 <UART_Start_Receive_IT>
 8007254:	4603      	mov	r3, r0
 8007256:	e000      	b.n	800725a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007258:	2302      	movs	r3, #2
  }
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b0ba      	sub	sp, #232	@ 0xe8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800728a:	2300      	movs	r3, #0
 800728c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007290:	2300      	movs	r3, #0
 8007292:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80072a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10f      	bne.n	80072ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d009      	beq.n	80072ca <HAL_UART_IRQHandler+0x66>
 80072b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fbec 	bl	8007aa0 <UART_Receive_IT>
      return;
 80072c8:	e25b      	b.n	8007782 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80072ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 80de 	beq.w	8007490 <HAL_UART_IRQHandler+0x22c>
 80072d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d106      	bne.n	80072ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 80d1 	beq.w	8007490 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00b      	beq.n	8007312 <HAL_UART_IRQHandler+0xae>
 80072fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007302:	2b00      	cmp	r3, #0
 8007304:	d005      	beq.n	8007312 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800730a:	f043 0201 	orr.w	r2, r3, #1
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00b      	beq.n	8007336 <HAL_UART_IRQHandler+0xd2>
 800731e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d005      	beq.n	8007336 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800732e:	f043 0202 	orr.w	r2, r3, #2
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00b      	beq.n	800735a <HAL_UART_IRQHandler+0xf6>
 8007342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007352:	f043 0204 	orr.w	r2, r3, #4
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800735a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	2b00      	cmp	r3, #0
 8007364:	d011      	beq.n	800738a <HAL_UART_IRQHandler+0x126>
 8007366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800736a:	f003 0320 	and.w	r3, r3, #32
 800736e:	2b00      	cmp	r3, #0
 8007370:	d105      	bne.n	800737e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007382:	f043 0208 	orr.w	r2, r3, #8
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 81f2 	beq.w	8007778 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007398:	f003 0320 	and.w	r3, r3, #32
 800739c:	2b00      	cmp	r3, #0
 800739e:	d008      	beq.n	80073b2 <HAL_UART_IRQHandler+0x14e>
 80073a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fb77 	bl	8007aa0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073bc:	2b00      	cmp	r3, #0
 80073be:	bf14      	ite	ne
 80073c0:	2301      	movne	r3, #1
 80073c2:	2300      	moveq	r3, #0
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d103      	bne.n	80073de <HAL_UART_IRQHandler+0x17a>
 80073d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d04f      	beq.n	800747e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa81 	bl	80078e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d041      	beq.n	8007476 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3314      	adds	r3, #20
 80073f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007408:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800740c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007410:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3314      	adds	r3, #20
 800741a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800741e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007422:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800742a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1d9      	bne.n	80073f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007442:	2b00      	cmp	r3, #0
 8007444:	d013      	beq.n	800746e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800744a:	4a7e      	ldr	r2, [pc, #504]	@ (8007644 <HAL_UART_IRQHandler+0x3e0>)
 800744c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007452:	4618      	mov	r0, r3
 8007454:	f7fc fbf2 	bl	8003c3c <HAL_DMA_Abort_IT>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d016      	beq.n	800748c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007468:	4610      	mov	r0, r2
 800746a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746c:	e00e      	b.n	800748c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f993 	bl	800779a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007474:	e00a      	b.n	800748c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f98f 	bl	800779a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800747c:	e006      	b.n	800748c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f98b 	bl	800779a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800748a:	e175      	b.n	8007778 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800748c:	bf00      	nop
    return;
 800748e:	e173      	b.n	8007778 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007494:	2b01      	cmp	r3, #1
 8007496:	f040 814f 	bne.w	8007738 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800749a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8148 	beq.w	8007738 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80074a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ac:	f003 0310 	and.w	r3, r3, #16
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8141 	beq.w	8007738 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074b6:	2300      	movs	r3, #0
 80074b8:	60bb      	str	r3, [r7, #8]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60bb      	str	r3, [r7, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 80b6 	beq.w	8007648 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8145 	beq.w	800777c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80074f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074fa:	429a      	cmp	r2, r3
 80074fc:	f080 813e 	bcs.w	800777c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007506:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b20      	cmp	r3, #32
 8007510:	f000 8088 	beq.w	8007624 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	330c      	adds	r3, #12
 800751a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800752a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800752e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007532:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	330c      	adds	r3, #12
 800753c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007540:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007544:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800754c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007558:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1d9      	bne.n	8007514 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3314      	adds	r3, #20
 8007566:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007570:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007572:	f023 0301 	bic.w	r3, r3, #1
 8007576:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3314      	adds	r3, #20
 8007580:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007584:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007588:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800758c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007596:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e1      	bne.n	8007560 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3314      	adds	r3, #20
 80075a2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075a6:	e853 3f00 	ldrex	r3, [r3]
 80075aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80075ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3314      	adds	r3, #20
 80075bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80075c0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80075c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80075c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80075ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e3      	bne.n	800759c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	330c      	adds	r3, #12
 80075e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075f4:	f023 0310 	bic.w	r3, r3, #16
 80075f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	330c      	adds	r3, #12
 8007602:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007606:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007608:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800760c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e3      	bne.n	80075e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800761e:	4618      	mov	r0, r3
 8007620:	f7fc fad1 	bl	8003bc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007632:	b29b      	uxth	r3, r3
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	b29b      	uxth	r3, r3
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f8b6 	bl	80077ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007640:	e09c      	b.n	800777c <HAL_UART_IRQHandler+0x518>
 8007642:	bf00      	nop
 8007644:	080079ab 	.word	0x080079ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007650:	b29b      	uxth	r3, r3
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800765c:	b29b      	uxth	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 808e 	beq.w	8007780 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 8089 	beq.w	8007780 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	330c      	adds	r3, #12
 8007674:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800767e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007684:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	330c      	adds	r3, #12
 800768e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007692:	647a      	str	r2, [r7, #68]	@ 0x44
 8007694:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e3      	bne.n	800766e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3314      	adds	r3, #20
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	623b      	str	r3, [r7, #32]
   return(result);
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	f023 0301 	bic.w	r3, r3, #1
 80076bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3314      	adds	r3, #20
 80076c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80076ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80076cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e3      	bne.n	80076a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	330c      	adds	r3, #12
 80076f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0310 	bic.w	r3, r3, #16
 8007702:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	330c      	adds	r3, #12
 800770c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007710:	61fa      	str	r2, [r7, #28]
 8007712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	69b9      	ldr	r1, [r7, #24]
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	617b      	str	r3, [r7, #20]
   return(result);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e3      	bne.n	80076ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800772a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f83b 	bl	80077ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007736:	e023      	b.n	8007780 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800773c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <HAL_UART_IRQHandler+0x4f4>
 8007744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f93e 	bl	80079d2 <UART_Transmit_IT>
    return;
 8007756:	e014      	b.n	8007782 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800775c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00e      	beq.n	8007782 <HAL_UART_IRQHandler+0x51e>
 8007764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	d008      	beq.n	8007782 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f97d 	bl	8007a70 <UART_EndTransmit_IT>
    return;
 8007776:	e004      	b.n	8007782 <HAL_UART_IRQHandler+0x51e>
    return;
 8007778:	bf00      	nop
 800777a:	e002      	b.n	8007782 <HAL_UART_IRQHandler+0x51e>
      return;
 800777c:	bf00      	nop
 800777e:	e000      	b.n	8007782 <HAL_UART_IRQHandler+0x51e>
      return;
 8007780:	bf00      	nop
  }
}
 8007782:	37e8      	adds	r7, #232	@ 0xe8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr

0800779a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bc80      	pop	{r7}
 80077aa:	4770      	bx	lr

080077ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	bc80      	pop	{r7}
 80077c0:	4770      	bx	lr

080077c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b086      	sub	sp, #24
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	603b      	str	r3, [r7, #0]
 80077ce:	4613      	mov	r3, r2
 80077d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077d2:	e03b      	b.n	800784c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077da:	d037      	beq.n	800784c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077dc:	f7fc f8b8 	bl	8003950 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	6a3a      	ldr	r2, [r7, #32]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d302      	bcc.n	80077f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e03a      	b.n	800786c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d023      	beq.n	800784c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b80      	cmp	r3, #128	@ 0x80
 8007808:	d020      	beq.n	800784c <UART_WaitOnFlagUntilTimeout+0x8a>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b40      	cmp	r3, #64	@ 0x40
 800780e:	d01d      	beq.n	800784c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	2b08      	cmp	r3, #8
 800781c:	d116      	bne.n	800784c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 f856 	bl	80078e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2208      	movs	r2, #8
 800783e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e00f      	b.n	800786c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	4013      	ands	r3, r2
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	429a      	cmp	r2, r3
 800785a:	bf0c      	ite	eq
 800785c:	2301      	moveq	r3, #1
 800785e:	2300      	movne	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	461a      	mov	r2, r3
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	429a      	cmp	r2, r3
 8007868:	d0b4      	beq.n	80077d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	88fa      	ldrh	r2, [r7, #6]
 800788c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	88fa      	ldrh	r2, [r7, #6]
 8007892:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2222      	movs	r2, #34	@ 0x22
 800789e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d007      	beq.n	80078ba <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695a      	ldr	r2, [r3, #20]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0201 	orr.w	r2, r2, #1
 80078c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0220 	orr.w	r2, r2, #32
 80078d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr

080078e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b095      	sub	sp, #84	@ 0x54
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	330c      	adds	r3, #12
 80078f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	330c      	adds	r3, #12
 800790c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800790e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007916:	e841 2300 	strex	r3, r2, [r1]
 800791a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800791c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1e5      	bne.n	80078ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3314      	adds	r3, #20
 8007928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	61fb      	str	r3, [r7, #28]
   return(result);
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	f023 0301 	bic.w	r3, r3, #1
 8007938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3314      	adds	r3, #20
 8007940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007944:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e5      	bne.n	8007922 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795a:	2b01      	cmp	r3, #1
 800795c:	d119      	bne.n	8007992 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	330c      	adds	r3, #12
 8007964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	60bb      	str	r3, [r7, #8]
   return(result);
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	f023 0310 	bic.w	r3, r3, #16
 8007974:	647b      	str	r3, [r7, #68]	@ 0x44
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	330c      	adds	r3, #12
 800797c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800797e:	61ba      	str	r2, [r7, #24]
 8007980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	6979      	ldr	r1, [r7, #20]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	613b      	str	r3, [r7, #16]
   return(result);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e5      	bne.n	800795e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80079a0:	bf00      	nop
 80079a2:	3754      	adds	r7, #84	@ 0x54
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bc80      	pop	{r7}
 80079a8:	4770      	bx	lr

080079aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f7ff fee8 	bl	800779a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ca:	bf00      	nop
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b21      	cmp	r3, #33	@ 0x21
 80079e4:	d13e      	bne.n	8007a64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ee:	d114      	bne.n	8007a1a <UART_Transmit_IT+0x48>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d110      	bne.n	8007a1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	1c9a      	adds	r2, r3, #2
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	621a      	str	r2, [r3, #32]
 8007a18:	e008      	b.n	8007a2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	1c59      	adds	r1, r3, #1
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6211      	str	r1, [r2, #32]
 8007a24:	781a      	ldrb	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10f      	bne.n	8007a60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	e000      	b.n	8007a66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a64:	2302      	movs	r3, #2
  }
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bc80      	pop	{r7}
 8007a6e:	4770      	bx	lr

08007a70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff fe79 	bl	8007788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08c      	sub	sp, #48	@ 0x30
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b22      	cmp	r3, #34	@ 0x22
 8007ab2:	f040 80ae 	bne.w	8007c12 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007abe:	d117      	bne.n	8007af0 <UART_Receive_IT+0x50>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d113      	bne.n	8007af0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae8:	1c9a      	adds	r2, r3, #2
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	629a      	str	r2, [r3, #40]	@ 0x28
 8007aee:	e026      	b.n	8007b3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007af6:	2300      	movs	r3, #0
 8007af8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b02:	d007      	beq.n	8007b14 <UART_Receive_IT+0x74>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10a      	bne.n	8007b22 <UART_Receive_IT+0x82>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d106      	bne.n	8007b22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b1e:	701a      	strb	r2, [r3, #0]
 8007b20:	e008      	b.n	8007b34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d15d      	bne.n	8007c0e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 0220 	bic.w	r2, r2, #32
 8007b60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	695a      	ldr	r2, [r3, #20]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0201 	bic.w	r2, r2, #1
 8007b80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d135      	bne.n	8007c04 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	330c      	adds	r3, #12
 8007ba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	613b      	str	r3, [r7, #16]
   return(result);
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f023 0310 	bic.w	r3, r3, #16
 8007bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	330c      	adds	r3, #12
 8007bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bbe:	623a      	str	r2, [r7, #32]
 8007bc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	69f9      	ldr	r1, [r7, #28]
 8007bc4:	6a3a      	ldr	r2, [r7, #32]
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e5      	bne.n	8007b9e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	2b10      	cmp	r3, #16
 8007bde:	d10a      	bne.n	8007bf6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7ff fdd5 	bl	80077ac <HAL_UARTEx_RxEventCallback>
 8007c02:	e002      	b.n	8007c0a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7fa ff87 	bl	8002b18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e002      	b.n	8007c14 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e000      	b.n	8007c14 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007c12:	2302      	movs	r3, #2
  }
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3730      	adds	r7, #48	@ 0x30
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007c56:	f023 030c 	bic.w	r3, r3, #12
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6812      	ldr	r2, [r2, #0]
 8007c5e:	68b9      	ldr	r1, [r7, #8]
 8007c60:	430b      	orrs	r3, r1
 8007c62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	699a      	ldr	r2, [r3, #24]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	430a      	orrs	r2, r1
 8007c78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8007d30 <UART_SetConfig+0x114>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d103      	bne.n	8007c8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007c84:	f7fe fb04 	bl	8006290 <HAL_RCC_GetPCLK2Freq>
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	e002      	b.n	8007c92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007c8c:	f7fe faec 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 8007c90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009a      	lsls	r2, r3, #2
 8007c9c:	441a      	add	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca8:	4a22      	ldr	r2, [pc, #136]	@ (8007d34 <UART_SetConfig+0x118>)
 8007caa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cae:	095b      	lsrs	r3, r3, #5
 8007cb0:	0119      	lsls	r1, r3, #4
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	009a      	lsls	r2, r3, #2
 8007cbc:	441a      	add	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8007d34 <UART_SetConfig+0x118>)
 8007cca:	fba3 0302 	umull	r0, r3, r3, r2
 8007cce:	095b      	lsrs	r3, r3, #5
 8007cd0:	2064      	movs	r0, #100	@ 0x64
 8007cd2:	fb00 f303 	mul.w	r3, r0, r3
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	011b      	lsls	r3, r3, #4
 8007cda:	3332      	adds	r3, #50	@ 0x32
 8007cdc:	4a15      	ldr	r2, [pc, #84]	@ (8007d34 <UART_SetConfig+0x118>)
 8007cde:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce2:	095b      	lsrs	r3, r3, #5
 8007ce4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ce8:	4419      	add	r1, r3
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009a      	lsls	r2, r3, #2
 8007cf4:	441a      	add	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d00:	4b0c      	ldr	r3, [pc, #48]	@ (8007d34 <UART_SetConfig+0x118>)
 8007d02:	fba3 0302 	umull	r0, r3, r3, r2
 8007d06:	095b      	lsrs	r3, r3, #5
 8007d08:	2064      	movs	r0, #100	@ 0x64
 8007d0a:	fb00 f303 	mul.w	r3, r0, r3
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	011b      	lsls	r3, r3, #4
 8007d12:	3332      	adds	r3, #50	@ 0x32
 8007d14:	4a07      	ldr	r2, [pc, #28]	@ (8007d34 <UART_SetConfig+0x118>)
 8007d16:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1a:	095b      	lsrs	r3, r3, #5
 8007d1c:	f003 020f 	and.w	r2, r3, #15
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	440a      	add	r2, r1
 8007d26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	40013800 	.word	0x40013800
 8007d34:	51eb851f 	.word	0x51eb851f

08007d38 <__cvt>:
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d3e:	461d      	mov	r5, r3
 8007d40:	bfbb      	ittet	lt
 8007d42:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007d46:	461d      	movlt	r5, r3
 8007d48:	2300      	movge	r3, #0
 8007d4a:	232d      	movlt	r3, #45	@ 0x2d
 8007d4c:	b088      	sub	sp, #32
 8007d4e:	4614      	mov	r4, r2
 8007d50:	bfb8      	it	lt
 8007d52:	4614      	movlt	r4, r2
 8007d54:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007d56:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007d58:	7013      	strb	r3, [r2, #0]
 8007d5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d5c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007d60:	f023 0820 	bic.w	r8, r3, #32
 8007d64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d68:	d005      	beq.n	8007d76 <__cvt+0x3e>
 8007d6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007d6e:	d100      	bne.n	8007d72 <__cvt+0x3a>
 8007d70:	3601      	adds	r6, #1
 8007d72:	2302      	movs	r3, #2
 8007d74:	e000      	b.n	8007d78 <__cvt+0x40>
 8007d76:	2303      	movs	r3, #3
 8007d78:	aa07      	add	r2, sp, #28
 8007d7a:	9204      	str	r2, [sp, #16]
 8007d7c:	aa06      	add	r2, sp, #24
 8007d7e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007d82:	e9cd 3600 	strd	r3, r6, [sp]
 8007d86:	4622      	mov	r2, r4
 8007d88:	462b      	mov	r3, r5
 8007d8a:	f001 f9d1 	bl	8009130 <_dtoa_r>
 8007d8e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007d92:	4607      	mov	r7, r0
 8007d94:	d119      	bne.n	8007dca <__cvt+0x92>
 8007d96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007d98:	07db      	lsls	r3, r3, #31
 8007d9a:	d50e      	bpl.n	8007dba <__cvt+0x82>
 8007d9c:	eb00 0906 	add.w	r9, r0, r6
 8007da0:	2200      	movs	r2, #0
 8007da2:	2300      	movs	r3, #0
 8007da4:	4620      	mov	r0, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	f7f8 fdfe 	bl	80009a8 <__aeabi_dcmpeq>
 8007dac:	b108      	cbz	r0, 8007db2 <__cvt+0x7a>
 8007dae:	f8cd 901c 	str.w	r9, [sp, #28]
 8007db2:	2230      	movs	r2, #48	@ 0x30
 8007db4:	9b07      	ldr	r3, [sp, #28]
 8007db6:	454b      	cmp	r3, r9
 8007db8:	d31e      	bcc.n	8007df8 <__cvt+0xc0>
 8007dba:	4638      	mov	r0, r7
 8007dbc:	9b07      	ldr	r3, [sp, #28]
 8007dbe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007dc0:	1bdb      	subs	r3, r3, r7
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	b008      	add	sp, #32
 8007dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007dce:	eb00 0906 	add.w	r9, r0, r6
 8007dd2:	d1e5      	bne.n	8007da0 <__cvt+0x68>
 8007dd4:	7803      	ldrb	r3, [r0, #0]
 8007dd6:	2b30      	cmp	r3, #48	@ 0x30
 8007dd8:	d10a      	bne.n	8007df0 <__cvt+0xb8>
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4620      	mov	r0, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7f8 fde1 	bl	80009a8 <__aeabi_dcmpeq>
 8007de6:	b918      	cbnz	r0, 8007df0 <__cvt+0xb8>
 8007de8:	f1c6 0601 	rsb	r6, r6, #1
 8007dec:	f8ca 6000 	str.w	r6, [sl]
 8007df0:	f8da 3000 	ldr.w	r3, [sl]
 8007df4:	4499      	add	r9, r3
 8007df6:	e7d3      	b.n	8007da0 <__cvt+0x68>
 8007df8:	1c59      	adds	r1, r3, #1
 8007dfa:	9107      	str	r1, [sp, #28]
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	e7d9      	b.n	8007db4 <__cvt+0x7c>

08007e00 <__exponent>:
 8007e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e02:	2900      	cmp	r1, #0
 8007e04:	bfb6      	itet	lt
 8007e06:	232d      	movlt	r3, #45	@ 0x2d
 8007e08:	232b      	movge	r3, #43	@ 0x2b
 8007e0a:	4249      	neglt	r1, r1
 8007e0c:	2909      	cmp	r1, #9
 8007e0e:	7002      	strb	r2, [r0, #0]
 8007e10:	7043      	strb	r3, [r0, #1]
 8007e12:	dd29      	ble.n	8007e68 <__exponent+0x68>
 8007e14:	f10d 0307 	add.w	r3, sp, #7
 8007e18:	461d      	mov	r5, r3
 8007e1a:	270a      	movs	r7, #10
 8007e1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e20:	461a      	mov	r2, r3
 8007e22:	fb07 1416 	mls	r4, r7, r6, r1
 8007e26:	3430      	adds	r4, #48	@ 0x30
 8007e28:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	2c63      	cmp	r4, #99	@ 0x63
 8007e30:	4631      	mov	r1, r6
 8007e32:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e36:	dcf1      	bgt.n	8007e1c <__exponent+0x1c>
 8007e38:	3130      	adds	r1, #48	@ 0x30
 8007e3a:	1e94      	subs	r4, r2, #2
 8007e3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e40:	4623      	mov	r3, r4
 8007e42:	1c41      	adds	r1, r0, #1
 8007e44:	42ab      	cmp	r3, r5
 8007e46:	d30a      	bcc.n	8007e5e <__exponent+0x5e>
 8007e48:	f10d 0309 	add.w	r3, sp, #9
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	42ac      	cmp	r4, r5
 8007e50:	bf88      	it	hi
 8007e52:	2300      	movhi	r3, #0
 8007e54:	3302      	adds	r3, #2
 8007e56:	4403      	add	r3, r0
 8007e58:	1a18      	subs	r0, r3, r0
 8007e5a:	b003      	add	sp, #12
 8007e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e5e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e62:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e66:	e7ed      	b.n	8007e44 <__exponent+0x44>
 8007e68:	2330      	movs	r3, #48	@ 0x30
 8007e6a:	3130      	adds	r1, #48	@ 0x30
 8007e6c:	7083      	strb	r3, [r0, #2]
 8007e6e:	70c1      	strb	r1, [r0, #3]
 8007e70:	1d03      	adds	r3, r0, #4
 8007e72:	e7f1      	b.n	8007e58 <__exponent+0x58>

08007e74 <_printf_float>:
 8007e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e78:	b091      	sub	sp, #68	@ 0x44
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007e80:	4616      	mov	r6, r2
 8007e82:	461f      	mov	r7, r3
 8007e84:	4605      	mov	r5, r0
 8007e86:	f001 f833 	bl	8008ef0 <_localeconv_r>
 8007e8a:	6803      	ldr	r3, [r0, #0]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	9308      	str	r3, [sp, #32]
 8007e90:	f7f8 f95e 	bl	8000150 <strlen>
 8007e94:	2300      	movs	r3, #0
 8007e96:	930e      	str	r3, [sp, #56]	@ 0x38
 8007e98:	f8d8 3000 	ldr.w	r3, [r8]
 8007e9c:	9009      	str	r0, [sp, #36]	@ 0x24
 8007e9e:	3307      	adds	r3, #7
 8007ea0:	f023 0307 	bic.w	r3, r3, #7
 8007ea4:	f103 0208 	add.w	r2, r3, #8
 8007ea8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007eac:	f8d4 b000 	ldr.w	fp, [r4]
 8007eb0:	f8c8 2000 	str.w	r2, [r8]
 8007eb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007eb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007ebc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ebe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007eca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007ece:	4b9c      	ldr	r3, [pc, #624]	@ (8008140 <_printf_float+0x2cc>)
 8007ed0:	f7f8 fd9c 	bl	8000a0c <__aeabi_dcmpun>
 8007ed4:	bb70      	cbnz	r0, 8007f34 <_printf_float+0xc0>
 8007ed6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007eda:	f04f 32ff 	mov.w	r2, #4294967295
 8007ede:	4b98      	ldr	r3, [pc, #608]	@ (8008140 <_printf_float+0x2cc>)
 8007ee0:	f7f8 fd76 	bl	80009d0 <__aeabi_dcmple>
 8007ee4:	bb30      	cbnz	r0, 8007f34 <_printf_float+0xc0>
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2300      	movs	r3, #0
 8007eea:	4640      	mov	r0, r8
 8007eec:	4649      	mov	r1, r9
 8007eee:	f7f8 fd65 	bl	80009bc <__aeabi_dcmplt>
 8007ef2:	b110      	cbz	r0, 8007efa <_printf_float+0x86>
 8007ef4:	232d      	movs	r3, #45	@ 0x2d
 8007ef6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007efa:	4a92      	ldr	r2, [pc, #584]	@ (8008144 <_printf_float+0x2d0>)
 8007efc:	4b92      	ldr	r3, [pc, #584]	@ (8008148 <_printf_float+0x2d4>)
 8007efe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f02:	bf94      	ite	ls
 8007f04:	4690      	movls	r8, r2
 8007f06:	4698      	movhi	r8, r3
 8007f08:	2303      	movs	r3, #3
 8007f0a:	f04f 0900 	mov.w	r9, #0
 8007f0e:	6123      	str	r3, [r4, #16]
 8007f10:	f02b 0304 	bic.w	r3, fp, #4
 8007f14:	6023      	str	r3, [r4, #0]
 8007f16:	4633      	mov	r3, r6
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	9700      	str	r7, [sp, #0]
 8007f1e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007f20:	f000 f9d4 	bl	80082cc <_printf_common>
 8007f24:	3001      	adds	r0, #1
 8007f26:	f040 8090 	bne.w	800804a <_printf_float+0x1d6>
 8007f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2e:	b011      	add	sp, #68	@ 0x44
 8007f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f34:	4642      	mov	r2, r8
 8007f36:	464b      	mov	r3, r9
 8007f38:	4640      	mov	r0, r8
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	f7f8 fd66 	bl	8000a0c <__aeabi_dcmpun>
 8007f40:	b148      	cbz	r0, 8007f56 <_printf_float+0xe2>
 8007f42:	464b      	mov	r3, r9
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bfb8      	it	lt
 8007f48:	232d      	movlt	r3, #45	@ 0x2d
 8007f4a:	4a80      	ldr	r2, [pc, #512]	@ (800814c <_printf_float+0x2d8>)
 8007f4c:	bfb8      	it	lt
 8007f4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f52:	4b7f      	ldr	r3, [pc, #508]	@ (8008150 <_printf_float+0x2dc>)
 8007f54:	e7d3      	b.n	8007efe <_printf_float+0x8a>
 8007f56:	6863      	ldr	r3, [r4, #4]
 8007f58:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	d13f      	bne.n	8007fe0 <_printf_float+0x16c>
 8007f60:	2306      	movs	r3, #6
 8007f62:	6063      	str	r3, [r4, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007f6a:	6023      	str	r3, [r4, #0]
 8007f6c:	9206      	str	r2, [sp, #24]
 8007f6e:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f70:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007f74:	aa0d      	add	r2, sp, #52	@ 0x34
 8007f76:	9203      	str	r2, [sp, #12]
 8007f78:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007f7c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007f80:	6863      	ldr	r3, [r4, #4]
 8007f82:	4642      	mov	r2, r8
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	4628      	mov	r0, r5
 8007f88:	464b      	mov	r3, r9
 8007f8a:	910a      	str	r1, [sp, #40]	@ 0x28
 8007f8c:	f7ff fed4 	bl	8007d38 <__cvt>
 8007f90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f92:	4680      	mov	r8, r0
 8007f94:	2947      	cmp	r1, #71	@ 0x47
 8007f96:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007f98:	d128      	bne.n	8007fec <_printf_float+0x178>
 8007f9a:	1cc8      	adds	r0, r1, #3
 8007f9c:	db02      	blt.n	8007fa4 <_printf_float+0x130>
 8007f9e:	6863      	ldr	r3, [r4, #4]
 8007fa0:	4299      	cmp	r1, r3
 8007fa2:	dd40      	ble.n	8008026 <_printf_float+0x1b2>
 8007fa4:	f1aa 0a02 	sub.w	sl, sl, #2
 8007fa8:	fa5f fa8a 	uxtb.w	sl, sl
 8007fac:	4652      	mov	r2, sl
 8007fae:	3901      	subs	r1, #1
 8007fb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007fb4:	910d      	str	r1, [sp, #52]	@ 0x34
 8007fb6:	f7ff ff23 	bl	8007e00 <__exponent>
 8007fba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007fbc:	4681      	mov	r9, r0
 8007fbe:	1813      	adds	r3, r2, r0
 8007fc0:	2a01      	cmp	r2, #1
 8007fc2:	6123      	str	r3, [r4, #16]
 8007fc4:	dc02      	bgt.n	8007fcc <_printf_float+0x158>
 8007fc6:	6822      	ldr	r2, [r4, #0]
 8007fc8:	07d2      	lsls	r2, r2, #31
 8007fca:	d501      	bpl.n	8007fd0 <_printf_float+0x15c>
 8007fcc:	3301      	adds	r3, #1
 8007fce:	6123      	str	r3, [r4, #16]
 8007fd0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d09e      	beq.n	8007f16 <_printf_float+0xa2>
 8007fd8:	232d      	movs	r3, #45	@ 0x2d
 8007fda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fde:	e79a      	b.n	8007f16 <_printf_float+0xa2>
 8007fe0:	2947      	cmp	r1, #71	@ 0x47
 8007fe2:	d1bf      	bne.n	8007f64 <_printf_float+0xf0>
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1bd      	bne.n	8007f64 <_printf_float+0xf0>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e7ba      	b.n	8007f62 <_printf_float+0xee>
 8007fec:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ff0:	d9dc      	bls.n	8007fac <_printf_float+0x138>
 8007ff2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ff6:	d118      	bne.n	800802a <_printf_float+0x1b6>
 8007ff8:	2900      	cmp	r1, #0
 8007ffa:	6863      	ldr	r3, [r4, #4]
 8007ffc:	dd0b      	ble.n	8008016 <_printf_float+0x1a2>
 8007ffe:	6121      	str	r1, [r4, #16]
 8008000:	b913      	cbnz	r3, 8008008 <_printf_float+0x194>
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	07d0      	lsls	r0, r2, #31
 8008006:	d502      	bpl.n	800800e <_printf_float+0x19a>
 8008008:	3301      	adds	r3, #1
 800800a:	440b      	add	r3, r1
 800800c:	6123      	str	r3, [r4, #16]
 800800e:	f04f 0900 	mov.w	r9, #0
 8008012:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008014:	e7dc      	b.n	8007fd0 <_printf_float+0x15c>
 8008016:	b913      	cbnz	r3, 800801e <_printf_float+0x1aa>
 8008018:	6822      	ldr	r2, [r4, #0]
 800801a:	07d2      	lsls	r2, r2, #31
 800801c:	d501      	bpl.n	8008022 <_printf_float+0x1ae>
 800801e:	3302      	adds	r3, #2
 8008020:	e7f4      	b.n	800800c <_printf_float+0x198>
 8008022:	2301      	movs	r3, #1
 8008024:	e7f2      	b.n	800800c <_printf_float+0x198>
 8008026:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800802a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800802c:	4299      	cmp	r1, r3
 800802e:	db05      	blt.n	800803c <_printf_float+0x1c8>
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	6121      	str	r1, [r4, #16]
 8008034:	07d8      	lsls	r0, r3, #31
 8008036:	d5ea      	bpl.n	800800e <_printf_float+0x19a>
 8008038:	1c4b      	adds	r3, r1, #1
 800803a:	e7e7      	b.n	800800c <_printf_float+0x198>
 800803c:	2900      	cmp	r1, #0
 800803e:	bfcc      	ite	gt
 8008040:	2201      	movgt	r2, #1
 8008042:	f1c1 0202 	rsble	r2, r1, #2
 8008046:	4413      	add	r3, r2
 8008048:	e7e0      	b.n	800800c <_printf_float+0x198>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	055a      	lsls	r2, r3, #21
 800804e:	d407      	bmi.n	8008060 <_printf_float+0x1ec>
 8008050:	6923      	ldr	r3, [r4, #16]
 8008052:	4642      	mov	r2, r8
 8008054:	4631      	mov	r1, r6
 8008056:	4628      	mov	r0, r5
 8008058:	47b8      	blx	r7
 800805a:	3001      	adds	r0, #1
 800805c:	d12b      	bne.n	80080b6 <_printf_float+0x242>
 800805e:	e764      	b.n	8007f2a <_printf_float+0xb6>
 8008060:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008064:	f240 80dc 	bls.w	8008220 <_printf_float+0x3ac>
 8008068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800806c:	2200      	movs	r2, #0
 800806e:	2300      	movs	r3, #0
 8008070:	f7f8 fc9a 	bl	80009a8 <__aeabi_dcmpeq>
 8008074:	2800      	cmp	r0, #0
 8008076:	d033      	beq.n	80080e0 <_printf_float+0x26c>
 8008078:	2301      	movs	r3, #1
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	4a35      	ldr	r2, [pc, #212]	@ (8008154 <_printf_float+0x2e0>)
 8008080:	47b8      	blx	r7
 8008082:	3001      	adds	r0, #1
 8008084:	f43f af51 	beq.w	8007f2a <_printf_float+0xb6>
 8008088:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800808c:	4543      	cmp	r3, r8
 800808e:	db02      	blt.n	8008096 <_printf_float+0x222>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	07d8      	lsls	r0, r3, #31
 8008094:	d50f      	bpl.n	80080b6 <_printf_float+0x242>
 8008096:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800809a:	4631      	mov	r1, r6
 800809c:	4628      	mov	r0, r5
 800809e:	47b8      	blx	r7
 80080a0:	3001      	adds	r0, #1
 80080a2:	f43f af42 	beq.w	8007f2a <_printf_float+0xb6>
 80080a6:	f04f 0900 	mov.w	r9, #0
 80080aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80080ae:	f104 0a1a 	add.w	sl, r4, #26
 80080b2:	45c8      	cmp	r8, r9
 80080b4:	dc09      	bgt.n	80080ca <_printf_float+0x256>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	079b      	lsls	r3, r3, #30
 80080ba:	f100 8102 	bmi.w	80082c2 <_printf_float+0x44e>
 80080be:	68e0      	ldr	r0, [r4, #12]
 80080c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080c2:	4298      	cmp	r0, r3
 80080c4:	bfb8      	it	lt
 80080c6:	4618      	movlt	r0, r3
 80080c8:	e731      	b.n	8007f2e <_printf_float+0xba>
 80080ca:	2301      	movs	r3, #1
 80080cc:	4652      	mov	r2, sl
 80080ce:	4631      	mov	r1, r6
 80080d0:	4628      	mov	r0, r5
 80080d2:	47b8      	blx	r7
 80080d4:	3001      	adds	r0, #1
 80080d6:	f43f af28 	beq.w	8007f2a <_printf_float+0xb6>
 80080da:	f109 0901 	add.w	r9, r9, #1
 80080de:	e7e8      	b.n	80080b2 <_printf_float+0x23e>
 80080e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	dc38      	bgt.n	8008158 <_printf_float+0x2e4>
 80080e6:	2301      	movs	r3, #1
 80080e8:	4631      	mov	r1, r6
 80080ea:	4628      	mov	r0, r5
 80080ec:	4a19      	ldr	r2, [pc, #100]	@ (8008154 <_printf_float+0x2e0>)
 80080ee:	47b8      	blx	r7
 80080f0:	3001      	adds	r0, #1
 80080f2:	f43f af1a 	beq.w	8007f2a <_printf_float+0xb6>
 80080f6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80080fa:	ea59 0303 	orrs.w	r3, r9, r3
 80080fe:	d102      	bne.n	8008106 <_printf_float+0x292>
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	07d9      	lsls	r1, r3, #31
 8008104:	d5d7      	bpl.n	80080b6 <_printf_float+0x242>
 8008106:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	f43f af0a 	beq.w	8007f2a <_printf_float+0xb6>
 8008116:	f04f 0a00 	mov.w	sl, #0
 800811a:	f104 0b1a 	add.w	fp, r4, #26
 800811e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008120:	425b      	negs	r3, r3
 8008122:	4553      	cmp	r3, sl
 8008124:	dc01      	bgt.n	800812a <_printf_float+0x2b6>
 8008126:	464b      	mov	r3, r9
 8008128:	e793      	b.n	8008052 <_printf_float+0x1de>
 800812a:	2301      	movs	r3, #1
 800812c:	465a      	mov	r2, fp
 800812e:	4631      	mov	r1, r6
 8008130:	4628      	mov	r0, r5
 8008132:	47b8      	blx	r7
 8008134:	3001      	adds	r0, #1
 8008136:	f43f aef8 	beq.w	8007f2a <_printf_float+0xb6>
 800813a:	f10a 0a01 	add.w	sl, sl, #1
 800813e:	e7ee      	b.n	800811e <_printf_float+0x2aa>
 8008140:	7fefffff 	.word	0x7fefffff
 8008144:	0800dede 	.word	0x0800dede
 8008148:	0800dee2 	.word	0x0800dee2
 800814c:	0800dee6 	.word	0x0800dee6
 8008150:	0800deea 	.word	0x0800deea
 8008154:	0800e278 	.word	0x0800e278
 8008158:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800815a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800815e:	4553      	cmp	r3, sl
 8008160:	bfa8      	it	ge
 8008162:	4653      	movge	r3, sl
 8008164:	2b00      	cmp	r3, #0
 8008166:	4699      	mov	r9, r3
 8008168:	dc36      	bgt.n	80081d8 <_printf_float+0x364>
 800816a:	f04f 0b00 	mov.w	fp, #0
 800816e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008172:	f104 021a 	add.w	r2, r4, #26
 8008176:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008178:	930a      	str	r3, [sp, #40]	@ 0x28
 800817a:	eba3 0309 	sub.w	r3, r3, r9
 800817e:	455b      	cmp	r3, fp
 8008180:	dc31      	bgt.n	80081e6 <_printf_float+0x372>
 8008182:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008184:	459a      	cmp	sl, r3
 8008186:	dc3a      	bgt.n	80081fe <_printf_float+0x38a>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	07da      	lsls	r2, r3, #31
 800818c:	d437      	bmi.n	80081fe <_printf_float+0x38a>
 800818e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008190:	ebaa 0903 	sub.w	r9, sl, r3
 8008194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008196:	ebaa 0303 	sub.w	r3, sl, r3
 800819a:	4599      	cmp	r9, r3
 800819c:	bfa8      	it	ge
 800819e:	4699      	movge	r9, r3
 80081a0:	f1b9 0f00 	cmp.w	r9, #0
 80081a4:	dc33      	bgt.n	800820e <_printf_float+0x39a>
 80081a6:	f04f 0800 	mov.w	r8, #0
 80081aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ae:	f104 0b1a 	add.w	fp, r4, #26
 80081b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081b4:	ebaa 0303 	sub.w	r3, sl, r3
 80081b8:	eba3 0309 	sub.w	r3, r3, r9
 80081bc:	4543      	cmp	r3, r8
 80081be:	f77f af7a 	ble.w	80080b6 <_printf_float+0x242>
 80081c2:	2301      	movs	r3, #1
 80081c4:	465a      	mov	r2, fp
 80081c6:	4631      	mov	r1, r6
 80081c8:	4628      	mov	r0, r5
 80081ca:	47b8      	blx	r7
 80081cc:	3001      	adds	r0, #1
 80081ce:	f43f aeac 	beq.w	8007f2a <_printf_float+0xb6>
 80081d2:	f108 0801 	add.w	r8, r8, #1
 80081d6:	e7ec      	b.n	80081b2 <_printf_float+0x33e>
 80081d8:	4642      	mov	r2, r8
 80081da:	4631      	mov	r1, r6
 80081dc:	4628      	mov	r0, r5
 80081de:	47b8      	blx	r7
 80081e0:	3001      	adds	r0, #1
 80081e2:	d1c2      	bne.n	800816a <_printf_float+0x2f6>
 80081e4:	e6a1      	b.n	8007f2a <_printf_float+0xb6>
 80081e6:	2301      	movs	r3, #1
 80081e8:	4631      	mov	r1, r6
 80081ea:	4628      	mov	r0, r5
 80081ec:	920a      	str	r2, [sp, #40]	@ 0x28
 80081ee:	47b8      	blx	r7
 80081f0:	3001      	adds	r0, #1
 80081f2:	f43f ae9a 	beq.w	8007f2a <_printf_float+0xb6>
 80081f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081f8:	f10b 0b01 	add.w	fp, fp, #1
 80081fc:	e7bb      	b.n	8008176 <_printf_float+0x302>
 80081fe:	4631      	mov	r1, r6
 8008200:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008204:	4628      	mov	r0, r5
 8008206:	47b8      	blx	r7
 8008208:	3001      	adds	r0, #1
 800820a:	d1c0      	bne.n	800818e <_printf_float+0x31a>
 800820c:	e68d      	b.n	8007f2a <_printf_float+0xb6>
 800820e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008210:	464b      	mov	r3, r9
 8008212:	4631      	mov	r1, r6
 8008214:	4628      	mov	r0, r5
 8008216:	4442      	add	r2, r8
 8008218:	47b8      	blx	r7
 800821a:	3001      	adds	r0, #1
 800821c:	d1c3      	bne.n	80081a6 <_printf_float+0x332>
 800821e:	e684      	b.n	8007f2a <_printf_float+0xb6>
 8008220:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008224:	f1ba 0f01 	cmp.w	sl, #1
 8008228:	dc01      	bgt.n	800822e <_printf_float+0x3ba>
 800822a:	07db      	lsls	r3, r3, #31
 800822c:	d536      	bpl.n	800829c <_printf_float+0x428>
 800822e:	2301      	movs	r3, #1
 8008230:	4642      	mov	r2, r8
 8008232:	4631      	mov	r1, r6
 8008234:	4628      	mov	r0, r5
 8008236:	47b8      	blx	r7
 8008238:	3001      	adds	r0, #1
 800823a:	f43f ae76 	beq.w	8007f2a <_printf_float+0xb6>
 800823e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008242:	4631      	mov	r1, r6
 8008244:	4628      	mov	r0, r5
 8008246:	47b8      	blx	r7
 8008248:	3001      	adds	r0, #1
 800824a:	f43f ae6e 	beq.w	8007f2a <_printf_float+0xb6>
 800824e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008252:	2200      	movs	r2, #0
 8008254:	2300      	movs	r3, #0
 8008256:	f10a 3aff 	add.w	sl, sl, #4294967295
 800825a:	f7f8 fba5 	bl	80009a8 <__aeabi_dcmpeq>
 800825e:	b9c0      	cbnz	r0, 8008292 <_printf_float+0x41e>
 8008260:	4653      	mov	r3, sl
 8008262:	f108 0201 	add.w	r2, r8, #1
 8008266:	4631      	mov	r1, r6
 8008268:	4628      	mov	r0, r5
 800826a:	47b8      	blx	r7
 800826c:	3001      	adds	r0, #1
 800826e:	d10c      	bne.n	800828a <_printf_float+0x416>
 8008270:	e65b      	b.n	8007f2a <_printf_float+0xb6>
 8008272:	2301      	movs	r3, #1
 8008274:	465a      	mov	r2, fp
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	47b8      	blx	r7
 800827c:	3001      	adds	r0, #1
 800827e:	f43f ae54 	beq.w	8007f2a <_printf_float+0xb6>
 8008282:	f108 0801 	add.w	r8, r8, #1
 8008286:	45d0      	cmp	r8, sl
 8008288:	dbf3      	blt.n	8008272 <_printf_float+0x3fe>
 800828a:	464b      	mov	r3, r9
 800828c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008290:	e6e0      	b.n	8008054 <_printf_float+0x1e0>
 8008292:	f04f 0800 	mov.w	r8, #0
 8008296:	f104 0b1a 	add.w	fp, r4, #26
 800829a:	e7f4      	b.n	8008286 <_printf_float+0x412>
 800829c:	2301      	movs	r3, #1
 800829e:	4642      	mov	r2, r8
 80082a0:	e7e1      	b.n	8008266 <_printf_float+0x3f2>
 80082a2:	2301      	movs	r3, #1
 80082a4:	464a      	mov	r2, r9
 80082a6:	4631      	mov	r1, r6
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b8      	blx	r7
 80082ac:	3001      	adds	r0, #1
 80082ae:	f43f ae3c 	beq.w	8007f2a <_printf_float+0xb6>
 80082b2:	f108 0801 	add.w	r8, r8, #1
 80082b6:	68e3      	ldr	r3, [r4, #12]
 80082b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80082ba:	1a5b      	subs	r3, r3, r1
 80082bc:	4543      	cmp	r3, r8
 80082be:	dcf0      	bgt.n	80082a2 <_printf_float+0x42e>
 80082c0:	e6fd      	b.n	80080be <_printf_float+0x24a>
 80082c2:	f04f 0800 	mov.w	r8, #0
 80082c6:	f104 0919 	add.w	r9, r4, #25
 80082ca:	e7f4      	b.n	80082b6 <_printf_float+0x442>

080082cc <_printf_common>:
 80082cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	4616      	mov	r6, r2
 80082d2:	4698      	mov	r8, r3
 80082d4:	688a      	ldr	r2, [r1, #8]
 80082d6:	690b      	ldr	r3, [r1, #16]
 80082d8:	4607      	mov	r7, r0
 80082da:	4293      	cmp	r3, r2
 80082dc:	bfb8      	it	lt
 80082de:	4613      	movlt	r3, r2
 80082e0:	6033      	str	r3, [r6, #0]
 80082e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082e6:	460c      	mov	r4, r1
 80082e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082ec:	b10a      	cbz	r2, 80082f2 <_printf_common+0x26>
 80082ee:	3301      	adds	r3, #1
 80082f0:	6033      	str	r3, [r6, #0]
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	0699      	lsls	r1, r3, #26
 80082f6:	bf42      	ittt	mi
 80082f8:	6833      	ldrmi	r3, [r6, #0]
 80082fa:	3302      	addmi	r3, #2
 80082fc:	6033      	strmi	r3, [r6, #0]
 80082fe:	6825      	ldr	r5, [r4, #0]
 8008300:	f015 0506 	ands.w	r5, r5, #6
 8008304:	d106      	bne.n	8008314 <_printf_common+0x48>
 8008306:	f104 0a19 	add.w	sl, r4, #25
 800830a:	68e3      	ldr	r3, [r4, #12]
 800830c:	6832      	ldr	r2, [r6, #0]
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	42ab      	cmp	r3, r5
 8008312:	dc2b      	bgt.n	800836c <_printf_common+0xa0>
 8008314:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008318:	6822      	ldr	r2, [r4, #0]
 800831a:	3b00      	subs	r3, #0
 800831c:	bf18      	it	ne
 800831e:	2301      	movne	r3, #1
 8008320:	0692      	lsls	r2, r2, #26
 8008322:	d430      	bmi.n	8008386 <_printf_common+0xba>
 8008324:	4641      	mov	r1, r8
 8008326:	4638      	mov	r0, r7
 8008328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800832c:	47c8      	blx	r9
 800832e:	3001      	adds	r0, #1
 8008330:	d023      	beq.n	800837a <_printf_common+0xae>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	6922      	ldr	r2, [r4, #16]
 8008336:	f003 0306 	and.w	r3, r3, #6
 800833a:	2b04      	cmp	r3, #4
 800833c:	bf14      	ite	ne
 800833e:	2500      	movne	r5, #0
 8008340:	6833      	ldreq	r3, [r6, #0]
 8008342:	f04f 0600 	mov.w	r6, #0
 8008346:	bf08      	it	eq
 8008348:	68e5      	ldreq	r5, [r4, #12]
 800834a:	f104 041a 	add.w	r4, r4, #26
 800834e:	bf08      	it	eq
 8008350:	1aed      	subeq	r5, r5, r3
 8008352:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008356:	bf08      	it	eq
 8008358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800835c:	4293      	cmp	r3, r2
 800835e:	bfc4      	itt	gt
 8008360:	1a9b      	subgt	r3, r3, r2
 8008362:	18ed      	addgt	r5, r5, r3
 8008364:	42b5      	cmp	r5, r6
 8008366:	d11a      	bne.n	800839e <_printf_common+0xd2>
 8008368:	2000      	movs	r0, #0
 800836a:	e008      	b.n	800837e <_printf_common+0xb2>
 800836c:	2301      	movs	r3, #1
 800836e:	4652      	mov	r2, sl
 8008370:	4641      	mov	r1, r8
 8008372:	4638      	mov	r0, r7
 8008374:	47c8      	blx	r9
 8008376:	3001      	adds	r0, #1
 8008378:	d103      	bne.n	8008382 <_printf_common+0xb6>
 800837a:	f04f 30ff 	mov.w	r0, #4294967295
 800837e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008382:	3501      	adds	r5, #1
 8008384:	e7c1      	b.n	800830a <_printf_common+0x3e>
 8008386:	2030      	movs	r0, #48	@ 0x30
 8008388:	18e1      	adds	r1, r4, r3
 800838a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008394:	4422      	add	r2, r4
 8008396:	3302      	adds	r3, #2
 8008398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800839c:	e7c2      	b.n	8008324 <_printf_common+0x58>
 800839e:	2301      	movs	r3, #1
 80083a0:	4622      	mov	r2, r4
 80083a2:	4641      	mov	r1, r8
 80083a4:	4638      	mov	r0, r7
 80083a6:	47c8      	blx	r9
 80083a8:	3001      	adds	r0, #1
 80083aa:	d0e6      	beq.n	800837a <_printf_common+0xae>
 80083ac:	3601      	adds	r6, #1
 80083ae:	e7d9      	b.n	8008364 <_printf_common+0x98>

080083b0 <_printf_i>:
 80083b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083b4:	7e0f      	ldrb	r7, [r1, #24]
 80083b6:	4691      	mov	r9, r2
 80083b8:	2f78      	cmp	r7, #120	@ 0x78
 80083ba:	4680      	mov	r8, r0
 80083bc:	460c      	mov	r4, r1
 80083be:	469a      	mov	sl, r3
 80083c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083c6:	d807      	bhi.n	80083d8 <_printf_i+0x28>
 80083c8:	2f62      	cmp	r7, #98	@ 0x62
 80083ca:	d80a      	bhi.n	80083e2 <_printf_i+0x32>
 80083cc:	2f00      	cmp	r7, #0
 80083ce:	f000 80d3 	beq.w	8008578 <_printf_i+0x1c8>
 80083d2:	2f58      	cmp	r7, #88	@ 0x58
 80083d4:	f000 80ba 	beq.w	800854c <_printf_i+0x19c>
 80083d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083e0:	e03a      	b.n	8008458 <_printf_i+0xa8>
 80083e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083e6:	2b15      	cmp	r3, #21
 80083e8:	d8f6      	bhi.n	80083d8 <_printf_i+0x28>
 80083ea:	a101      	add	r1, pc, #4	@ (adr r1, 80083f0 <_printf_i+0x40>)
 80083ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083f0:	08008449 	.word	0x08008449
 80083f4:	0800845d 	.word	0x0800845d
 80083f8:	080083d9 	.word	0x080083d9
 80083fc:	080083d9 	.word	0x080083d9
 8008400:	080083d9 	.word	0x080083d9
 8008404:	080083d9 	.word	0x080083d9
 8008408:	0800845d 	.word	0x0800845d
 800840c:	080083d9 	.word	0x080083d9
 8008410:	080083d9 	.word	0x080083d9
 8008414:	080083d9 	.word	0x080083d9
 8008418:	080083d9 	.word	0x080083d9
 800841c:	0800855f 	.word	0x0800855f
 8008420:	08008487 	.word	0x08008487
 8008424:	08008519 	.word	0x08008519
 8008428:	080083d9 	.word	0x080083d9
 800842c:	080083d9 	.word	0x080083d9
 8008430:	08008581 	.word	0x08008581
 8008434:	080083d9 	.word	0x080083d9
 8008438:	08008487 	.word	0x08008487
 800843c:	080083d9 	.word	0x080083d9
 8008440:	080083d9 	.word	0x080083d9
 8008444:	08008521 	.word	0x08008521
 8008448:	6833      	ldr	r3, [r6, #0]
 800844a:	1d1a      	adds	r2, r3, #4
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6032      	str	r2, [r6, #0]
 8008450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008458:	2301      	movs	r3, #1
 800845a:	e09e      	b.n	800859a <_printf_i+0x1ea>
 800845c:	6833      	ldr	r3, [r6, #0]
 800845e:	6820      	ldr	r0, [r4, #0]
 8008460:	1d19      	adds	r1, r3, #4
 8008462:	6031      	str	r1, [r6, #0]
 8008464:	0606      	lsls	r6, r0, #24
 8008466:	d501      	bpl.n	800846c <_printf_i+0xbc>
 8008468:	681d      	ldr	r5, [r3, #0]
 800846a:	e003      	b.n	8008474 <_printf_i+0xc4>
 800846c:	0645      	lsls	r5, r0, #25
 800846e:	d5fb      	bpl.n	8008468 <_printf_i+0xb8>
 8008470:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008474:	2d00      	cmp	r5, #0
 8008476:	da03      	bge.n	8008480 <_printf_i+0xd0>
 8008478:	232d      	movs	r3, #45	@ 0x2d
 800847a:	426d      	negs	r5, r5
 800847c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008480:	230a      	movs	r3, #10
 8008482:	4859      	ldr	r0, [pc, #356]	@ (80085e8 <_printf_i+0x238>)
 8008484:	e011      	b.n	80084aa <_printf_i+0xfa>
 8008486:	6821      	ldr	r1, [r4, #0]
 8008488:	6833      	ldr	r3, [r6, #0]
 800848a:	0608      	lsls	r0, r1, #24
 800848c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008490:	d402      	bmi.n	8008498 <_printf_i+0xe8>
 8008492:	0649      	lsls	r1, r1, #25
 8008494:	bf48      	it	mi
 8008496:	b2ad      	uxthmi	r5, r5
 8008498:	2f6f      	cmp	r7, #111	@ 0x6f
 800849a:	6033      	str	r3, [r6, #0]
 800849c:	bf14      	ite	ne
 800849e:	230a      	movne	r3, #10
 80084a0:	2308      	moveq	r3, #8
 80084a2:	4851      	ldr	r0, [pc, #324]	@ (80085e8 <_printf_i+0x238>)
 80084a4:	2100      	movs	r1, #0
 80084a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084aa:	6866      	ldr	r6, [r4, #4]
 80084ac:	2e00      	cmp	r6, #0
 80084ae:	bfa8      	it	ge
 80084b0:	6821      	ldrge	r1, [r4, #0]
 80084b2:	60a6      	str	r6, [r4, #8]
 80084b4:	bfa4      	itt	ge
 80084b6:	f021 0104 	bicge.w	r1, r1, #4
 80084ba:	6021      	strge	r1, [r4, #0]
 80084bc:	b90d      	cbnz	r5, 80084c2 <_printf_i+0x112>
 80084be:	2e00      	cmp	r6, #0
 80084c0:	d04b      	beq.n	800855a <_printf_i+0x1aa>
 80084c2:	4616      	mov	r6, r2
 80084c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80084c8:	fb03 5711 	mls	r7, r3, r1, r5
 80084cc:	5dc7      	ldrb	r7, [r0, r7]
 80084ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084d2:	462f      	mov	r7, r5
 80084d4:	42bb      	cmp	r3, r7
 80084d6:	460d      	mov	r5, r1
 80084d8:	d9f4      	bls.n	80084c4 <_printf_i+0x114>
 80084da:	2b08      	cmp	r3, #8
 80084dc:	d10b      	bne.n	80084f6 <_printf_i+0x146>
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	07df      	lsls	r7, r3, #31
 80084e2:	d508      	bpl.n	80084f6 <_printf_i+0x146>
 80084e4:	6923      	ldr	r3, [r4, #16]
 80084e6:	6861      	ldr	r1, [r4, #4]
 80084e8:	4299      	cmp	r1, r3
 80084ea:	bfde      	ittt	le
 80084ec:	2330      	movle	r3, #48	@ 0x30
 80084ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084f6:	1b92      	subs	r2, r2, r6
 80084f8:	6122      	str	r2, [r4, #16]
 80084fa:	464b      	mov	r3, r9
 80084fc:	4621      	mov	r1, r4
 80084fe:	4640      	mov	r0, r8
 8008500:	f8cd a000 	str.w	sl, [sp]
 8008504:	aa03      	add	r2, sp, #12
 8008506:	f7ff fee1 	bl	80082cc <_printf_common>
 800850a:	3001      	adds	r0, #1
 800850c:	d14a      	bne.n	80085a4 <_printf_i+0x1f4>
 800850e:	f04f 30ff 	mov.w	r0, #4294967295
 8008512:	b004      	add	sp, #16
 8008514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	f043 0320 	orr.w	r3, r3, #32
 800851e:	6023      	str	r3, [r4, #0]
 8008520:	2778      	movs	r7, #120	@ 0x78
 8008522:	4832      	ldr	r0, [pc, #200]	@ (80085ec <_printf_i+0x23c>)
 8008524:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	6831      	ldr	r1, [r6, #0]
 800852c:	061f      	lsls	r7, r3, #24
 800852e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008532:	d402      	bmi.n	800853a <_printf_i+0x18a>
 8008534:	065f      	lsls	r7, r3, #25
 8008536:	bf48      	it	mi
 8008538:	b2ad      	uxthmi	r5, r5
 800853a:	6031      	str	r1, [r6, #0]
 800853c:	07d9      	lsls	r1, r3, #31
 800853e:	bf44      	itt	mi
 8008540:	f043 0320 	orrmi.w	r3, r3, #32
 8008544:	6023      	strmi	r3, [r4, #0]
 8008546:	b11d      	cbz	r5, 8008550 <_printf_i+0x1a0>
 8008548:	2310      	movs	r3, #16
 800854a:	e7ab      	b.n	80084a4 <_printf_i+0xf4>
 800854c:	4826      	ldr	r0, [pc, #152]	@ (80085e8 <_printf_i+0x238>)
 800854e:	e7e9      	b.n	8008524 <_printf_i+0x174>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	f023 0320 	bic.w	r3, r3, #32
 8008556:	6023      	str	r3, [r4, #0]
 8008558:	e7f6      	b.n	8008548 <_printf_i+0x198>
 800855a:	4616      	mov	r6, r2
 800855c:	e7bd      	b.n	80084da <_printf_i+0x12a>
 800855e:	6833      	ldr	r3, [r6, #0]
 8008560:	6825      	ldr	r5, [r4, #0]
 8008562:	1d18      	adds	r0, r3, #4
 8008564:	6961      	ldr	r1, [r4, #20]
 8008566:	6030      	str	r0, [r6, #0]
 8008568:	062e      	lsls	r6, r5, #24
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	d501      	bpl.n	8008572 <_printf_i+0x1c2>
 800856e:	6019      	str	r1, [r3, #0]
 8008570:	e002      	b.n	8008578 <_printf_i+0x1c8>
 8008572:	0668      	lsls	r0, r5, #25
 8008574:	d5fb      	bpl.n	800856e <_printf_i+0x1be>
 8008576:	8019      	strh	r1, [r3, #0]
 8008578:	2300      	movs	r3, #0
 800857a:	4616      	mov	r6, r2
 800857c:	6123      	str	r3, [r4, #16]
 800857e:	e7bc      	b.n	80084fa <_printf_i+0x14a>
 8008580:	6833      	ldr	r3, [r6, #0]
 8008582:	2100      	movs	r1, #0
 8008584:	1d1a      	adds	r2, r3, #4
 8008586:	6032      	str	r2, [r6, #0]
 8008588:	681e      	ldr	r6, [r3, #0]
 800858a:	6862      	ldr	r2, [r4, #4]
 800858c:	4630      	mov	r0, r6
 800858e:	f000 fd26 	bl	8008fde <memchr>
 8008592:	b108      	cbz	r0, 8008598 <_printf_i+0x1e8>
 8008594:	1b80      	subs	r0, r0, r6
 8008596:	6060      	str	r0, [r4, #4]
 8008598:	6863      	ldr	r3, [r4, #4]
 800859a:	6123      	str	r3, [r4, #16]
 800859c:	2300      	movs	r3, #0
 800859e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085a2:	e7aa      	b.n	80084fa <_printf_i+0x14a>
 80085a4:	4632      	mov	r2, r6
 80085a6:	4649      	mov	r1, r9
 80085a8:	4640      	mov	r0, r8
 80085aa:	6923      	ldr	r3, [r4, #16]
 80085ac:	47d0      	blx	sl
 80085ae:	3001      	adds	r0, #1
 80085b0:	d0ad      	beq.n	800850e <_printf_i+0x15e>
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	079b      	lsls	r3, r3, #30
 80085b6:	d413      	bmi.n	80085e0 <_printf_i+0x230>
 80085b8:	68e0      	ldr	r0, [r4, #12]
 80085ba:	9b03      	ldr	r3, [sp, #12]
 80085bc:	4298      	cmp	r0, r3
 80085be:	bfb8      	it	lt
 80085c0:	4618      	movlt	r0, r3
 80085c2:	e7a6      	b.n	8008512 <_printf_i+0x162>
 80085c4:	2301      	movs	r3, #1
 80085c6:	4632      	mov	r2, r6
 80085c8:	4649      	mov	r1, r9
 80085ca:	4640      	mov	r0, r8
 80085cc:	47d0      	blx	sl
 80085ce:	3001      	adds	r0, #1
 80085d0:	d09d      	beq.n	800850e <_printf_i+0x15e>
 80085d2:	3501      	adds	r5, #1
 80085d4:	68e3      	ldr	r3, [r4, #12]
 80085d6:	9903      	ldr	r1, [sp, #12]
 80085d8:	1a5b      	subs	r3, r3, r1
 80085da:	42ab      	cmp	r3, r5
 80085dc:	dcf2      	bgt.n	80085c4 <_printf_i+0x214>
 80085de:	e7eb      	b.n	80085b8 <_printf_i+0x208>
 80085e0:	2500      	movs	r5, #0
 80085e2:	f104 0619 	add.w	r6, r4, #25
 80085e6:	e7f5      	b.n	80085d4 <_printf_i+0x224>
 80085e8:	0800deee 	.word	0x0800deee
 80085ec:	0800deff 	.word	0x0800deff

080085f0 <_scanf_float>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	b087      	sub	sp, #28
 80085f6:	9303      	str	r3, [sp, #12]
 80085f8:	688b      	ldr	r3, [r1, #8]
 80085fa:	4617      	mov	r7, r2
 80085fc:	1e5a      	subs	r2, r3, #1
 80085fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008602:	bf82      	ittt	hi
 8008604:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008608:	eb03 0b05 	addhi.w	fp, r3, r5
 800860c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008610:	460a      	mov	r2, r1
 8008612:	f04f 0500 	mov.w	r5, #0
 8008616:	bf88      	it	hi
 8008618:	608b      	strhi	r3, [r1, #8]
 800861a:	680b      	ldr	r3, [r1, #0]
 800861c:	4680      	mov	r8, r0
 800861e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008622:	f842 3b1c 	str.w	r3, [r2], #28
 8008626:	460c      	mov	r4, r1
 8008628:	bf98      	it	ls
 800862a:	f04f 0b00 	movls.w	fp, #0
 800862e:	4616      	mov	r6, r2
 8008630:	46aa      	mov	sl, r5
 8008632:	46a9      	mov	r9, r5
 8008634:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008638:	9201      	str	r2, [sp, #4]
 800863a:	9502      	str	r5, [sp, #8]
 800863c:	68a2      	ldr	r2, [r4, #8]
 800863e:	b152      	cbz	r2, 8008656 <_scanf_float+0x66>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	2b4e      	cmp	r3, #78	@ 0x4e
 8008646:	d865      	bhi.n	8008714 <_scanf_float+0x124>
 8008648:	2b40      	cmp	r3, #64	@ 0x40
 800864a:	d83d      	bhi.n	80086c8 <_scanf_float+0xd8>
 800864c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008650:	b2c8      	uxtb	r0, r1
 8008652:	280e      	cmp	r0, #14
 8008654:	d93b      	bls.n	80086ce <_scanf_float+0xde>
 8008656:	f1b9 0f00 	cmp.w	r9, #0
 800865a:	d003      	beq.n	8008664 <_scanf_float+0x74>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008668:	f1ba 0f01 	cmp.w	sl, #1
 800866c:	f200 8118 	bhi.w	80088a0 <_scanf_float+0x2b0>
 8008670:	9b01      	ldr	r3, [sp, #4]
 8008672:	429e      	cmp	r6, r3
 8008674:	f200 8109 	bhi.w	800888a <_scanf_float+0x29a>
 8008678:	2001      	movs	r0, #1
 800867a:	b007      	add	sp, #28
 800867c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008680:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008684:	2a0d      	cmp	r2, #13
 8008686:	d8e6      	bhi.n	8008656 <_scanf_float+0x66>
 8008688:	a101      	add	r1, pc, #4	@ (adr r1, 8008690 <_scanf_float+0xa0>)
 800868a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800868e:	bf00      	nop
 8008690:	080087d7 	.word	0x080087d7
 8008694:	08008657 	.word	0x08008657
 8008698:	08008657 	.word	0x08008657
 800869c:	08008657 	.word	0x08008657
 80086a0:	08008837 	.word	0x08008837
 80086a4:	0800880f 	.word	0x0800880f
 80086a8:	08008657 	.word	0x08008657
 80086ac:	08008657 	.word	0x08008657
 80086b0:	080087e5 	.word	0x080087e5
 80086b4:	08008657 	.word	0x08008657
 80086b8:	08008657 	.word	0x08008657
 80086bc:	08008657 	.word	0x08008657
 80086c0:	08008657 	.word	0x08008657
 80086c4:	0800879d 	.word	0x0800879d
 80086c8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80086cc:	e7da      	b.n	8008684 <_scanf_float+0x94>
 80086ce:	290e      	cmp	r1, #14
 80086d0:	d8c1      	bhi.n	8008656 <_scanf_float+0x66>
 80086d2:	a001      	add	r0, pc, #4	@ (adr r0, 80086d8 <_scanf_float+0xe8>)
 80086d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80086d8:	0800878d 	.word	0x0800878d
 80086dc:	08008657 	.word	0x08008657
 80086e0:	0800878d 	.word	0x0800878d
 80086e4:	08008823 	.word	0x08008823
 80086e8:	08008657 	.word	0x08008657
 80086ec:	08008735 	.word	0x08008735
 80086f0:	08008773 	.word	0x08008773
 80086f4:	08008773 	.word	0x08008773
 80086f8:	08008773 	.word	0x08008773
 80086fc:	08008773 	.word	0x08008773
 8008700:	08008773 	.word	0x08008773
 8008704:	08008773 	.word	0x08008773
 8008708:	08008773 	.word	0x08008773
 800870c:	08008773 	.word	0x08008773
 8008710:	08008773 	.word	0x08008773
 8008714:	2b6e      	cmp	r3, #110	@ 0x6e
 8008716:	d809      	bhi.n	800872c <_scanf_float+0x13c>
 8008718:	2b60      	cmp	r3, #96	@ 0x60
 800871a:	d8b1      	bhi.n	8008680 <_scanf_float+0x90>
 800871c:	2b54      	cmp	r3, #84	@ 0x54
 800871e:	d07b      	beq.n	8008818 <_scanf_float+0x228>
 8008720:	2b59      	cmp	r3, #89	@ 0x59
 8008722:	d198      	bne.n	8008656 <_scanf_float+0x66>
 8008724:	2d07      	cmp	r5, #7
 8008726:	d196      	bne.n	8008656 <_scanf_float+0x66>
 8008728:	2508      	movs	r5, #8
 800872a:	e02c      	b.n	8008786 <_scanf_float+0x196>
 800872c:	2b74      	cmp	r3, #116	@ 0x74
 800872e:	d073      	beq.n	8008818 <_scanf_float+0x228>
 8008730:	2b79      	cmp	r3, #121	@ 0x79
 8008732:	e7f6      	b.n	8008722 <_scanf_float+0x132>
 8008734:	6821      	ldr	r1, [r4, #0]
 8008736:	05c8      	lsls	r0, r1, #23
 8008738:	d51b      	bpl.n	8008772 <_scanf_float+0x182>
 800873a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800873e:	6021      	str	r1, [r4, #0]
 8008740:	f109 0901 	add.w	r9, r9, #1
 8008744:	f1bb 0f00 	cmp.w	fp, #0
 8008748:	d003      	beq.n	8008752 <_scanf_float+0x162>
 800874a:	3201      	adds	r2, #1
 800874c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008750:	60a2      	str	r2, [r4, #8]
 8008752:	68a3      	ldr	r3, [r4, #8]
 8008754:	3b01      	subs	r3, #1
 8008756:	60a3      	str	r3, [r4, #8]
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	3301      	adds	r3, #1
 800875c:	6123      	str	r3, [r4, #16]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3b01      	subs	r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	607b      	str	r3, [r7, #4]
 8008766:	f340 8087 	ble.w	8008878 <_scanf_float+0x288>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	3301      	adds	r3, #1
 800876e:	603b      	str	r3, [r7, #0]
 8008770:	e764      	b.n	800863c <_scanf_float+0x4c>
 8008772:	eb1a 0105 	adds.w	r1, sl, r5
 8008776:	f47f af6e 	bne.w	8008656 <_scanf_float+0x66>
 800877a:	460d      	mov	r5, r1
 800877c:	468a      	mov	sl, r1
 800877e:	6822      	ldr	r2, [r4, #0]
 8008780:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008784:	6022      	str	r2, [r4, #0]
 8008786:	f806 3b01 	strb.w	r3, [r6], #1
 800878a:	e7e2      	b.n	8008752 <_scanf_float+0x162>
 800878c:	6822      	ldr	r2, [r4, #0]
 800878e:	0610      	lsls	r0, r2, #24
 8008790:	f57f af61 	bpl.w	8008656 <_scanf_float+0x66>
 8008794:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008798:	6022      	str	r2, [r4, #0]
 800879a:	e7f4      	b.n	8008786 <_scanf_float+0x196>
 800879c:	f1ba 0f00 	cmp.w	sl, #0
 80087a0:	d10e      	bne.n	80087c0 <_scanf_float+0x1d0>
 80087a2:	f1b9 0f00 	cmp.w	r9, #0
 80087a6:	d10e      	bne.n	80087c6 <_scanf_float+0x1d6>
 80087a8:	6822      	ldr	r2, [r4, #0]
 80087aa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80087ae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80087b2:	d108      	bne.n	80087c6 <_scanf_float+0x1d6>
 80087b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087b8:	f04f 0a01 	mov.w	sl, #1
 80087bc:	6022      	str	r2, [r4, #0]
 80087be:	e7e2      	b.n	8008786 <_scanf_float+0x196>
 80087c0:	f1ba 0f02 	cmp.w	sl, #2
 80087c4:	d055      	beq.n	8008872 <_scanf_float+0x282>
 80087c6:	2d01      	cmp	r5, #1
 80087c8:	d002      	beq.n	80087d0 <_scanf_float+0x1e0>
 80087ca:	2d04      	cmp	r5, #4
 80087cc:	f47f af43 	bne.w	8008656 <_scanf_float+0x66>
 80087d0:	3501      	adds	r5, #1
 80087d2:	b2ed      	uxtb	r5, r5
 80087d4:	e7d7      	b.n	8008786 <_scanf_float+0x196>
 80087d6:	f1ba 0f01 	cmp.w	sl, #1
 80087da:	f47f af3c 	bne.w	8008656 <_scanf_float+0x66>
 80087de:	f04f 0a02 	mov.w	sl, #2
 80087e2:	e7d0      	b.n	8008786 <_scanf_float+0x196>
 80087e4:	b97d      	cbnz	r5, 8008806 <_scanf_float+0x216>
 80087e6:	f1b9 0f00 	cmp.w	r9, #0
 80087ea:	f47f af37 	bne.w	800865c <_scanf_float+0x6c>
 80087ee:	6822      	ldr	r2, [r4, #0]
 80087f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80087f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80087f8:	f040 8103 	bne.w	8008a02 <_scanf_float+0x412>
 80087fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008800:	2501      	movs	r5, #1
 8008802:	6022      	str	r2, [r4, #0]
 8008804:	e7bf      	b.n	8008786 <_scanf_float+0x196>
 8008806:	2d03      	cmp	r5, #3
 8008808:	d0e2      	beq.n	80087d0 <_scanf_float+0x1e0>
 800880a:	2d05      	cmp	r5, #5
 800880c:	e7de      	b.n	80087cc <_scanf_float+0x1dc>
 800880e:	2d02      	cmp	r5, #2
 8008810:	f47f af21 	bne.w	8008656 <_scanf_float+0x66>
 8008814:	2503      	movs	r5, #3
 8008816:	e7b6      	b.n	8008786 <_scanf_float+0x196>
 8008818:	2d06      	cmp	r5, #6
 800881a:	f47f af1c 	bne.w	8008656 <_scanf_float+0x66>
 800881e:	2507      	movs	r5, #7
 8008820:	e7b1      	b.n	8008786 <_scanf_float+0x196>
 8008822:	6822      	ldr	r2, [r4, #0]
 8008824:	0591      	lsls	r1, r2, #22
 8008826:	f57f af16 	bpl.w	8008656 <_scanf_float+0x66>
 800882a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800882e:	6022      	str	r2, [r4, #0]
 8008830:	f8cd 9008 	str.w	r9, [sp, #8]
 8008834:	e7a7      	b.n	8008786 <_scanf_float+0x196>
 8008836:	6822      	ldr	r2, [r4, #0]
 8008838:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800883c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008840:	d006      	beq.n	8008850 <_scanf_float+0x260>
 8008842:	0550      	lsls	r0, r2, #21
 8008844:	f57f af07 	bpl.w	8008656 <_scanf_float+0x66>
 8008848:	f1b9 0f00 	cmp.w	r9, #0
 800884c:	f000 80d9 	beq.w	8008a02 <_scanf_float+0x412>
 8008850:	0591      	lsls	r1, r2, #22
 8008852:	bf58      	it	pl
 8008854:	9902      	ldrpl	r1, [sp, #8]
 8008856:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800885a:	bf58      	it	pl
 800885c:	eba9 0101 	subpl.w	r1, r9, r1
 8008860:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008864:	f04f 0900 	mov.w	r9, #0
 8008868:	bf58      	it	pl
 800886a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800886e:	6022      	str	r2, [r4, #0]
 8008870:	e789      	b.n	8008786 <_scanf_float+0x196>
 8008872:	f04f 0a03 	mov.w	sl, #3
 8008876:	e786      	b.n	8008786 <_scanf_float+0x196>
 8008878:	4639      	mov	r1, r7
 800887a:	4640      	mov	r0, r8
 800887c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008880:	4798      	blx	r3
 8008882:	2800      	cmp	r0, #0
 8008884:	f43f aeda 	beq.w	800863c <_scanf_float+0x4c>
 8008888:	e6e5      	b.n	8008656 <_scanf_float+0x66>
 800888a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800888e:	463a      	mov	r2, r7
 8008890:	4640      	mov	r0, r8
 8008892:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008896:	4798      	blx	r3
 8008898:	6923      	ldr	r3, [r4, #16]
 800889a:	3b01      	subs	r3, #1
 800889c:	6123      	str	r3, [r4, #16]
 800889e:	e6e7      	b.n	8008670 <_scanf_float+0x80>
 80088a0:	1e6b      	subs	r3, r5, #1
 80088a2:	2b06      	cmp	r3, #6
 80088a4:	d824      	bhi.n	80088f0 <_scanf_float+0x300>
 80088a6:	2d02      	cmp	r5, #2
 80088a8:	d836      	bhi.n	8008918 <_scanf_float+0x328>
 80088aa:	9b01      	ldr	r3, [sp, #4]
 80088ac:	429e      	cmp	r6, r3
 80088ae:	f67f aee3 	bls.w	8008678 <_scanf_float+0x88>
 80088b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088b6:	463a      	mov	r2, r7
 80088b8:	4640      	mov	r0, r8
 80088ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088be:	4798      	blx	r3
 80088c0:	6923      	ldr	r3, [r4, #16]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	6123      	str	r3, [r4, #16]
 80088c6:	e7f0      	b.n	80088aa <_scanf_float+0x2ba>
 80088c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088cc:	463a      	mov	r2, r7
 80088ce:	4640      	mov	r0, r8
 80088d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80088d4:	4798      	blx	r3
 80088d6:	6923      	ldr	r3, [r4, #16]
 80088d8:	3b01      	subs	r3, #1
 80088da:	6123      	str	r3, [r4, #16]
 80088dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088e0:	fa5f fa8a 	uxtb.w	sl, sl
 80088e4:	f1ba 0f02 	cmp.w	sl, #2
 80088e8:	d1ee      	bne.n	80088c8 <_scanf_float+0x2d8>
 80088ea:	3d03      	subs	r5, #3
 80088ec:	b2ed      	uxtb	r5, r5
 80088ee:	1b76      	subs	r6, r6, r5
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	05da      	lsls	r2, r3, #23
 80088f4:	d530      	bpl.n	8008958 <_scanf_float+0x368>
 80088f6:	055b      	lsls	r3, r3, #21
 80088f8:	d511      	bpl.n	800891e <_scanf_float+0x32e>
 80088fa:	9b01      	ldr	r3, [sp, #4]
 80088fc:	429e      	cmp	r6, r3
 80088fe:	f67f aebb 	bls.w	8008678 <_scanf_float+0x88>
 8008902:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008906:	463a      	mov	r2, r7
 8008908:	4640      	mov	r0, r8
 800890a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800890e:	4798      	blx	r3
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	3b01      	subs	r3, #1
 8008914:	6123      	str	r3, [r4, #16]
 8008916:	e7f0      	b.n	80088fa <_scanf_float+0x30a>
 8008918:	46aa      	mov	sl, r5
 800891a:	46b3      	mov	fp, r6
 800891c:	e7de      	b.n	80088dc <_scanf_float+0x2ec>
 800891e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008922:	6923      	ldr	r3, [r4, #16]
 8008924:	2965      	cmp	r1, #101	@ 0x65
 8008926:	f103 33ff 	add.w	r3, r3, #4294967295
 800892a:	f106 35ff 	add.w	r5, r6, #4294967295
 800892e:	6123      	str	r3, [r4, #16]
 8008930:	d00c      	beq.n	800894c <_scanf_float+0x35c>
 8008932:	2945      	cmp	r1, #69	@ 0x45
 8008934:	d00a      	beq.n	800894c <_scanf_float+0x35c>
 8008936:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800893a:	463a      	mov	r2, r7
 800893c:	4640      	mov	r0, r8
 800893e:	4798      	blx	r3
 8008940:	6923      	ldr	r3, [r4, #16]
 8008942:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008946:	3b01      	subs	r3, #1
 8008948:	1eb5      	subs	r5, r6, #2
 800894a:	6123      	str	r3, [r4, #16]
 800894c:	463a      	mov	r2, r7
 800894e:	4640      	mov	r0, r8
 8008950:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008954:	4798      	blx	r3
 8008956:	462e      	mov	r6, r5
 8008958:	6822      	ldr	r2, [r4, #0]
 800895a:	f012 0210 	ands.w	r2, r2, #16
 800895e:	d001      	beq.n	8008964 <_scanf_float+0x374>
 8008960:	2000      	movs	r0, #0
 8008962:	e68a      	b.n	800867a <_scanf_float+0x8a>
 8008964:	7032      	strb	r2, [r6, #0]
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800896c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008970:	d11c      	bne.n	80089ac <_scanf_float+0x3bc>
 8008972:	9b02      	ldr	r3, [sp, #8]
 8008974:	454b      	cmp	r3, r9
 8008976:	eba3 0209 	sub.w	r2, r3, r9
 800897a:	d123      	bne.n	80089c4 <_scanf_float+0x3d4>
 800897c:	2200      	movs	r2, #0
 800897e:	4640      	mov	r0, r8
 8008980:	9901      	ldr	r1, [sp, #4]
 8008982:	f002 fd3d 	bl	800b400 <_strtod_r>
 8008986:	9b03      	ldr	r3, [sp, #12]
 8008988:	6825      	ldr	r5, [r4, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f015 0f02 	tst.w	r5, #2
 8008990:	4606      	mov	r6, r0
 8008992:	460f      	mov	r7, r1
 8008994:	f103 0204 	add.w	r2, r3, #4
 8008998:	d01f      	beq.n	80089da <_scanf_float+0x3ea>
 800899a:	9903      	ldr	r1, [sp, #12]
 800899c:	600a      	str	r2, [r1, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	e9c3 6700 	strd	r6, r7, [r3]
 80089a4:	68e3      	ldr	r3, [r4, #12]
 80089a6:	3301      	adds	r3, #1
 80089a8:	60e3      	str	r3, [r4, #12]
 80089aa:	e7d9      	b.n	8008960 <_scanf_float+0x370>
 80089ac:	9b04      	ldr	r3, [sp, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0e4      	beq.n	800897c <_scanf_float+0x38c>
 80089b2:	9905      	ldr	r1, [sp, #20]
 80089b4:	230a      	movs	r3, #10
 80089b6:	4640      	mov	r0, r8
 80089b8:	3101      	adds	r1, #1
 80089ba:	f002 fda1 	bl	800b500 <_strtol_r>
 80089be:	9b04      	ldr	r3, [sp, #16]
 80089c0:	9e05      	ldr	r6, [sp, #20]
 80089c2:	1ac2      	subs	r2, r0, r3
 80089c4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80089c8:	429e      	cmp	r6, r3
 80089ca:	bf28      	it	cs
 80089cc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80089d0:	4630      	mov	r0, r6
 80089d2:	490d      	ldr	r1, [pc, #52]	@ (8008a08 <_scanf_float+0x418>)
 80089d4:	f000 f94e 	bl	8008c74 <siprintf>
 80089d8:	e7d0      	b.n	800897c <_scanf_float+0x38c>
 80089da:	076d      	lsls	r5, r5, #29
 80089dc:	d4dd      	bmi.n	800899a <_scanf_float+0x3aa>
 80089de:	9d03      	ldr	r5, [sp, #12]
 80089e0:	602a      	str	r2, [r5, #0]
 80089e2:	681d      	ldr	r5, [r3, #0]
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	f7f8 f810 	bl	8000a0c <__aeabi_dcmpun>
 80089ec:	b120      	cbz	r0, 80089f8 <_scanf_float+0x408>
 80089ee:	4807      	ldr	r0, [pc, #28]	@ (8008a0c <_scanf_float+0x41c>)
 80089f0:	f000 fb12 	bl	8009018 <nanf>
 80089f4:	6028      	str	r0, [r5, #0]
 80089f6:	e7d5      	b.n	80089a4 <_scanf_float+0x3b4>
 80089f8:	4630      	mov	r0, r6
 80089fa:	4639      	mov	r1, r7
 80089fc:	f7f8 f864 	bl	8000ac8 <__aeabi_d2f>
 8008a00:	e7f8      	b.n	80089f4 <_scanf_float+0x404>
 8008a02:	f04f 0900 	mov.w	r9, #0
 8008a06:	e62d      	b.n	8008664 <_scanf_float+0x74>
 8008a08:	0800df10 	.word	0x0800df10
 8008a0c:	0800e2c0 	.word	0x0800e2c0

08008a10 <std>:
 8008a10:	2300      	movs	r3, #0
 8008a12:	b510      	push	{r4, lr}
 8008a14:	4604      	mov	r4, r0
 8008a16:	e9c0 3300 	strd	r3, r3, [r0]
 8008a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a1e:	6083      	str	r3, [r0, #8]
 8008a20:	8181      	strh	r1, [r0, #12]
 8008a22:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a24:	81c2      	strh	r2, [r0, #14]
 8008a26:	6183      	str	r3, [r0, #24]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	2208      	movs	r2, #8
 8008a2c:	305c      	adds	r0, #92	@ 0x5c
 8008a2e:	f000 fa45 	bl	8008ebc <memset>
 8008a32:	4b0d      	ldr	r3, [pc, #52]	@ (8008a68 <std+0x58>)
 8008a34:	6224      	str	r4, [r4, #32]
 8008a36:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a38:	4b0c      	ldr	r3, [pc, #48]	@ (8008a6c <std+0x5c>)
 8008a3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a70 <std+0x60>)
 8008a3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a40:	4b0c      	ldr	r3, [pc, #48]	@ (8008a74 <std+0x64>)
 8008a42:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a44:	4b0c      	ldr	r3, [pc, #48]	@ (8008a78 <std+0x68>)
 8008a46:	429c      	cmp	r4, r3
 8008a48:	d006      	beq.n	8008a58 <std+0x48>
 8008a4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a4e:	4294      	cmp	r4, r2
 8008a50:	d002      	beq.n	8008a58 <std+0x48>
 8008a52:	33d0      	adds	r3, #208	@ 0xd0
 8008a54:	429c      	cmp	r4, r3
 8008a56:	d105      	bne.n	8008a64 <std+0x54>
 8008a58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a60:	f000 baba 	b.w	8008fd8 <__retarget_lock_init_recursive>
 8008a64:	bd10      	pop	{r4, pc}
 8008a66:	bf00      	nop
 8008a68:	08008d09 	.word	0x08008d09
 8008a6c:	08008d2f 	.word	0x08008d2f
 8008a70:	08008d67 	.word	0x08008d67
 8008a74:	08008d8b 	.word	0x08008d8b
 8008a78:	200005a8 	.word	0x200005a8

08008a7c <stdio_exit_handler>:
 8008a7c:	4a02      	ldr	r2, [pc, #8]	@ (8008a88 <stdio_exit_handler+0xc>)
 8008a7e:	4903      	ldr	r1, [pc, #12]	@ (8008a8c <stdio_exit_handler+0x10>)
 8008a80:	4803      	ldr	r0, [pc, #12]	@ (8008a90 <stdio_exit_handler+0x14>)
 8008a82:	f000 b869 	b.w	8008b58 <_fwalk_sglue>
 8008a86:	bf00      	nop
 8008a88:	2000001c 	.word	0x2000001c
 8008a8c:	0800c161 	.word	0x0800c161
 8008a90:	2000002c 	.word	0x2000002c

08008a94 <cleanup_stdio>:
 8008a94:	6841      	ldr	r1, [r0, #4]
 8008a96:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac8 <cleanup_stdio+0x34>)
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	4299      	cmp	r1, r3
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	d001      	beq.n	8008aa4 <cleanup_stdio+0x10>
 8008aa0:	f003 fb5e 	bl	800c160 <_fflush_r>
 8008aa4:	68a1      	ldr	r1, [r4, #8]
 8008aa6:	4b09      	ldr	r3, [pc, #36]	@ (8008acc <cleanup_stdio+0x38>)
 8008aa8:	4299      	cmp	r1, r3
 8008aaa:	d002      	beq.n	8008ab2 <cleanup_stdio+0x1e>
 8008aac:	4620      	mov	r0, r4
 8008aae:	f003 fb57 	bl	800c160 <_fflush_r>
 8008ab2:	68e1      	ldr	r1, [r4, #12]
 8008ab4:	4b06      	ldr	r3, [pc, #24]	@ (8008ad0 <cleanup_stdio+0x3c>)
 8008ab6:	4299      	cmp	r1, r3
 8008ab8:	d004      	beq.n	8008ac4 <cleanup_stdio+0x30>
 8008aba:	4620      	mov	r0, r4
 8008abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac0:	f003 bb4e 	b.w	800c160 <_fflush_r>
 8008ac4:	bd10      	pop	{r4, pc}
 8008ac6:	bf00      	nop
 8008ac8:	200005a8 	.word	0x200005a8
 8008acc:	20000610 	.word	0x20000610
 8008ad0:	20000678 	.word	0x20000678

08008ad4 <global_stdio_init.part.0>:
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b04 <global_stdio_init.part.0+0x30>)
 8008ad8:	4c0b      	ldr	r4, [pc, #44]	@ (8008b08 <global_stdio_init.part.0+0x34>)
 8008ada:	4a0c      	ldr	r2, [pc, #48]	@ (8008b0c <global_stdio_init.part.0+0x38>)
 8008adc:	4620      	mov	r0, r4
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	2104      	movs	r1, #4
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f7ff ff94 	bl	8008a10 <std>
 8008ae8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008aec:	2201      	movs	r2, #1
 8008aee:	2109      	movs	r1, #9
 8008af0:	f7ff ff8e 	bl	8008a10 <std>
 8008af4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008af8:	2202      	movs	r2, #2
 8008afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008afe:	2112      	movs	r1, #18
 8008b00:	f7ff bf86 	b.w	8008a10 <std>
 8008b04:	200006e0 	.word	0x200006e0
 8008b08:	200005a8 	.word	0x200005a8
 8008b0c:	08008a7d 	.word	0x08008a7d

08008b10 <__sfp_lock_acquire>:
 8008b10:	4801      	ldr	r0, [pc, #4]	@ (8008b18 <__sfp_lock_acquire+0x8>)
 8008b12:	f000 ba62 	b.w	8008fda <__retarget_lock_acquire_recursive>
 8008b16:	bf00      	nop
 8008b18:	200006e9 	.word	0x200006e9

08008b1c <__sfp_lock_release>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	@ (8008b24 <__sfp_lock_release+0x8>)
 8008b1e:	f000 ba5d 	b.w	8008fdc <__retarget_lock_release_recursive>
 8008b22:	bf00      	nop
 8008b24:	200006e9 	.word	0x200006e9

08008b28 <__sinit>:
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	f7ff fff0 	bl	8008b10 <__sfp_lock_acquire>
 8008b30:	6a23      	ldr	r3, [r4, #32]
 8008b32:	b11b      	cbz	r3, 8008b3c <__sinit+0x14>
 8008b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b38:	f7ff bff0 	b.w	8008b1c <__sfp_lock_release>
 8008b3c:	4b04      	ldr	r3, [pc, #16]	@ (8008b50 <__sinit+0x28>)
 8008b3e:	6223      	str	r3, [r4, #32]
 8008b40:	4b04      	ldr	r3, [pc, #16]	@ (8008b54 <__sinit+0x2c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1f5      	bne.n	8008b34 <__sinit+0xc>
 8008b48:	f7ff ffc4 	bl	8008ad4 <global_stdio_init.part.0>
 8008b4c:	e7f2      	b.n	8008b34 <__sinit+0xc>
 8008b4e:	bf00      	nop
 8008b50:	08008a95 	.word	0x08008a95
 8008b54:	200006e0 	.word	0x200006e0

08008b58 <_fwalk_sglue>:
 8008b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	4688      	mov	r8, r1
 8008b60:	4614      	mov	r4, r2
 8008b62:	2600      	movs	r6, #0
 8008b64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b68:	f1b9 0901 	subs.w	r9, r9, #1
 8008b6c:	d505      	bpl.n	8008b7a <_fwalk_sglue+0x22>
 8008b6e:	6824      	ldr	r4, [r4, #0]
 8008b70:	2c00      	cmp	r4, #0
 8008b72:	d1f7      	bne.n	8008b64 <_fwalk_sglue+0xc>
 8008b74:	4630      	mov	r0, r6
 8008b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b7a:	89ab      	ldrh	r3, [r5, #12]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d907      	bls.n	8008b90 <_fwalk_sglue+0x38>
 8008b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b84:	3301      	adds	r3, #1
 8008b86:	d003      	beq.n	8008b90 <_fwalk_sglue+0x38>
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	47c0      	blx	r8
 8008b8e:	4306      	orrs	r6, r0
 8008b90:	3568      	adds	r5, #104	@ 0x68
 8008b92:	e7e9      	b.n	8008b68 <_fwalk_sglue+0x10>

08008b94 <iprintf>:
 8008b94:	b40f      	push	{r0, r1, r2, r3}
 8008b96:	b507      	push	{r0, r1, r2, lr}
 8008b98:	4906      	ldr	r1, [pc, #24]	@ (8008bb4 <iprintf+0x20>)
 8008b9a:	ab04      	add	r3, sp, #16
 8008b9c:	6808      	ldr	r0, [r1, #0]
 8008b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ba2:	6881      	ldr	r1, [r0, #8]
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	f002 fff7 	bl	800bb98 <_vfiprintf_r>
 8008baa:	b003      	add	sp, #12
 8008bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bb0:	b004      	add	sp, #16
 8008bb2:	4770      	bx	lr
 8008bb4:	20000028 	.word	0x20000028

08008bb8 <_puts_r>:
 8008bb8:	6a03      	ldr	r3, [r0, #32]
 8008bba:	b570      	push	{r4, r5, r6, lr}
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	460e      	mov	r6, r1
 8008bc0:	6884      	ldr	r4, [r0, #8]
 8008bc2:	b90b      	cbnz	r3, 8008bc8 <_puts_r+0x10>
 8008bc4:	f7ff ffb0 	bl	8008b28 <__sinit>
 8008bc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bca:	07db      	lsls	r3, r3, #31
 8008bcc:	d405      	bmi.n	8008bda <_puts_r+0x22>
 8008bce:	89a3      	ldrh	r3, [r4, #12]
 8008bd0:	0598      	lsls	r0, r3, #22
 8008bd2:	d402      	bmi.n	8008bda <_puts_r+0x22>
 8008bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bd6:	f000 fa00 	bl	8008fda <__retarget_lock_acquire_recursive>
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	0719      	lsls	r1, r3, #28
 8008bde:	d502      	bpl.n	8008be6 <_puts_r+0x2e>
 8008be0:	6923      	ldr	r3, [r4, #16]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d135      	bne.n	8008c52 <_puts_r+0x9a>
 8008be6:	4621      	mov	r1, r4
 8008be8:	4628      	mov	r0, r5
 8008bea:	f000 f911 	bl	8008e10 <__swsetup_r>
 8008bee:	b380      	cbz	r0, 8008c52 <_puts_r+0x9a>
 8008bf0:	f04f 35ff 	mov.w	r5, #4294967295
 8008bf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bf6:	07da      	lsls	r2, r3, #31
 8008bf8:	d405      	bmi.n	8008c06 <_puts_r+0x4e>
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	059b      	lsls	r3, r3, #22
 8008bfe:	d402      	bmi.n	8008c06 <_puts_r+0x4e>
 8008c00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c02:	f000 f9eb 	bl	8008fdc <__retarget_lock_release_recursive>
 8008c06:	4628      	mov	r0, r5
 8008c08:	bd70      	pop	{r4, r5, r6, pc}
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	da04      	bge.n	8008c18 <_puts_r+0x60>
 8008c0e:	69a2      	ldr	r2, [r4, #24]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	dc17      	bgt.n	8008c44 <_puts_r+0x8c>
 8008c14:	290a      	cmp	r1, #10
 8008c16:	d015      	beq.n	8008c44 <_puts_r+0x8c>
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	6022      	str	r2, [r4, #0]
 8008c1e:	7019      	strb	r1, [r3, #0]
 8008c20:	68a3      	ldr	r3, [r4, #8]
 8008c22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c26:	3b01      	subs	r3, #1
 8008c28:	60a3      	str	r3, [r4, #8]
 8008c2a:	2900      	cmp	r1, #0
 8008c2c:	d1ed      	bne.n	8008c0a <_puts_r+0x52>
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	da11      	bge.n	8008c56 <_puts_r+0x9e>
 8008c32:	4622      	mov	r2, r4
 8008c34:	210a      	movs	r1, #10
 8008c36:	4628      	mov	r0, r5
 8008c38:	f000 f8ab 	bl	8008d92 <__swbuf_r>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d0d7      	beq.n	8008bf0 <_puts_r+0x38>
 8008c40:	250a      	movs	r5, #10
 8008c42:	e7d7      	b.n	8008bf4 <_puts_r+0x3c>
 8008c44:	4622      	mov	r2, r4
 8008c46:	4628      	mov	r0, r5
 8008c48:	f000 f8a3 	bl	8008d92 <__swbuf_r>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d1e7      	bne.n	8008c20 <_puts_r+0x68>
 8008c50:	e7ce      	b.n	8008bf0 <_puts_r+0x38>
 8008c52:	3e01      	subs	r6, #1
 8008c54:	e7e4      	b.n	8008c20 <_puts_r+0x68>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	6022      	str	r2, [r4, #0]
 8008c5c:	220a      	movs	r2, #10
 8008c5e:	701a      	strb	r2, [r3, #0]
 8008c60:	e7ee      	b.n	8008c40 <_puts_r+0x88>
	...

08008c64 <puts>:
 8008c64:	4b02      	ldr	r3, [pc, #8]	@ (8008c70 <puts+0xc>)
 8008c66:	4601      	mov	r1, r0
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	f7ff bfa5 	b.w	8008bb8 <_puts_r>
 8008c6e:	bf00      	nop
 8008c70:	20000028 	.word	0x20000028

08008c74 <siprintf>:
 8008c74:	b40e      	push	{r1, r2, r3}
 8008c76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c7a:	b500      	push	{lr}
 8008c7c:	b09c      	sub	sp, #112	@ 0x70
 8008c7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008c80:	9002      	str	r0, [sp, #8]
 8008c82:	9006      	str	r0, [sp, #24]
 8008c84:	9107      	str	r1, [sp, #28]
 8008c86:	9104      	str	r1, [sp, #16]
 8008c88:	4808      	ldr	r0, [pc, #32]	@ (8008cac <siprintf+0x38>)
 8008c8a:	4909      	ldr	r1, [pc, #36]	@ (8008cb0 <siprintf+0x3c>)
 8008c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c90:	9105      	str	r1, [sp, #20]
 8008c92:	6800      	ldr	r0, [r0, #0]
 8008c94:	a902      	add	r1, sp, #8
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	f002 fc90 	bl	800b5bc <_svfiprintf_r>
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	9b02      	ldr	r3, [sp, #8]
 8008ca0:	701a      	strb	r2, [r3, #0]
 8008ca2:	b01c      	add	sp, #112	@ 0x70
 8008ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ca8:	b003      	add	sp, #12
 8008caa:	4770      	bx	lr
 8008cac:	20000028 	.word	0x20000028
 8008cb0:	ffff0208 	.word	0xffff0208

08008cb4 <siscanf>:
 8008cb4:	b40e      	push	{r1, r2, r3}
 8008cb6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008cba:	b530      	push	{r4, r5, lr}
 8008cbc:	b09c      	sub	sp, #112	@ 0x70
 8008cbe:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008cc0:	f854 5b04 	ldr.w	r5, [r4], #4
 8008cc4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008cc8:	9002      	str	r0, [sp, #8]
 8008cca:	9006      	str	r0, [sp, #24]
 8008ccc:	f7f7 fa40 	bl	8000150 <strlen>
 8008cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8008d00 <siscanf+0x4c>)
 8008cd2:	9003      	str	r0, [sp, #12]
 8008cd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008cda:	9314      	str	r3, [sp, #80]	@ 0x50
 8008cdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ce0:	9007      	str	r0, [sp, #28]
 8008ce2:	4808      	ldr	r0, [pc, #32]	@ (8008d04 <siscanf+0x50>)
 8008ce4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ce8:	462a      	mov	r2, r5
 8008cea:	4623      	mov	r3, r4
 8008cec:	a902      	add	r1, sp, #8
 8008cee:	6800      	ldr	r0, [r0, #0]
 8008cf0:	9401      	str	r4, [sp, #4]
 8008cf2:	f002 fdb7 	bl	800b864 <__ssvfiscanf_r>
 8008cf6:	b01c      	add	sp, #112	@ 0x70
 8008cf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cfc:	b003      	add	sp, #12
 8008cfe:	4770      	bx	lr
 8008d00:	08008d2b 	.word	0x08008d2b
 8008d04:	20000028 	.word	0x20000028

08008d08 <__sread>:
 8008d08:	b510      	push	{r4, lr}
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d10:	f000 f914 	bl	8008f3c <_read_r>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	bfab      	itete	ge
 8008d18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d1c:	181b      	addge	r3, r3, r0
 8008d1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d22:	bfac      	ite	ge
 8008d24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d26:	81a3      	strhlt	r3, [r4, #12]
 8008d28:	bd10      	pop	{r4, pc}

08008d2a <__seofread>:
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	4770      	bx	lr

08008d2e <__swrite>:
 8008d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d32:	461f      	mov	r7, r3
 8008d34:	898b      	ldrh	r3, [r1, #12]
 8008d36:	4605      	mov	r5, r0
 8008d38:	05db      	lsls	r3, r3, #23
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	4616      	mov	r6, r2
 8008d3e:	d505      	bpl.n	8008d4c <__swrite+0x1e>
 8008d40:	2302      	movs	r3, #2
 8008d42:	2200      	movs	r2, #0
 8008d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d48:	f000 f8e6 	bl	8008f18 <_lseek_r>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	4632      	mov	r2, r6
 8008d50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d54:	81a3      	strh	r3, [r4, #12]
 8008d56:	4628      	mov	r0, r5
 8008d58:	463b      	mov	r3, r7
 8008d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d62:	f000 b8fd 	b.w	8008f60 <_write_r>

08008d66 <__sseek>:
 8008d66:	b510      	push	{r4, lr}
 8008d68:	460c      	mov	r4, r1
 8008d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6e:	f000 f8d3 	bl	8008f18 <_lseek_r>
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	bf15      	itete	ne
 8008d78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d82:	81a3      	strheq	r3, [r4, #12]
 8008d84:	bf18      	it	ne
 8008d86:	81a3      	strhne	r3, [r4, #12]
 8008d88:	bd10      	pop	{r4, pc}

08008d8a <__sclose>:
 8008d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8e:	f000 b8b3 	b.w	8008ef8 <_close_r>

08008d92 <__swbuf_r>:
 8008d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d94:	460e      	mov	r6, r1
 8008d96:	4614      	mov	r4, r2
 8008d98:	4605      	mov	r5, r0
 8008d9a:	b118      	cbz	r0, 8008da4 <__swbuf_r+0x12>
 8008d9c:	6a03      	ldr	r3, [r0, #32]
 8008d9e:	b90b      	cbnz	r3, 8008da4 <__swbuf_r+0x12>
 8008da0:	f7ff fec2 	bl	8008b28 <__sinit>
 8008da4:	69a3      	ldr	r3, [r4, #24]
 8008da6:	60a3      	str	r3, [r4, #8]
 8008da8:	89a3      	ldrh	r3, [r4, #12]
 8008daa:	071a      	lsls	r2, r3, #28
 8008dac:	d501      	bpl.n	8008db2 <__swbuf_r+0x20>
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	b943      	cbnz	r3, 8008dc4 <__swbuf_r+0x32>
 8008db2:	4621      	mov	r1, r4
 8008db4:	4628      	mov	r0, r5
 8008db6:	f000 f82b 	bl	8008e10 <__swsetup_r>
 8008dba:	b118      	cbz	r0, 8008dc4 <__swbuf_r+0x32>
 8008dbc:	f04f 37ff 	mov.w	r7, #4294967295
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	6922      	ldr	r2, [r4, #16]
 8008dc8:	b2f6      	uxtb	r6, r6
 8008dca:	1a98      	subs	r0, r3, r2
 8008dcc:	6963      	ldr	r3, [r4, #20]
 8008dce:	4637      	mov	r7, r6
 8008dd0:	4283      	cmp	r3, r0
 8008dd2:	dc05      	bgt.n	8008de0 <__swbuf_r+0x4e>
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f003 f9c2 	bl	800c160 <_fflush_r>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d1ed      	bne.n	8008dbc <__swbuf_r+0x2a>
 8008de0:	68a3      	ldr	r3, [r4, #8]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	60a3      	str	r3, [r4, #8]
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	1c5a      	adds	r2, r3, #1
 8008dea:	6022      	str	r2, [r4, #0]
 8008dec:	701e      	strb	r6, [r3, #0]
 8008dee:	6962      	ldr	r2, [r4, #20]
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d004      	beq.n	8008e00 <__swbuf_r+0x6e>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	07db      	lsls	r3, r3, #31
 8008dfa:	d5e1      	bpl.n	8008dc0 <__swbuf_r+0x2e>
 8008dfc:	2e0a      	cmp	r6, #10
 8008dfe:	d1df      	bne.n	8008dc0 <__swbuf_r+0x2e>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4628      	mov	r0, r5
 8008e04:	f003 f9ac 	bl	800c160 <_fflush_r>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d0d9      	beq.n	8008dc0 <__swbuf_r+0x2e>
 8008e0c:	e7d6      	b.n	8008dbc <__swbuf_r+0x2a>
	...

08008e10 <__swsetup_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4b29      	ldr	r3, [pc, #164]	@ (8008eb8 <__swsetup_r+0xa8>)
 8008e14:	4605      	mov	r5, r0
 8008e16:	6818      	ldr	r0, [r3, #0]
 8008e18:	460c      	mov	r4, r1
 8008e1a:	b118      	cbz	r0, 8008e24 <__swsetup_r+0x14>
 8008e1c:	6a03      	ldr	r3, [r0, #32]
 8008e1e:	b90b      	cbnz	r3, 8008e24 <__swsetup_r+0x14>
 8008e20:	f7ff fe82 	bl	8008b28 <__sinit>
 8008e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e28:	0719      	lsls	r1, r3, #28
 8008e2a:	d422      	bmi.n	8008e72 <__swsetup_r+0x62>
 8008e2c:	06da      	lsls	r2, r3, #27
 8008e2e:	d407      	bmi.n	8008e40 <__swsetup_r+0x30>
 8008e30:	2209      	movs	r2, #9
 8008e32:	602a      	str	r2, [r5, #0]
 8008e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e38:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3c:	81a3      	strh	r3, [r4, #12]
 8008e3e:	e033      	b.n	8008ea8 <__swsetup_r+0x98>
 8008e40:	0758      	lsls	r0, r3, #29
 8008e42:	d512      	bpl.n	8008e6a <__swsetup_r+0x5a>
 8008e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e46:	b141      	cbz	r1, 8008e5a <__swsetup_r+0x4a>
 8008e48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	d002      	beq.n	8008e56 <__swsetup_r+0x46>
 8008e50:	4628      	mov	r0, r5
 8008e52:	f000 ff35 	bl	8009cc0 <_free_r>
 8008e56:	2300      	movs	r3, #0
 8008e58:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e60:	81a3      	strh	r3, [r4, #12]
 8008e62:	2300      	movs	r3, #0
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	6923      	ldr	r3, [r4, #16]
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	f043 0308 	orr.w	r3, r3, #8
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	6923      	ldr	r3, [r4, #16]
 8008e74:	b94b      	cbnz	r3, 8008e8a <__swsetup_r+0x7a>
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e80:	d003      	beq.n	8008e8a <__swsetup_r+0x7a>
 8008e82:	4621      	mov	r1, r4
 8008e84:	4628      	mov	r0, r5
 8008e86:	f003 f9b8 	bl	800c1fa <__smakebuf_r>
 8008e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8e:	f013 0201 	ands.w	r2, r3, #1
 8008e92:	d00a      	beq.n	8008eaa <__swsetup_r+0x9a>
 8008e94:	2200      	movs	r2, #0
 8008e96:	60a2      	str	r2, [r4, #8]
 8008e98:	6962      	ldr	r2, [r4, #20]
 8008e9a:	4252      	negs	r2, r2
 8008e9c:	61a2      	str	r2, [r4, #24]
 8008e9e:	6922      	ldr	r2, [r4, #16]
 8008ea0:	b942      	cbnz	r2, 8008eb4 <__swsetup_r+0xa4>
 8008ea2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ea6:	d1c5      	bne.n	8008e34 <__swsetup_r+0x24>
 8008ea8:	bd38      	pop	{r3, r4, r5, pc}
 8008eaa:	0799      	lsls	r1, r3, #30
 8008eac:	bf58      	it	pl
 8008eae:	6962      	ldrpl	r2, [r4, #20]
 8008eb0:	60a2      	str	r2, [r4, #8]
 8008eb2:	e7f4      	b.n	8008e9e <__swsetup_r+0x8e>
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	e7f7      	b.n	8008ea8 <__swsetup_r+0x98>
 8008eb8:	20000028 	.word	0x20000028

08008ebc <memset>:
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	4402      	add	r2, r0
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d100      	bne.n	8008ec6 <memset+0xa>
 8008ec4:	4770      	bx	lr
 8008ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8008eca:	e7f9      	b.n	8008ec0 <memset+0x4>

08008ecc <strncmp>:
 8008ecc:	b510      	push	{r4, lr}
 8008ece:	b16a      	cbz	r2, 8008eec <strncmp+0x20>
 8008ed0:	3901      	subs	r1, #1
 8008ed2:	1884      	adds	r4, r0, r2
 8008ed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ed8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d103      	bne.n	8008ee8 <strncmp+0x1c>
 8008ee0:	42a0      	cmp	r0, r4
 8008ee2:	d001      	beq.n	8008ee8 <strncmp+0x1c>
 8008ee4:	2a00      	cmp	r2, #0
 8008ee6:	d1f5      	bne.n	8008ed4 <strncmp+0x8>
 8008ee8:	1ad0      	subs	r0, r2, r3
 8008eea:	bd10      	pop	{r4, pc}
 8008eec:	4610      	mov	r0, r2
 8008eee:	e7fc      	b.n	8008eea <strncmp+0x1e>

08008ef0 <_localeconv_r>:
 8008ef0:	4800      	ldr	r0, [pc, #0]	@ (8008ef4 <_localeconv_r+0x4>)
 8008ef2:	4770      	bx	lr
 8008ef4:	20000168 	.word	0x20000168

08008ef8 <_close_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	2300      	movs	r3, #0
 8008efc:	4d05      	ldr	r5, [pc, #20]	@ (8008f14 <_close_r+0x1c>)
 8008efe:	4604      	mov	r4, r0
 8008f00:	4608      	mov	r0, r1
 8008f02:	602b      	str	r3, [r5, #0]
 8008f04:	f7fa fc39 	bl	800377a <_close>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_close_r+0x1a>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_close_r+0x1a>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	200006e4 	.word	0x200006e4

08008f18 <_lseek_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	4608      	mov	r0, r1
 8008f1e:	4611      	mov	r1, r2
 8008f20:	2200      	movs	r2, #0
 8008f22:	4d05      	ldr	r5, [pc, #20]	@ (8008f38 <_lseek_r+0x20>)
 8008f24:	602a      	str	r2, [r5, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	f7fa fc4b 	bl	80037c2 <_lseek>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_lseek_r+0x1e>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_lseek_r+0x1e>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	200006e4 	.word	0x200006e4

08008f3c <_read_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	4611      	mov	r1, r2
 8008f44:	2200      	movs	r2, #0
 8008f46:	4d05      	ldr	r5, [pc, #20]	@ (8008f5c <_read_r+0x20>)
 8008f48:	602a      	str	r2, [r5, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f7fa fbf8 	bl	8003740 <_read>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d102      	bne.n	8008f5a <_read_r+0x1e>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	b103      	cbz	r3, 8008f5a <_read_r+0x1e>
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
 8008f5c:	200006e4 	.word	0x200006e4

08008f60 <_write_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4604      	mov	r4, r0
 8008f64:	4608      	mov	r0, r1
 8008f66:	4611      	mov	r1, r2
 8008f68:	2200      	movs	r2, #0
 8008f6a:	4d05      	ldr	r5, [pc, #20]	@ (8008f80 <_write_r+0x20>)
 8008f6c:	602a      	str	r2, [r5, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f7fa f984 	bl	800327c <_write>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_write_r+0x1e>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_write_r+0x1e>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	200006e4 	.word	0x200006e4

08008f84 <__errno>:
 8008f84:	4b01      	ldr	r3, [pc, #4]	@ (8008f8c <__errno+0x8>)
 8008f86:	6818      	ldr	r0, [r3, #0]
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	20000028 	.word	0x20000028

08008f90 <__libc_init_array>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	2600      	movs	r6, #0
 8008f94:	4d0c      	ldr	r5, [pc, #48]	@ (8008fc8 <__libc_init_array+0x38>)
 8008f96:	4c0d      	ldr	r4, [pc, #52]	@ (8008fcc <__libc_init_array+0x3c>)
 8008f98:	1b64      	subs	r4, r4, r5
 8008f9a:	10a4      	asrs	r4, r4, #2
 8008f9c:	42a6      	cmp	r6, r4
 8008f9e:	d109      	bne.n	8008fb4 <__libc_init_array+0x24>
 8008fa0:	f004 fe0e 	bl	800dbc0 <_init>
 8008fa4:	2600      	movs	r6, #0
 8008fa6:	4d0a      	ldr	r5, [pc, #40]	@ (8008fd0 <__libc_init_array+0x40>)
 8008fa8:	4c0a      	ldr	r4, [pc, #40]	@ (8008fd4 <__libc_init_array+0x44>)
 8008faa:	1b64      	subs	r4, r4, r5
 8008fac:	10a4      	asrs	r4, r4, #2
 8008fae:	42a6      	cmp	r6, r4
 8008fb0:	d105      	bne.n	8008fbe <__libc_init_array+0x2e>
 8008fb2:	bd70      	pop	{r4, r5, r6, pc}
 8008fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fb8:	4798      	blx	r3
 8008fba:	3601      	adds	r6, #1
 8008fbc:	e7ee      	b.n	8008f9c <__libc_init_array+0xc>
 8008fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc2:	4798      	blx	r3
 8008fc4:	3601      	adds	r6, #1
 8008fc6:	e7f2      	b.n	8008fae <__libc_init_array+0x1e>
 8008fc8:	0800e360 	.word	0x0800e360
 8008fcc:	0800e360 	.word	0x0800e360
 8008fd0:	0800e360 	.word	0x0800e360
 8008fd4:	0800e364 	.word	0x0800e364

08008fd8 <__retarget_lock_init_recursive>:
 8008fd8:	4770      	bx	lr

08008fda <__retarget_lock_acquire_recursive>:
 8008fda:	4770      	bx	lr

08008fdc <__retarget_lock_release_recursive>:
 8008fdc:	4770      	bx	lr

08008fde <memchr>:
 8008fde:	4603      	mov	r3, r0
 8008fe0:	b510      	push	{r4, lr}
 8008fe2:	b2c9      	uxtb	r1, r1
 8008fe4:	4402      	add	r2, r0
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	d101      	bne.n	8008ff0 <memchr+0x12>
 8008fec:	2000      	movs	r0, #0
 8008fee:	e003      	b.n	8008ff8 <memchr+0x1a>
 8008ff0:	7804      	ldrb	r4, [r0, #0]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	428c      	cmp	r4, r1
 8008ff6:	d1f6      	bne.n	8008fe6 <memchr+0x8>
 8008ff8:	bd10      	pop	{r4, pc}

08008ffa <memcpy>:
 8008ffa:	440a      	add	r2, r1
 8008ffc:	4291      	cmp	r1, r2
 8008ffe:	f100 33ff 	add.w	r3, r0, #4294967295
 8009002:	d100      	bne.n	8009006 <memcpy+0xc>
 8009004:	4770      	bx	lr
 8009006:	b510      	push	{r4, lr}
 8009008:	f811 4b01 	ldrb.w	r4, [r1], #1
 800900c:	4291      	cmp	r1, r2
 800900e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009012:	d1f9      	bne.n	8009008 <memcpy+0xe>
 8009014:	bd10      	pop	{r4, pc}
	...

08009018 <nanf>:
 8009018:	4800      	ldr	r0, [pc, #0]	@ (800901c <nanf+0x4>)
 800901a:	4770      	bx	lr
 800901c:	7fc00000 	.word	0x7fc00000

08009020 <quorem>:
 8009020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	6903      	ldr	r3, [r0, #16]
 8009026:	690c      	ldr	r4, [r1, #16]
 8009028:	4607      	mov	r7, r0
 800902a:	42a3      	cmp	r3, r4
 800902c:	db7e      	blt.n	800912c <quorem+0x10c>
 800902e:	3c01      	subs	r4, #1
 8009030:	00a3      	lsls	r3, r4, #2
 8009032:	f100 0514 	add.w	r5, r0, #20
 8009036:	f101 0814 	add.w	r8, r1, #20
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009046:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800904a:	3301      	adds	r3, #1
 800904c:	429a      	cmp	r2, r3
 800904e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009052:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009056:	d32e      	bcc.n	80090b6 <quorem+0x96>
 8009058:	f04f 0a00 	mov.w	sl, #0
 800905c:	46c4      	mov	ip, r8
 800905e:	46ae      	mov	lr, r5
 8009060:	46d3      	mov	fp, sl
 8009062:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009066:	b298      	uxth	r0, r3
 8009068:	fb06 a000 	mla	r0, r6, r0, sl
 800906c:	0c1b      	lsrs	r3, r3, #16
 800906e:	0c02      	lsrs	r2, r0, #16
 8009070:	fb06 2303 	mla	r3, r6, r3, r2
 8009074:	f8de 2000 	ldr.w	r2, [lr]
 8009078:	b280      	uxth	r0, r0
 800907a:	b292      	uxth	r2, r2
 800907c:	1a12      	subs	r2, r2, r0
 800907e:	445a      	add	r2, fp
 8009080:	f8de 0000 	ldr.w	r0, [lr]
 8009084:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009088:	b29b      	uxth	r3, r3
 800908a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800908e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009092:	b292      	uxth	r2, r2
 8009094:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009098:	45e1      	cmp	r9, ip
 800909a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800909e:	f84e 2b04 	str.w	r2, [lr], #4
 80090a2:	d2de      	bcs.n	8009062 <quorem+0x42>
 80090a4:	9b00      	ldr	r3, [sp, #0]
 80090a6:	58eb      	ldr	r3, [r5, r3]
 80090a8:	b92b      	cbnz	r3, 80090b6 <quorem+0x96>
 80090aa:	9b01      	ldr	r3, [sp, #4]
 80090ac:	3b04      	subs	r3, #4
 80090ae:	429d      	cmp	r5, r3
 80090b0:	461a      	mov	r2, r3
 80090b2:	d32f      	bcc.n	8009114 <quorem+0xf4>
 80090b4:	613c      	str	r4, [r7, #16]
 80090b6:	4638      	mov	r0, r7
 80090b8:	f001 f9c2 	bl	800a440 <__mcmp>
 80090bc:	2800      	cmp	r0, #0
 80090be:	db25      	blt.n	800910c <quorem+0xec>
 80090c0:	4629      	mov	r1, r5
 80090c2:	2000      	movs	r0, #0
 80090c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80090c8:	f8d1 c000 	ldr.w	ip, [r1]
 80090cc:	fa1f fe82 	uxth.w	lr, r2
 80090d0:	fa1f f38c 	uxth.w	r3, ip
 80090d4:	eba3 030e 	sub.w	r3, r3, lr
 80090d8:	4403      	add	r3, r0
 80090da:	0c12      	lsrs	r2, r2, #16
 80090dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80090e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090ea:	45c1      	cmp	r9, r8
 80090ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80090f0:	f841 3b04 	str.w	r3, [r1], #4
 80090f4:	d2e6      	bcs.n	80090c4 <quorem+0xa4>
 80090f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090fe:	b922      	cbnz	r2, 800910a <quorem+0xea>
 8009100:	3b04      	subs	r3, #4
 8009102:	429d      	cmp	r5, r3
 8009104:	461a      	mov	r2, r3
 8009106:	d30b      	bcc.n	8009120 <quorem+0x100>
 8009108:	613c      	str	r4, [r7, #16]
 800910a:	3601      	adds	r6, #1
 800910c:	4630      	mov	r0, r6
 800910e:	b003      	add	sp, #12
 8009110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009114:	6812      	ldr	r2, [r2, #0]
 8009116:	3b04      	subs	r3, #4
 8009118:	2a00      	cmp	r2, #0
 800911a:	d1cb      	bne.n	80090b4 <quorem+0x94>
 800911c:	3c01      	subs	r4, #1
 800911e:	e7c6      	b.n	80090ae <quorem+0x8e>
 8009120:	6812      	ldr	r2, [r2, #0]
 8009122:	3b04      	subs	r3, #4
 8009124:	2a00      	cmp	r2, #0
 8009126:	d1ef      	bne.n	8009108 <quorem+0xe8>
 8009128:	3c01      	subs	r4, #1
 800912a:	e7ea      	b.n	8009102 <quorem+0xe2>
 800912c:	2000      	movs	r0, #0
 800912e:	e7ee      	b.n	800910e <quorem+0xee>

08009130 <_dtoa_r>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	4614      	mov	r4, r2
 8009136:	461d      	mov	r5, r3
 8009138:	69c7      	ldr	r7, [r0, #28]
 800913a:	b097      	sub	sp, #92	@ 0x5c
 800913c:	4683      	mov	fp, r0
 800913e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009142:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009144:	b97f      	cbnz	r7, 8009166 <_dtoa_r+0x36>
 8009146:	2010      	movs	r0, #16
 8009148:	f000 fe02 	bl	8009d50 <malloc>
 800914c:	4602      	mov	r2, r0
 800914e:	f8cb 001c 	str.w	r0, [fp, #28]
 8009152:	b920      	cbnz	r0, 800915e <_dtoa_r+0x2e>
 8009154:	21ef      	movs	r1, #239	@ 0xef
 8009156:	4ba8      	ldr	r3, [pc, #672]	@ (80093f8 <_dtoa_r+0x2c8>)
 8009158:	48a8      	ldr	r0, [pc, #672]	@ (80093fc <_dtoa_r+0x2cc>)
 800915a:	f003 f94d 	bl	800c3f8 <__assert_func>
 800915e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009162:	6007      	str	r7, [r0, #0]
 8009164:	60c7      	str	r7, [r0, #12]
 8009166:	f8db 301c 	ldr.w	r3, [fp, #28]
 800916a:	6819      	ldr	r1, [r3, #0]
 800916c:	b159      	cbz	r1, 8009186 <_dtoa_r+0x56>
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	2301      	movs	r3, #1
 8009172:	4093      	lsls	r3, r2
 8009174:	604a      	str	r2, [r1, #4]
 8009176:	608b      	str	r3, [r1, #8]
 8009178:	4658      	mov	r0, fp
 800917a:	f000 fedf 	bl	8009f3c <_Bfree>
 800917e:	2200      	movs	r2, #0
 8009180:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	1e2b      	subs	r3, r5, #0
 8009188:	bfaf      	iteee	ge
 800918a:	2300      	movge	r3, #0
 800918c:	2201      	movlt	r2, #1
 800918e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009192:	9303      	strlt	r3, [sp, #12]
 8009194:	bfa8      	it	ge
 8009196:	6033      	strge	r3, [r6, #0]
 8009198:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800919c:	4b98      	ldr	r3, [pc, #608]	@ (8009400 <_dtoa_r+0x2d0>)
 800919e:	bfb8      	it	lt
 80091a0:	6032      	strlt	r2, [r6, #0]
 80091a2:	ea33 0308 	bics.w	r3, r3, r8
 80091a6:	d112      	bne.n	80091ce <_dtoa_r+0x9e>
 80091a8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80091ac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80091b4:	4323      	orrs	r3, r4
 80091b6:	f000 8550 	beq.w	8009c5a <_dtoa_r+0xb2a>
 80091ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80091bc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009404 <_dtoa_r+0x2d4>
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 8552 	beq.w	8009c6a <_dtoa_r+0xb3a>
 80091c6:	f10a 0303 	add.w	r3, sl, #3
 80091ca:	f000 bd4c 	b.w	8009c66 <_dtoa_r+0xb36>
 80091ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80091d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091da:	2200      	movs	r2, #0
 80091dc:	2300      	movs	r3, #0
 80091de:	f7f7 fbe3 	bl	80009a8 <__aeabi_dcmpeq>
 80091e2:	4607      	mov	r7, r0
 80091e4:	b158      	cbz	r0, 80091fe <_dtoa_r+0xce>
 80091e6:	2301      	movs	r3, #1
 80091e8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80091ee:	b113      	cbz	r3, 80091f6 <_dtoa_r+0xc6>
 80091f0:	4b85      	ldr	r3, [pc, #532]	@ (8009408 <_dtoa_r+0x2d8>)
 80091f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800940c <_dtoa_r+0x2dc>
 80091fa:	f000 bd36 	b.w	8009c6a <_dtoa_r+0xb3a>
 80091fe:	ab14      	add	r3, sp, #80	@ 0x50
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	ab15      	add	r3, sp, #84	@ 0x54
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	4658      	mov	r0, fp
 8009208:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800920c:	f001 fa30 	bl	800a670 <__d2b>
 8009210:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009214:	4681      	mov	r9, r0
 8009216:	2e00      	cmp	r6, #0
 8009218:	d077      	beq.n	800930a <_dtoa_r+0x1da>
 800921a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800921e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009220:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009228:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800922c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009230:	9712      	str	r7, [sp, #72]	@ 0x48
 8009232:	4619      	mov	r1, r3
 8009234:	2200      	movs	r2, #0
 8009236:	4b76      	ldr	r3, [pc, #472]	@ (8009410 <_dtoa_r+0x2e0>)
 8009238:	f7f6 ff96 	bl	8000168 <__aeabi_dsub>
 800923c:	a368      	add	r3, pc, #416	@ (adr r3, 80093e0 <_dtoa_r+0x2b0>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f7f7 f949 	bl	80004d8 <__aeabi_dmul>
 8009246:	a368      	add	r3, pc, #416	@ (adr r3, 80093e8 <_dtoa_r+0x2b8>)
 8009248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924c:	f7f6 ff8e 	bl	800016c <__adddf3>
 8009250:	4604      	mov	r4, r0
 8009252:	4630      	mov	r0, r6
 8009254:	460d      	mov	r5, r1
 8009256:	f7f7 f8d5 	bl	8000404 <__aeabi_i2d>
 800925a:	a365      	add	r3, pc, #404	@ (adr r3, 80093f0 <_dtoa_r+0x2c0>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	f7f7 f93a 	bl	80004d8 <__aeabi_dmul>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	4620      	mov	r0, r4
 800926a:	4629      	mov	r1, r5
 800926c:	f7f6 ff7e 	bl	800016c <__adddf3>
 8009270:	4604      	mov	r4, r0
 8009272:	460d      	mov	r5, r1
 8009274:	f7f7 fbe0 	bl	8000a38 <__aeabi_d2iz>
 8009278:	2200      	movs	r2, #0
 800927a:	4607      	mov	r7, r0
 800927c:	2300      	movs	r3, #0
 800927e:	4620      	mov	r0, r4
 8009280:	4629      	mov	r1, r5
 8009282:	f7f7 fb9b 	bl	80009bc <__aeabi_dcmplt>
 8009286:	b140      	cbz	r0, 800929a <_dtoa_r+0x16a>
 8009288:	4638      	mov	r0, r7
 800928a:	f7f7 f8bb 	bl	8000404 <__aeabi_i2d>
 800928e:	4622      	mov	r2, r4
 8009290:	462b      	mov	r3, r5
 8009292:	f7f7 fb89 	bl	80009a8 <__aeabi_dcmpeq>
 8009296:	b900      	cbnz	r0, 800929a <_dtoa_r+0x16a>
 8009298:	3f01      	subs	r7, #1
 800929a:	2f16      	cmp	r7, #22
 800929c:	d853      	bhi.n	8009346 <_dtoa_r+0x216>
 800929e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092a2:	4b5c      	ldr	r3, [pc, #368]	@ (8009414 <_dtoa_r+0x2e4>)
 80092a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	f7f7 fb86 	bl	80009bc <__aeabi_dcmplt>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d04a      	beq.n	800934a <_dtoa_r+0x21a>
 80092b4:	2300      	movs	r3, #0
 80092b6:	3f01      	subs	r7, #1
 80092b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80092bc:	1b9b      	subs	r3, r3, r6
 80092be:	1e5a      	subs	r2, r3, #1
 80092c0:	bf46      	itte	mi
 80092c2:	f1c3 0801 	rsbmi	r8, r3, #1
 80092c6:	2300      	movmi	r3, #0
 80092c8:	f04f 0800 	movpl.w	r8, #0
 80092cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80092ce:	bf48      	it	mi
 80092d0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80092d2:	2f00      	cmp	r7, #0
 80092d4:	db3b      	blt.n	800934e <_dtoa_r+0x21e>
 80092d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d8:	970e      	str	r7, [sp, #56]	@ 0x38
 80092da:	443b      	add	r3, r7
 80092dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80092de:	2300      	movs	r3, #0
 80092e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80092e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80092e4:	2b09      	cmp	r3, #9
 80092e6:	d866      	bhi.n	80093b6 <_dtoa_r+0x286>
 80092e8:	2b05      	cmp	r3, #5
 80092ea:	bfc4      	itt	gt
 80092ec:	3b04      	subgt	r3, #4
 80092ee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80092f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80092f2:	bfc8      	it	gt
 80092f4:	2400      	movgt	r4, #0
 80092f6:	f1a3 0302 	sub.w	r3, r3, #2
 80092fa:	bfd8      	it	le
 80092fc:	2401      	movle	r4, #1
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d864      	bhi.n	80093cc <_dtoa_r+0x29c>
 8009302:	e8df f003 	tbb	[pc, r3]
 8009306:	382b      	.short	0x382b
 8009308:	5636      	.short	0x5636
 800930a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800930e:	441e      	add	r6, r3
 8009310:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009314:	2b20      	cmp	r3, #32
 8009316:	bfc1      	itttt	gt
 8009318:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800931c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009320:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009324:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009328:	bfd6      	itet	le
 800932a:	f1c3 0320 	rsble	r3, r3, #32
 800932e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009332:	fa04 f003 	lslle.w	r0, r4, r3
 8009336:	f7f7 f855 	bl	80003e4 <__aeabi_ui2d>
 800933a:	2201      	movs	r2, #1
 800933c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009340:	3e01      	subs	r6, #1
 8009342:	9212      	str	r2, [sp, #72]	@ 0x48
 8009344:	e775      	b.n	8009232 <_dtoa_r+0x102>
 8009346:	2301      	movs	r3, #1
 8009348:	e7b6      	b.n	80092b8 <_dtoa_r+0x188>
 800934a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800934c:	e7b5      	b.n	80092ba <_dtoa_r+0x18a>
 800934e:	427b      	negs	r3, r7
 8009350:	930a      	str	r3, [sp, #40]	@ 0x28
 8009352:	2300      	movs	r3, #0
 8009354:	eba8 0807 	sub.w	r8, r8, r7
 8009358:	930e      	str	r3, [sp, #56]	@ 0x38
 800935a:	e7c2      	b.n	80092e2 <_dtoa_r+0x1b2>
 800935c:	2300      	movs	r3, #0
 800935e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009360:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009362:	2b00      	cmp	r3, #0
 8009364:	dc35      	bgt.n	80093d2 <_dtoa_r+0x2a2>
 8009366:	2301      	movs	r3, #1
 8009368:	461a      	mov	r2, r3
 800936a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800936e:	9221      	str	r2, [sp, #132]	@ 0x84
 8009370:	e00b      	b.n	800938a <_dtoa_r+0x25a>
 8009372:	2301      	movs	r3, #1
 8009374:	e7f3      	b.n	800935e <_dtoa_r+0x22e>
 8009376:	2300      	movs	r3, #0
 8009378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800937a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800937c:	18fb      	adds	r3, r7, r3
 800937e:	9308      	str	r3, [sp, #32]
 8009380:	3301      	adds	r3, #1
 8009382:	2b01      	cmp	r3, #1
 8009384:	9307      	str	r3, [sp, #28]
 8009386:	bfb8      	it	lt
 8009388:	2301      	movlt	r3, #1
 800938a:	2100      	movs	r1, #0
 800938c:	2204      	movs	r2, #4
 800938e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009392:	f102 0514 	add.w	r5, r2, #20
 8009396:	429d      	cmp	r5, r3
 8009398:	d91f      	bls.n	80093da <_dtoa_r+0x2aa>
 800939a:	6041      	str	r1, [r0, #4]
 800939c:	4658      	mov	r0, fp
 800939e:	f000 fd8d 	bl	8009ebc <_Balloc>
 80093a2:	4682      	mov	sl, r0
 80093a4:	2800      	cmp	r0, #0
 80093a6:	d139      	bne.n	800941c <_dtoa_r+0x2ec>
 80093a8:	4602      	mov	r2, r0
 80093aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80093ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009418 <_dtoa_r+0x2e8>)
 80093b0:	e6d2      	b.n	8009158 <_dtoa_r+0x28>
 80093b2:	2301      	movs	r3, #1
 80093b4:	e7e0      	b.n	8009378 <_dtoa_r+0x248>
 80093b6:	2401      	movs	r4, #1
 80093b8:	2300      	movs	r3, #0
 80093ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093bc:	9320      	str	r3, [sp, #128]	@ 0x80
 80093be:	f04f 33ff 	mov.w	r3, #4294967295
 80093c2:	2200      	movs	r2, #0
 80093c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80093c8:	2312      	movs	r3, #18
 80093ca:	e7d0      	b.n	800936e <_dtoa_r+0x23e>
 80093cc:	2301      	movs	r3, #1
 80093ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093d0:	e7f5      	b.n	80093be <_dtoa_r+0x28e>
 80093d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80093d8:	e7d7      	b.n	800938a <_dtoa_r+0x25a>
 80093da:	3101      	adds	r1, #1
 80093dc:	0052      	lsls	r2, r2, #1
 80093de:	e7d8      	b.n	8009392 <_dtoa_r+0x262>
 80093e0:	636f4361 	.word	0x636f4361
 80093e4:	3fd287a7 	.word	0x3fd287a7
 80093e8:	8b60c8b3 	.word	0x8b60c8b3
 80093ec:	3fc68a28 	.word	0x3fc68a28
 80093f0:	509f79fb 	.word	0x509f79fb
 80093f4:	3fd34413 	.word	0x3fd34413
 80093f8:	0800df22 	.word	0x0800df22
 80093fc:	0800df39 	.word	0x0800df39
 8009400:	7ff00000 	.word	0x7ff00000
 8009404:	0800df1e 	.word	0x0800df1e
 8009408:	0800e279 	.word	0x0800e279
 800940c:	0800e278 	.word	0x0800e278
 8009410:	3ff80000 	.word	0x3ff80000
 8009414:	0800e030 	.word	0x0800e030
 8009418:	0800df91 	.word	0x0800df91
 800941c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009420:	6018      	str	r0, [r3, #0]
 8009422:	9b07      	ldr	r3, [sp, #28]
 8009424:	2b0e      	cmp	r3, #14
 8009426:	f200 80a4 	bhi.w	8009572 <_dtoa_r+0x442>
 800942a:	2c00      	cmp	r4, #0
 800942c:	f000 80a1 	beq.w	8009572 <_dtoa_r+0x442>
 8009430:	2f00      	cmp	r7, #0
 8009432:	dd33      	ble.n	800949c <_dtoa_r+0x36c>
 8009434:	4b86      	ldr	r3, [pc, #536]	@ (8009650 <_dtoa_r+0x520>)
 8009436:	f007 020f 	and.w	r2, r7, #15
 800943a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800943e:	05f8      	lsls	r0, r7, #23
 8009440:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009444:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009448:	ea4f 1427 	mov.w	r4, r7, asr #4
 800944c:	d516      	bpl.n	800947c <_dtoa_r+0x34c>
 800944e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009452:	4b80      	ldr	r3, [pc, #512]	@ (8009654 <_dtoa_r+0x524>)
 8009454:	2603      	movs	r6, #3
 8009456:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800945a:	f7f7 f967 	bl	800072c <__aeabi_ddiv>
 800945e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009462:	f004 040f 	and.w	r4, r4, #15
 8009466:	4d7b      	ldr	r5, [pc, #492]	@ (8009654 <_dtoa_r+0x524>)
 8009468:	b954      	cbnz	r4, 8009480 <_dtoa_r+0x350>
 800946a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800946e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009472:	f7f7 f95b 	bl	800072c <__aeabi_ddiv>
 8009476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800947a:	e028      	b.n	80094ce <_dtoa_r+0x39e>
 800947c:	2602      	movs	r6, #2
 800947e:	e7f2      	b.n	8009466 <_dtoa_r+0x336>
 8009480:	07e1      	lsls	r1, r4, #31
 8009482:	d508      	bpl.n	8009496 <_dtoa_r+0x366>
 8009484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009488:	e9d5 2300 	ldrd	r2, r3, [r5]
 800948c:	f7f7 f824 	bl	80004d8 <__aeabi_dmul>
 8009490:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009494:	3601      	adds	r6, #1
 8009496:	1064      	asrs	r4, r4, #1
 8009498:	3508      	adds	r5, #8
 800949a:	e7e5      	b.n	8009468 <_dtoa_r+0x338>
 800949c:	f000 80d2 	beq.w	8009644 <_dtoa_r+0x514>
 80094a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094a4:	427c      	negs	r4, r7
 80094a6:	4b6a      	ldr	r3, [pc, #424]	@ (8009650 <_dtoa_r+0x520>)
 80094a8:	f004 020f 	and.w	r2, r4, #15
 80094ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b4:	f7f7 f810 	bl	80004d8 <__aeabi_dmul>
 80094b8:	2602      	movs	r6, #2
 80094ba:	2300      	movs	r3, #0
 80094bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094c0:	4d64      	ldr	r5, [pc, #400]	@ (8009654 <_dtoa_r+0x524>)
 80094c2:	1124      	asrs	r4, r4, #4
 80094c4:	2c00      	cmp	r4, #0
 80094c6:	f040 80b2 	bne.w	800962e <_dtoa_r+0x4fe>
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1d3      	bne.n	8009476 <_dtoa_r+0x346>
 80094ce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80094d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 80b7 	beq.w	8009648 <_dtoa_r+0x518>
 80094da:	2200      	movs	r2, #0
 80094dc:	4620      	mov	r0, r4
 80094de:	4629      	mov	r1, r5
 80094e0:	4b5d      	ldr	r3, [pc, #372]	@ (8009658 <_dtoa_r+0x528>)
 80094e2:	f7f7 fa6b 	bl	80009bc <__aeabi_dcmplt>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	f000 80ae 	beq.w	8009648 <_dtoa_r+0x518>
 80094ec:	9b07      	ldr	r3, [sp, #28]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 80aa 	beq.w	8009648 <_dtoa_r+0x518>
 80094f4:	9b08      	ldr	r3, [sp, #32]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	dd37      	ble.n	800956a <_dtoa_r+0x43a>
 80094fa:	1e7b      	subs	r3, r7, #1
 80094fc:	4620      	mov	r0, r4
 80094fe:	9304      	str	r3, [sp, #16]
 8009500:	2200      	movs	r2, #0
 8009502:	4629      	mov	r1, r5
 8009504:	4b55      	ldr	r3, [pc, #340]	@ (800965c <_dtoa_r+0x52c>)
 8009506:	f7f6 ffe7 	bl	80004d8 <__aeabi_dmul>
 800950a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800950e:	9c08      	ldr	r4, [sp, #32]
 8009510:	3601      	adds	r6, #1
 8009512:	4630      	mov	r0, r6
 8009514:	f7f6 ff76 	bl	8000404 <__aeabi_i2d>
 8009518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800951c:	f7f6 ffdc 	bl	80004d8 <__aeabi_dmul>
 8009520:	2200      	movs	r2, #0
 8009522:	4b4f      	ldr	r3, [pc, #316]	@ (8009660 <_dtoa_r+0x530>)
 8009524:	f7f6 fe22 	bl	800016c <__adddf3>
 8009528:	4605      	mov	r5, r0
 800952a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800952e:	2c00      	cmp	r4, #0
 8009530:	f040 809a 	bne.w	8009668 <_dtoa_r+0x538>
 8009534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009538:	2200      	movs	r2, #0
 800953a:	4b4a      	ldr	r3, [pc, #296]	@ (8009664 <_dtoa_r+0x534>)
 800953c:	f7f6 fe14 	bl	8000168 <__aeabi_dsub>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009548:	462a      	mov	r2, r5
 800954a:	4633      	mov	r3, r6
 800954c:	f7f7 fa54 	bl	80009f8 <__aeabi_dcmpgt>
 8009550:	2800      	cmp	r0, #0
 8009552:	f040 828e 	bne.w	8009a72 <_dtoa_r+0x942>
 8009556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800955a:	462a      	mov	r2, r5
 800955c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009560:	f7f7 fa2c 	bl	80009bc <__aeabi_dcmplt>
 8009564:	2800      	cmp	r0, #0
 8009566:	f040 8127 	bne.w	80097b8 <_dtoa_r+0x688>
 800956a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800956e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009572:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009574:	2b00      	cmp	r3, #0
 8009576:	f2c0 8163 	blt.w	8009840 <_dtoa_r+0x710>
 800957a:	2f0e      	cmp	r7, #14
 800957c:	f300 8160 	bgt.w	8009840 <_dtoa_r+0x710>
 8009580:	4b33      	ldr	r3, [pc, #204]	@ (8009650 <_dtoa_r+0x520>)
 8009582:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009586:	e9d3 3400 	ldrd	r3, r4, [r3]
 800958a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800958e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009590:	2b00      	cmp	r3, #0
 8009592:	da03      	bge.n	800959c <_dtoa_r+0x46c>
 8009594:	9b07      	ldr	r3, [sp, #28]
 8009596:	2b00      	cmp	r3, #0
 8009598:	f340 8100 	ble.w	800979c <_dtoa_r+0x66c>
 800959c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095a0:	4656      	mov	r6, sl
 80095a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095a6:	4620      	mov	r0, r4
 80095a8:	4629      	mov	r1, r5
 80095aa:	f7f7 f8bf 	bl	800072c <__aeabi_ddiv>
 80095ae:	f7f7 fa43 	bl	8000a38 <__aeabi_d2iz>
 80095b2:	4680      	mov	r8, r0
 80095b4:	f7f6 ff26 	bl	8000404 <__aeabi_i2d>
 80095b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095bc:	f7f6 ff8c 	bl	80004d8 <__aeabi_dmul>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4620      	mov	r0, r4
 80095c6:	4629      	mov	r1, r5
 80095c8:	f7f6 fdce 	bl	8000168 <__aeabi_dsub>
 80095cc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80095d0:	9d07      	ldr	r5, [sp, #28]
 80095d2:	f806 4b01 	strb.w	r4, [r6], #1
 80095d6:	eba6 040a 	sub.w	r4, r6, sl
 80095da:	42a5      	cmp	r5, r4
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	f040 8116 	bne.w	8009810 <_dtoa_r+0x6e0>
 80095e4:	f7f6 fdc2 	bl	800016c <__adddf3>
 80095e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ec:	4604      	mov	r4, r0
 80095ee:	460d      	mov	r5, r1
 80095f0:	f7f7 fa02 	bl	80009f8 <__aeabi_dcmpgt>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	f040 80f8 	bne.w	80097ea <_dtoa_r+0x6ba>
 80095fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095fe:	4620      	mov	r0, r4
 8009600:	4629      	mov	r1, r5
 8009602:	f7f7 f9d1 	bl	80009a8 <__aeabi_dcmpeq>
 8009606:	b118      	cbz	r0, 8009610 <_dtoa_r+0x4e0>
 8009608:	f018 0f01 	tst.w	r8, #1
 800960c:	f040 80ed 	bne.w	80097ea <_dtoa_r+0x6ba>
 8009610:	4649      	mov	r1, r9
 8009612:	4658      	mov	r0, fp
 8009614:	f000 fc92 	bl	8009f3c <_Bfree>
 8009618:	2300      	movs	r3, #0
 800961a:	7033      	strb	r3, [r6, #0]
 800961c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800961e:	3701      	adds	r7, #1
 8009620:	601f      	str	r7, [r3, #0]
 8009622:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 8320 	beq.w	8009c6a <_dtoa_r+0xb3a>
 800962a:	601e      	str	r6, [r3, #0]
 800962c:	e31d      	b.n	8009c6a <_dtoa_r+0xb3a>
 800962e:	07e2      	lsls	r2, r4, #31
 8009630:	d505      	bpl.n	800963e <_dtoa_r+0x50e>
 8009632:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009636:	f7f6 ff4f 	bl	80004d8 <__aeabi_dmul>
 800963a:	2301      	movs	r3, #1
 800963c:	3601      	adds	r6, #1
 800963e:	1064      	asrs	r4, r4, #1
 8009640:	3508      	adds	r5, #8
 8009642:	e73f      	b.n	80094c4 <_dtoa_r+0x394>
 8009644:	2602      	movs	r6, #2
 8009646:	e742      	b.n	80094ce <_dtoa_r+0x39e>
 8009648:	9c07      	ldr	r4, [sp, #28]
 800964a:	9704      	str	r7, [sp, #16]
 800964c:	e761      	b.n	8009512 <_dtoa_r+0x3e2>
 800964e:	bf00      	nop
 8009650:	0800e030 	.word	0x0800e030
 8009654:	0800e008 	.word	0x0800e008
 8009658:	3ff00000 	.word	0x3ff00000
 800965c:	40240000 	.word	0x40240000
 8009660:	401c0000 	.word	0x401c0000
 8009664:	40140000 	.word	0x40140000
 8009668:	4b70      	ldr	r3, [pc, #448]	@ (800982c <_dtoa_r+0x6fc>)
 800966a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800966c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009670:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009674:	4454      	add	r4, sl
 8009676:	2900      	cmp	r1, #0
 8009678:	d045      	beq.n	8009706 <_dtoa_r+0x5d6>
 800967a:	2000      	movs	r0, #0
 800967c:	496c      	ldr	r1, [pc, #432]	@ (8009830 <_dtoa_r+0x700>)
 800967e:	f7f7 f855 	bl	800072c <__aeabi_ddiv>
 8009682:	4633      	mov	r3, r6
 8009684:	462a      	mov	r2, r5
 8009686:	f7f6 fd6f 	bl	8000168 <__aeabi_dsub>
 800968a:	4656      	mov	r6, sl
 800968c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009694:	f7f7 f9d0 	bl	8000a38 <__aeabi_d2iz>
 8009698:	4605      	mov	r5, r0
 800969a:	f7f6 feb3 	bl	8000404 <__aeabi_i2d>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096a6:	f7f6 fd5f 	bl	8000168 <__aeabi_dsub>
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	3530      	adds	r5, #48	@ 0x30
 80096b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096b8:	f806 5b01 	strb.w	r5, [r6], #1
 80096bc:	f7f7 f97e 	bl	80009bc <__aeabi_dcmplt>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d163      	bne.n	800978c <_dtoa_r+0x65c>
 80096c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096c8:	2000      	movs	r0, #0
 80096ca:	495a      	ldr	r1, [pc, #360]	@ (8009834 <_dtoa_r+0x704>)
 80096cc:	f7f6 fd4c 	bl	8000168 <__aeabi_dsub>
 80096d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096d4:	f7f7 f972 	bl	80009bc <__aeabi_dcmplt>
 80096d8:	2800      	cmp	r0, #0
 80096da:	f040 8087 	bne.w	80097ec <_dtoa_r+0x6bc>
 80096de:	42a6      	cmp	r6, r4
 80096e0:	f43f af43 	beq.w	800956a <_dtoa_r+0x43a>
 80096e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80096e8:	2200      	movs	r2, #0
 80096ea:	4b53      	ldr	r3, [pc, #332]	@ (8009838 <_dtoa_r+0x708>)
 80096ec:	f7f6 fef4 	bl	80004d8 <__aeabi_dmul>
 80096f0:	2200      	movs	r2, #0
 80096f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096fa:	4b4f      	ldr	r3, [pc, #316]	@ (8009838 <_dtoa_r+0x708>)
 80096fc:	f7f6 feec 	bl	80004d8 <__aeabi_dmul>
 8009700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009704:	e7c4      	b.n	8009690 <_dtoa_r+0x560>
 8009706:	4631      	mov	r1, r6
 8009708:	4628      	mov	r0, r5
 800970a:	f7f6 fee5 	bl	80004d8 <__aeabi_dmul>
 800970e:	4656      	mov	r6, sl
 8009710:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009714:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800971a:	f7f7 f98d 	bl	8000a38 <__aeabi_d2iz>
 800971e:	4605      	mov	r5, r0
 8009720:	f7f6 fe70 	bl	8000404 <__aeabi_i2d>
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800972c:	f7f6 fd1c 	bl	8000168 <__aeabi_dsub>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	3530      	adds	r5, #48	@ 0x30
 8009736:	f806 5b01 	strb.w	r5, [r6], #1
 800973a:	42a6      	cmp	r6, r4
 800973c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009740:	f04f 0200 	mov.w	r2, #0
 8009744:	d124      	bne.n	8009790 <_dtoa_r+0x660>
 8009746:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800974a:	4b39      	ldr	r3, [pc, #228]	@ (8009830 <_dtoa_r+0x700>)
 800974c:	f7f6 fd0e 	bl	800016c <__adddf3>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009758:	f7f7 f94e 	bl	80009f8 <__aeabi_dcmpgt>
 800975c:	2800      	cmp	r0, #0
 800975e:	d145      	bne.n	80097ec <_dtoa_r+0x6bc>
 8009760:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009764:	2000      	movs	r0, #0
 8009766:	4932      	ldr	r1, [pc, #200]	@ (8009830 <_dtoa_r+0x700>)
 8009768:	f7f6 fcfe 	bl	8000168 <__aeabi_dsub>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009774:	f7f7 f922 	bl	80009bc <__aeabi_dcmplt>
 8009778:	2800      	cmp	r0, #0
 800977a:	f43f aef6 	beq.w	800956a <_dtoa_r+0x43a>
 800977e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009780:	1e73      	subs	r3, r6, #1
 8009782:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009784:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009788:	2b30      	cmp	r3, #48	@ 0x30
 800978a:	d0f8      	beq.n	800977e <_dtoa_r+0x64e>
 800978c:	9f04      	ldr	r7, [sp, #16]
 800978e:	e73f      	b.n	8009610 <_dtoa_r+0x4e0>
 8009790:	4b29      	ldr	r3, [pc, #164]	@ (8009838 <_dtoa_r+0x708>)
 8009792:	f7f6 fea1 	bl	80004d8 <__aeabi_dmul>
 8009796:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800979a:	e7bc      	b.n	8009716 <_dtoa_r+0x5e6>
 800979c:	d10c      	bne.n	80097b8 <_dtoa_r+0x688>
 800979e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097a2:	2200      	movs	r2, #0
 80097a4:	4b25      	ldr	r3, [pc, #148]	@ (800983c <_dtoa_r+0x70c>)
 80097a6:	f7f6 fe97 	bl	80004d8 <__aeabi_dmul>
 80097aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097ae:	f7f7 f919 	bl	80009e4 <__aeabi_dcmpge>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f000 815b 	beq.w	8009a6e <_dtoa_r+0x93e>
 80097b8:	2400      	movs	r4, #0
 80097ba:	4625      	mov	r5, r4
 80097bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097be:	4656      	mov	r6, sl
 80097c0:	43db      	mvns	r3, r3
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	2700      	movs	r7, #0
 80097c6:	4621      	mov	r1, r4
 80097c8:	4658      	mov	r0, fp
 80097ca:	f000 fbb7 	bl	8009f3c <_Bfree>
 80097ce:	2d00      	cmp	r5, #0
 80097d0:	d0dc      	beq.n	800978c <_dtoa_r+0x65c>
 80097d2:	b12f      	cbz	r7, 80097e0 <_dtoa_r+0x6b0>
 80097d4:	42af      	cmp	r7, r5
 80097d6:	d003      	beq.n	80097e0 <_dtoa_r+0x6b0>
 80097d8:	4639      	mov	r1, r7
 80097da:	4658      	mov	r0, fp
 80097dc:	f000 fbae 	bl	8009f3c <_Bfree>
 80097e0:	4629      	mov	r1, r5
 80097e2:	4658      	mov	r0, fp
 80097e4:	f000 fbaa 	bl	8009f3c <_Bfree>
 80097e8:	e7d0      	b.n	800978c <_dtoa_r+0x65c>
 80097ea:	9704      	str	r7, [sp, #16]
 80097ec:	4633      	mov	r3, r6
 80097ee:	461e      	mov	r6, r3
 80097f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097f4:	2a39      	cmp	r2, #57	@ 0x39
 80097f6:	d107      	bne.n	8009808 <_dtoa_r+0x6d8>
 80097f8:	459a      	cmp	sl, r3
 80097fa:	d1f8      	bne.n	80097ee <_dtoa_r+0x6be>
 80097fc:	9a04      	ldr	r2, [sp, #16]
 80097fe:	3201      	adds	r2, #1
 8009800:	9204      	str	r2, [sp, #16]
 8009802:	2230      	movs	r2, #48	@ 0x30
 8009804:	f88a 2000 	strb.w	r2, [sl]
 8009808:	781a      	ldrb	r2, [r3, #0]
 800980a:	3201      	adds	r2, #1
 800980c:	701a      	strb	r2, [r3, #0]
 800980e:	e7bd      	b.n	800978c <_dtoa_r+0x65c>
 8009810:	2200      	movs	r2, #0
 8009812:	4b09      	ldr	r3, [pc, #36]	@ (8009838 <_dtoa_r+0x708>)
 8009814:	f7f6 fe60 	bl	80004d8 <__aeabi_dmul>
 8009818:	2200      	movs	r2, #0
 800981a:	2300      	movs	r3, #0
 800981c:	4604      	mov	r4, r0
 800981e:	460d      	mov	r5, r1
 8009820:	f7f7 f8c2 	bl	80009a8 <__aeabi_dcmpeq>
 8009824:	2800      	cmp	r0, #0
 8009826:	f43f aebc 	beq.w	80095a2 <_dtoa_r+0x472>
 800982a:	e6f1      	b.n	8009610 <_dtoa_r+0x4e0>
 800982c:	0800e030 	.word	0x0800e030
 8009830:	3fe00000 	.word	0x3fe00000
 8009834:	3ff00000 	.word	0x3ff00000
 8009838:	40240000 	.word	0x40240000
 800983c:	40140000 	.word	0x40140000
 8009840:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009842:	2a00      	cmp	r2, #0
 8009844:	f000 80db 	beq.w	80099fe <_dtoa_r+0x8ce>
 8009848:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800984a:	2a01      	cmp	r2, #1
 800984c:	f300 80bf 	bgt.w	80099ce <_dtoa_r+0x89e>
 8009850:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009852:	2a00      	cmp	r2, #0
 8009854:	f000 80b7 	beq.w	80099c6 <_dtoa_r+0x896>
 8009858:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800985c:	4646      	mov	r6, r8
 800985e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009862:	2101      	movs	r1, #1
 8009864:	441a      	add	r2, r3
 8009866:	4658      	mov	r0, fp
 8009868:	4498      	add	r8, r3
 800986a:	9209      	str	r2, [sp, #36]	@ 0x24
 800986c:	f000 fc64 	bl	800a138 <__i2b>
 8009870:	4605      	mov	r5, r0
 8009872:	b15e      	cbz	r6, 800988c <_dtoa_r+0x75c>
 8009874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009876:	2b00      	cmp	r3, #0
 8009878:	dd08      	ble.n	800988c <_dtoa_r+0x75c>
 800987a:	42b3      	cmp	r3, r6
 800987c:	bfa8      	it	ge
 800987e:	4633      	movge	r3, r6
 8009880:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009882:	eba8 0803 	sub.w	r8, r8, r3
 8009886:	1af6      	subs	r6, r6, r3
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	9309      	str	r3, [sp, #36]	@ 0x24
 800988c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800988e:	b1f3      	cbz	r3, 80098ce <_dtoa_r+0x79e>
 8009890:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 80b7 	beq.w	8009a06 <_dtoa_r+0x8d6>
 8009898:	b18c      	cbz	r4, 80098be <_dtoa_r+0x78e>
 800989a:	4629      	mov	r1, r5
 800989c:	4622      	mov	r2, r4
 800989e:	4658      	mov	r0, fp
 80098a0:	f000 fd08 	bl	800a2b4 <__pow5mult>
 80098a4:	464a      	mov	r2, r9
 80098a6:	4601      	mov	r1, r0
 80098a8:	4605      	mov	r5, r0
 80098aa:	4658      	mov	r0, fp
 80098ac:	f000 fc5a 	bl	800a164 <__multiply>
 80098b0:	4649      	mov	r1, r9
 80098b2:	9004      	str	r0, [sp, #16]
 80098b4:	4658      	mov	r0, fp
 80098b6:	f000 fb41 	bl	8009f3c <_Bfree>
 80098ba:	9b04      	ldr	r3, [sp, #16]
 80098bc:	4699      	mov	r9, r3
 80098be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098c0:	1b1a      	subs	r2, r3, r4
 80098c2:	d004      	beq.n	80098ce <_dtoa_r+0x79e>
 80098c4:	4649      	mov	r1, r9
 80098c6:	4658      	mov	r0, fp
 80098c8:	f000 fcf4 	bl	800a2b4 <__pow5mult>
 80098cc:	4681      	mov	r9, r0
 80098ce:	2101      	movs	r1, #1
 80098d0:	4658      	mov	r0, fp
 80098d2:	f000 fc31 	bl	800a138 <__i2b>
 80098d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098d8:	4604      	mov	r4, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 81c9 	beq.w	8009c72 <_dtoa_r+0xb42>
 80098e0:	461a      	mov	r2, r3
 80098e2:	4601      	mov	r1, r0
 80098e4:	4658      	mov	r0, fp
 80098e6:	f000 fce5 	bl	800a2b4 <__pow5mult>
 80098ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80098ec:	4604      	mov	r4, r0
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	f300 808f 	bgt.w	8009a12 <_dtoa_r+0x8e2>
 80098f4:	9b02      	ldr	r3, [sp, #8]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f040 8087 	bne.w	8009a0a <_dtoa_r+0x8da>
 80098fc:	9b03      	ldr	r3, [sp, #12]
 80098fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009902:	2b00      	cmp	r3, #0
 8009904:	f040 8083 	bne.w	8009a0e <_dtoa_r+0x8de>
 8009908:	9b03      	ldr	r3, [sp, #12]
 800990a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800990e:	0d1b      	lsrs	r3, r3, #20
 8009910:	051b      	lsls	r3, r3, #20
 8009912:	b12b      	cbz	r3, 8009920 <_dtoa_r+0x7f0>
 8009914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009916:	f108 0801 	add.w	r8, r8, #1
 800991a:	3301      	adds	r3, #1
 800991c:	9309      	str	r3, [sp, #36]	@ 0x24
 800991e:	2301      	movs	r3, #1
 8009920:	930a      	str	r3, [sp, #40]	@ 0x28
 8009922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 81aa 	beq.w	8009c7e <_dtoa_r+0xb4e>
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009930:	6918      	ldr	r0, [r3, #16]
 8009932:	f000 fbb5 	bl	800a0a0 <__hi0bits>
 8009936:	f1c0 0020 	rsb	r0, r0, #32
 800993a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800993c:	4418      	add	r0, r3
 800993e:	f010 001f 	ands.w	r0, r0, #31
 8009942:	d071      	beq.n	8009a28 <_dtoa_r+0x8f8>
 8009944:	f1c0 0320 	rsb	r3, r0, #32
 8009948:	2b04      	cmp	r3, #4
 800994a:	dd65      	ble.n	8009a18 <_dtoa_r+0x8e8>
 800994c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800994e:	f1c0 001c 	rsb	r0, r0, #28
 8009952:	4403      	add	r3, r0
 8009954:	4480      	add	r8, r0
 8009956:	4406      	add	r6, r0
 8009958:	9309      	str	r3, [sp, #36]	@ 0x24
 800995a:	f1b8 0f00 	cmp.w	r8, #0
 800995e:	dd05      	ble.n	800996c <_dtoa_r+0x83c>
 8009960:	4649      	mov	r1, r9
 8009962:	4642      	mov	r2, r8
 8009964:	4658      	mov	r0, fp
 8009966:	f000 fcff 	bl	800a368 <__lshift>
 800996a:	4681      	mov	r9, r0
 800996c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800996e:	2b00      	cmp	r3, #0
 8009970:	dd05      	ble.n	800997e <_dtoa_r+0x84e>
 8009972:	4621      	mov	r1, r4
 8009974:	461a      	mov	r2, r3
 8009976:	4658      	mov	r0, fp
 8009978:	f000 fcf6 	bl	800a368 <__lshift>
 800997c:	4604      	mov	r4, r0
 800997e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009980:	2b00      	cmp	r3, #0
 8009982:	d053      	beq.n	8009a2c <_dtoa_r+0x8fc>
 8009984:	4621      	mov	r1, r4
 8009986:	4648      	mov	r0, r9
 8009988:	f000 fd5a 	bl	800a440 <__mcmp>
 800998c:	2800      	cmp	r0, #0
 800998e:	da4d      	bge.n	8009a2c <_dtoa_r+0x8fc>
 8009990:	1e7b      	subs	r3, r7, #1
 8009992:	4649      	mov	r1, r9
 8009994:	9304      	str	r3, [sp, #16]
 8009996:	220a      	movs	r2, #10
 8009998:	2300      	movs	r3, #0
 800999a:	4658      	mov	r0, fp
 800999c:	f000 faf0 	bl	8009f80 <__multadd>
 80099a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099a2:	4681      	mov	r9, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 816c 	beq.w	8009c82 <_dtoa_r+0xb52>
 80099aa:	2300      	movs	r3, #0
 80099ac:	4629      	mov	r1, r5
 80099ae:	220a      	movs	r2, #10
 80099b0:	4658      	mov	r0, fp
 80099b2:	f000 fae5 	bl	8009f80 <__multadd>
 80099b6:	9b08      	ldr	r3, [sp, #32]
 80099b8:	4605      	mov	r5, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	dc61      	bgt.n	8009a82 <_dtoa_r+0x952>
 80099be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	dc3b      	bgt.n	8009a3c <_dtoa_r+0x90c>
 80099c4:	e05d      	b.n	8009a82 <_dtoa_r+0x952>
 80099c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099c8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80099cc:	e746      	b.n	800985c <_dtoa_r+0x72c>
 80099ce:	9b07      	ldr	r3, [sp, #28]
 80099d0:	1e5c      	subs	r4, r3, #1
 80099d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099d4:	42a3      	cmp	r3, r4
 80099d6:	bfbf      	itttt	lt
 80099d8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80099da:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80099dc:	1ae3      	sublt	r3, r4, r3
 80099de:	18d2      	addlt	r2, r2, r3
 80099e0:	bfa8      	it	ge
 80099e2:	1b1c      	subge	r4, r3, r4
 80099e4:	9b07      	ldr	r3, [sp, #28]
 80099e6:	bfbe      	ittt	lt
 80099e8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80099ea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80099ec:	2400      	movlt	r4, #0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	bfb5      	itete	lt
 80099f2:	eba8 0603 	sublt.w	r6, r8, r3
 80099f6:	4646      	movge	r6, r8
 80099f8:	2300      	movlt	r3, #0
 80099fa:	9b07      	ldrge	r3, [sp, #28]
 80099fc:	e730      	b.n	8009860 <_dtoa_r+0x730>
 80099fe:	4646      	mov	r6, r8
 8009a00:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a02:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009a04:	e735      	b.n	8009872 <_dtoa_r+0x742>
 8009a06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a08:	e75c      	b.n	80098c4 <_dtoa_r+0x794>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	e788      	b.n	8009920 <_dtoa_r+0x7f0>
 8009a0e:	9b02      	ldr	r3, [sp, #8]
 8009a10:	e786      	b.n	8009920 <_dtoa_r+0x7f0>
 8009a12:	2300      	movs	r3, #0
 8009a14:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a16:	e788      	b.n	800992a <_dtoa_r+0x7fa>
 8009a18:	d09f      	beq.n	800995a <_dtoa_r+0x82a>
 8009a1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a1c:	331c      	adds	r3, #28
 8009a1e:	441a      	add	r2, r3
 8009a20:	4498      	add	r8, r3
 8009a22:	441e      	add	r6, r3
 8009a24:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a26:	e798      	b.n	800995a <_dtoa_r+0x82a>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	e7f6      	b.n	8009a1a <_dtoa_r+0x8ea>
 8009a2c:	9b07      	ldr	r3, [sp, #28]
 8009a2e:	9704      	str	r7, [sp, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	dc20      	bgt.n	8009a76 <_dtoa_r+0x946>
 8009a34:	9308      	str	r3, [sp, #32]
 8009a36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	dd1e      	ble.n	8009a7a <_dtoa_r+0x94a>
 8009a3c:	9b08      	ldr	r3, [sp, #32]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f47f aebc 	bne.w	80097bc <_dtoa_r+0x68c>
 8009a44:	4621      	mov	r1, r4
 8009a46:	2205      	movs	r2, #5
 8009a48:	4658      	mov	r0, fp
 8009a4a:	f000 fa99 	bl	8009f80 <__multadd>
 8009a4e:	4601      	mov	r1, r0
 8009a50:	4604      	mov	r4, r0
 8009a52:	4648      	mov	r0, r9
 8009a54:	f000 fcf4 	bl	800a440 <__mcmp>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	f77f aeaf 	ble.w	80097bc <_dtoa_r+0x68c>
 8009a5e:	2331      	movs	r3, #49	@ 0x31
 8009a60:	4656      	mov	r6, sl
 8009a62:	f806 3b01 	strb.w	r3, [r6], #1
 8009a66:	9b04      	ldr	r3, [sp, #16]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	9304      	str	r3, [sp, #16]
 8009a6c:	e6aa      	b.n	80097c4 <_dtoa_r+0x694>
 8009a6e:	9c07      	ldr	r4, [sp, #28]
 8009a70:	9704      	str	r7, [sp, #16]
 8009a72:	4625      	mov	r5, r4
 8009a74:	e7f3      	b.n	8009a5e <_dtoa_r+0x92e>
 8009a76:	9b07      	ldr	r3, [sp, #28]
 8009a78:	9308      	str	r3, [sp, #32]
 8009a7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 8104 	beq.w	8009c8a <_dtoa_r+0xb5a>
 8009a82:	2e00      	cmp	r6, #0
 8009a84:	dd05      	ble.n	8009a92 <_dtoa_r+0x962>
 8009a86:	4629      	mov	r1, r5
 8009a88:	4632      	mov	r2, r6
 8009a8a:	4658      	mov	r0, fp
 8009a8c:	f000 fc6c 	bl	800a368 <__lshift>
 8009a90:	4605      	mov	r5, r0
 8009a92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d05a      	beq.n	8009b4e <_dtoa_r+0xa1e>
 8009a98:	4658      	mov	r0, fp
 8009a9a:	6869      	ldr	r1, [r5, #4]
 8009a9c:	f000 fa0e 	bl	8009ebc <_Balloc>
 8009aa0:	4606      	mov	r6, r0
 8009aa2:	b928      	cbnz	r0, 8009ab0 <_dtoa_r+0x980>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009aaa:	4b83      	ldr	r3, [pc, #524]	@ (8009cb8 <_dtoa_r+0xb88>)
 8009aac:	f7ff bb54 	b.w	8009158 <_dtoa_r+0x28>
 8009ab0:	692a      	ldr	r2, [r5, #16]
 8009ab2:	f105 010c 	add.w	r1, r5, #12
 8009ab6:	3202      	adds	r2, #2
 8009ab8:	0092      	lsls	r2, r2, #2
 8009aba:	300c      	adds	r0, #12
 8009abc:	f7ff fa9d 	bl	8008ffa <memcpy>
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4658      	mov	r0, fp
 8009ac6:	f000 fc4f 	bl	800a368 <__lshift>
 8009aca:	462f      	mov	r7, r5
 8009acc:	4605      	mov	r5, r0
 8009ace:	f10a 0301 	add.w	r3, sl, #1
 8009ad2:	9307      	str	r3, [sp, #28]
 8009ad4:	9b08      	ldr	r3, [sp, #32]
 8009ad6:	4453      	add	r3, sl
 8009ad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ada:	9b02      	ldr	r3, [sp, #8]
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ae2:	9b07      	ldr	r3, [sp, #28]
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	4648      	mov	r0, r9
 8009aea:	9302      	str	r3, [sp, #8]
 8009aec:	f7ff fa98 	bl	8009020 <quorem>
 8009af0:	4639      	mov	r1, r7
 8009af2:	9008      	str	r0, [sp, #32]
 8009af4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009af8:	4648      	mov	r0, r9
 8009afa:	f000 fca1 	bl	800a440 <__mcmp>
 8009afe:	462a      	mov	r2, r5
 8009b00:	9009      	str	r0, [sp, #36]	@ 0x24
 8009b02:	4621      	mov	r1, r4
 8009b04:	4658      	mov	r0, fp
 8009b06:	f000 fcb7 	bl	800a478 <__mdiff>
 8009b0a:	68c2      	ldr	r2, [r0, #12]
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	bb02      	cbnz	r2, 8009b52 <_dtoa_r+0xa22>
 8009b10:	4601      	mov	r1, r0
 8009b12:	4648      	mov	r0, r9
 8009b14:	f000 fc94 	bl	800a440 <__mcmp>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	4658      	mov	r0, fp
 8009b1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009b20:	f000 fa0c 	bl	8009f3c <_Bfree>
 8009b24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009b26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009b28:	9e07      	ldr	r6, [sp, #28]
 8009b2a:	ea43 0102 	orr.w	r1, r3, r2
 8009b2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b30:	4319      	orrs	r1, r3
 8009b32:	d110      	bne.n	8009b56 <_dtoa_r+0xa26>
 8009b34:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b38:	d029      	beq.n	8009b8e <_dtoa_r+0xa5e>
 8009b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	dd02      	ble.n	8009b46 <_dtoa_r+0xa16>
 8009b40:	9b08      	ldr	r3, [sp, #32]
 8009b42:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009b46:	9b02      	ldr	r3, [sp, #8]
 8009b48:	f883 8000 	strb.w	r8, [r3]
 8009b4c:	e63b      	b.n	80097c6 <_dtoa_r+0x696>
 8009b4e:	4628      	mov	r0, r5
 8009b50:	e7bb      	b.n	8009aca <_dtoa_r+0x99a>
 8009b52:	2201      	movs	r2, #1
 8009b54:	e7e1      	b.n	8009b1a <_dtoa_r+0x9ea>
 8009b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	db04      	blt.n	8009b66 <_dtoa_r+0xa36>
 8009b5c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009b5e:	430b      	orrs	r3, r1
 8009b60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b62:	430b      	orrs	r3, r1
 8009b64:	d120      	bne.n	8009ba8 <_dtoa_r+0xa78>
 8009b66:	2a00      	cmp	r2, #0
 8009b68:	dded      	ble.n	8009b46 <_dtoa_r+0xa16>
 8009b6a:	4649      	mov	r1, r9
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	4658      	mov	r0, fp
 8009b70:	f000 fbfa 	bl	800a368 <__lshift>
 8009b74:	4621      	mov	r1, r4
 8009b76:	4681      	mov	r9, r0
 8009b78:	f000 fc62 	bl	800a440 <__mcmp>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	dc03      	bgt.n	8009b88 <_dtoa_r+0xa58>
 8009b80:	d1e1      	bne.n	8009b46 <_dtoa_r+0xa16>
 8009b82:	f018 0f01 	tst.w	r8, #1
 8009b86:	d0de      	beq.n	8009b46 <_dtoa_r+0xa16>
 8009b88:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b8c:	d1d8      	bne.n	8009b40 <_dtoa_r+0xa10>
 8009b8e:	2339      	movs	r3, #57	@ 0x39
 8009b90:	9a02      	ldr	r2, [sp, #8]
 8009b92:	7013      	strb	r3, [r2, #0]
 8009b94:	4633      	mov	r3, r6
 8009b96:	461e      	mov	r6, r3
 8009b98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	2a39      	cmp	r2, #57	@ 0x39
 8009ba0:	d052      	beq.n	8009c48 <_dtoa_r+0xb18>
 8009ba2:	3201      	adds	r2, #1
 8009ba4:	701a      	strb	r2, [r3, #0]
 8009ba6:	e60e      	b.n	80097c6 <_dtoa_r+0x696>
 8009ba8:	2a00      	cmp	r2, #0
 8009baa:	dd07      	ble.n	8009bbc <_dtoa_r+0xa8c>
 8009bac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bb0:	d0ed      	beq.n	8009b8e <_dtoa_r+0xa5e>
 8009bb2:	9a02      	ldr	r2, [sp, #8]
 8009bb4:	f108 0301 	add.w	r3, r8, #1
 8009bb8:	7013      	strb	r3, [r2, #0]
 8009bba:	e604      	b.n	80097c6 <_dtoa_r+0x696>
 8009bbc:	9b07      	ldr	r3, [sp, #28]
 8009bbe:	9a07      	ldr	r2, [sp, #28]
 8009bc0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009bc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d028      	beq.n	8009c1c <_dtoa_r+0xaec>
 8009bca:	4649      	mov	r1, r9
 8009bcc:	2300      	movs	r3, #0
 8009bce:	220a      	movs	r2, #10
 8009bd0:	4658      	mov	r0, fp
 8009bd2:	f000 f9d5 	bl	8009f80 <__multadd>
 8009bd6:	42af      	cmp	r7, r5
 8009bd8:	4681      	mov	r9, r0
 8009bda:	f04f 0300 	mov.w	r3, #0
 8009bde:	f04f 020a 	mov.w	r2, #10
 8009be2:	4639      	mov	r1, r7
 8009be4:	4658      	mov	r0, fp
 8009be6:	d107      	bne.n	8009bf8 <_dtoa_r+0xac8>
 8009be8:	f000 f9ca 	bl	8009f80 <__multadd>
 8009bec:	4607      	mov	r7, r0
 8009bee:	4605      	mov	r5, r0
 8009bf0:	9b07      	ldr	r3, [sp, #28]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	9307      	str	r3, [sp, #28]
 8009bf6:	e774      	b.n	8009ae2 <_dtoa_r+0x9b2>
 8009bf8:	f000 f9c2 	bl	8009f80 <__multadd>
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	4607      	mov	r7, r0
 8009c00:	2300      	movs	r3, #0
 8009c02:	220a      	movs	r2, #10
 8009c04:	4658      	mov	r0, fp
 8009c06:	f000 f9bb 	bl	8009f80 <__multadd>
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	e7f0      	b.n	8009bf0 <_dtoa_r+0xac0>
 8009c0e:	9b08      	ldr	r3, [sp, #32]
 8009c10:	2700      	movs	r7, #0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	bfcc      	ite	gt
 8009c16:	461e      	movgt	r6, r3
 8009c18:	2601      	movle	r6, #1
 8009c1a:	4456      	add	r6, sl
 8009c1c:	4649      	mov	r1, r9
 8009c1e:	2201      	movs	r2, #1
 8009c20:	4658      	mov	r0, fp
 8009c22:	f000 fba1 	bl	800a368 <__lshift>
 8009c26:	4621      	mov	r1, r4
 8009c28:	4681      	mov	r9, r0
 8009c2a:	f000 fc09 	bl	800a440 <__mcmp>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	dcb0      	bgt.n	8009b94 <_dtoa_r+0xa64>
 8009c32:	d102      	bne.n	8009c3a <_dtoa_r+0xb0a>
 8009c34:	f018 0f01 	tst.w	r8, #1
 8009c38:	d1ac      	bne.n	8009b94 <_dtoa_r+0xa64>
 8009c3a:	4633      	mov	r3, r6
 8009c3c:	461e      	mov	r6, r3
 8009c3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c42:	2a30      	cmp	r2, #48	@ 0x30
 8009c44:	d0fa      	beq.n	8009c3c <_dtoa_r+0xb0c>
 8009c46:	e5be      	b.n	80097c6 <_dtoa_r+0x696>
 8009c48:	459a      	cmp	sl, r3
 8009c4a:	d1a4      	bne.n	8009b96 <_dtoa_r+0xa66>
 8009c4c:	9b04      	ldr	r3, [sp, #16]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	9304      	str	r3, [sp, #16]
 8009c52:	2331      	movs	r3, #49	@ 0x31
 8009c54:	f88a 3000 	strb.w	r3, [sl]
 8009c58:	e5b5      	b.n	80097c6 <_dtoa_r+0x696>
 8009c5a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009c5c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009cbc <_dtoa_r+0xb8c>
 8009c60:	b11b      	cbz	r3, 8009c6a <_dtoa_r+0xb3a>
 8009c62:	f10a 0308 	add.w	r3, sl, #8
 8009c66:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009c68:	6013      	str	r3, [r2, #0]
 8009c6a:	4650      	mov	r0, sl
 8009c6c:	b017      	add	sp, #92	@ 0x5c
 8009c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	f77f ae3d 	ble.w	80098f4 <_dtoa_r+0x7c4>
 8009c7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c7e:	2001      	movs	r0, #1
 8009c80:	e65b      	b.n	800993a <_dtoa_r+0x80a>
 8009c82:	9b08      	ldr	r3, [sp, #32]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f77f aed6 	ble.w	8009a36 <_dtoa_r+0x906>
 8009c8a:	4656      	mov	r6, sl
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	4648      	mov	r0, r9
 8009c90:	f7ff f9c6 	bl	8009020 <quorem>
 8009c94:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c98:	9b08      	ldr	r3, [sp, #32]
 8009c9a:	f806 8b01 	strb.w	r8, [r6], #1
 8009c9e:	eba6 020a 	sub.w	r2, r6, sl
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	ddb3      	ble.n	8009c0e <_dtoa_r+0xade>
 8009ca6:	4649      	mov	r1, r9
 8009ca8:	2300      	movs	r3, #0
 8009caa:	220a      	movs	r2, #10
 8009cac:	4658      	mov	r0, fp
 8009cae:	f000 f967 	bl	8009f80 <__multadd>
 8009cb2:	4681      	mov	r9, r0
 8009cb4:	e7ea      	b.n	8009c8c <_dtoa_r+0xb5c>
 8009cb6:	bf00      	nop
 8009cb8:	0800df91 	.word	0x0800df91
 8009cbc:	0800df15 	.word	0x0800df15

08009cc0 <_free_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	2900      	cmp	r1, #0
 8009cc6:	d040      	beq.n	8009d4a <_free_r+0x8a>
 8009cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ccc:	1f0c      	subs	r4, r1, #4
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	bfb8      	it	lt
 8009cd2:	18e4      	addlt	r4, r4, r3
 8009cd4:	f000 f8e6 	bl	8009ea4 <__malloc_lock>
 8009cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8009d4c <_free_r+0x8c>)
 8009cda:	6813      	ldr	r3, [r2, #0]
 8009cdc:	b933      	cbnz	r3, 8009cec <_free_r+0x2c>
 8009cde:	6063      	str	r3, [r4, #4]
 8009ce0:	6014      	str	r4, [r2, #0]
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ce8:	f000 b8e2 	b.w	8009eb0 <__malloc_unlock>
 8009cec:	42a3      	cmp	r3, r4
 8009cee:	d908      	bls.n	8009d02 <_free_r+0x42>
 8009cf0:	6820      	ldr	r0, [r4, #0]
 8009cf2:	1821      	adds	r1, r4, r0
 8009cf4:	428b      	cmp	r3, r1
 8009cf6:	bf01      	itttt	eq
 8009cf8:	6819      	ldreq	r1, [r3, #0]
 8009cfa:	685b      	ldreq	r3, [r3, #4]
 8009cfc:	1809      	addeq	r1, r1, r0
 8009cfe:	6021      	streq	r1, [r4, #0]
 8009d00:	e7ed      	b.n	8009cde <_free_r+0x1e>
 8009d02:	461a      	mov	r2, r3
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	b10b      	cbz	r3, 8009d0c <_free_r+0x4c>
 8009d08:	42a3      	cmp	r3, r4
 8009d0a:	d9fa      	bls.n	8009d02 <_free_r+0x42>
 8009d0c:	6811      	ldr	r1, [r2, #0]
 8009d0e:	1850      	adds	r0, r2, r1
 8009d10:	42a0      	cmp	r0, r4
 8009d12:	d10b      	bne.n	8009d2c <_free_r+0x6c>
 8009d14:	6820      	ldr	r0, [r4, #0]
 8009d16:	4401      	add	r1, r0
 8009d18:	1850      	adds	r0, r2, r1
 8009d1a:	4283      	cmp	r3, r0
 8009d1c:	6011      	str	r1, [r2, #0]
 8009d1e:	d1e0      	bne.n	8009ce2 <_free_r+0x22>
 8009d20:	6818      	ldr	r0, [r3, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	4408      	add	r0, r1
 8009d26:	6010      	str	r0, [r2, #0]
 8009d28:	6053      	str	r3, [r2, #4]
 8009d2a:	e7da      	b.n	8009ce2 <_free_r+0x22>
 8009d2c:	d902      	bls.n	8009d34 <_free_r+0x74>
 8009d2e:	230c      	movs	r3, #12
 8009d30:	602b      	str	r3, [r5, #0]
 8009d32:	e7d6      	b.n	8009ce2 <_free_r+0x22>
 8009d34:	6820      	ldr	r0, [r4, #0]
 8009d36:	1821      	adds	r1, r4, r0
 8009d38:	428b      	cmp	r3, r1
 8009d3a:	bf01      	itttt	eq
 8009d3c:	6819      	ldreq	r1, [r3, #0]
 8009d3e:	685b      	ldreq	r3, [r3, #4]
 8009d40:	1809      	addeq	r1, r1, r0
 8009d42:	6021      	streq	r1, [r4, #0]
 8009d44:	6063      	str	r3, [r4, #4]
 8009d46:	6054      	str	r4, [r2, #4]
 8009d48:	e7cb      	b.n	8009ce2 <_free_r+0x22>
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	200006f0 	.word	0x200006f0

08009d50 <malloc>:
 8009d50:	4b02      	ldr	r3, [pc, #8]	@ (8009d5c <malloc+0xc>)
 8009d52:	4601      	mov	r1, r0
 8009d54:	6818      	ldr	r0, [r3, #0]
 8009d56:	f000 b825 	b.w	8009da4 <_malloc_r>
 8009d5a:	bf00      	nop
 8009d5c:	20000028 	.word	0x20000028

08009d60 <sbrk_aligned>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	4e0f      	ldr	r6, [pc, #60]	@ (8009da0 <sbrk_aligned+0x40>)
 8009d64:	460c      	mov	r4, r1
 8009d66:	6831      	ldr	r1, [r6, #0]
 8009d68:	4605      	mov	r5, r0
 8009d6a:	b911      	cbnz	r1, 8009d72 <sbrk_aligned+0x12>
 8009d6c:	f002 fb2e 	bl	800c3cc <_sbrk_r>
 8009d70:	6030      	str	r0, [r6, #0]
 8009d72:	4621      	mov	r1, r4
 8009d74:	4628      	mov	r0, r5
 8009d76:	f002 fb29 	bl	800c3cc <_sbrk_r>
 8009d7a:	1c43      	adds	r3, r0, #1
 8009d7c:	d103      	bne.n	8009d86 <sbrk_aligned+0x26>
 8009d7e:	f04f 34ff 	mov.w	r4, #4294967295
 8009d82:	4620      	mov	r0, r4
 8009d84:	bd70      	pop	{r4, r5, r6, pc}
 8009d86:	1cc4      	adds	r4, r0, #3
 8009d88:	f024 0403 	bic.w	r4, r4, #3
 8009d8c:	42a0      	cmp	r0, r4
 8009d8e:	d0f8      	beq.n	8009d82 <sbrk_aligned+0x22>
 8009d90:	1a21      	subs	r1, r4, r0
 8009d92:	4628      	mov	r0, r5
 8009d94:	f002 fb1a 	bl	800c3cc <_sbrk_r>
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d1f2      	bne.n	8009d82 <sbrk_aligned+0x22>
 8009d9c:	e7ef      	b.n	8009d7e <sbrk_aligned+0x1e>
 8009d9e:	bf00      	nop
 8009da0:	200006ec 	.word	0x200006ec

08009da4 <_malloc_r>:
 8009da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009da8:	1ccd      	adds	r5, r1, #3
 8009daa:	f025 0503 	bic.w	r5, r5, #3
 8009dae:	3508      	adds	r5, #8
 8009db0:	2d0c      	cmp	r5, #12
 8009db2:	bf38      	it	cc
 8009db4:	250c      	movcc	r5, #12
 8009db6:	2d00      	cmp	r5, #0
 8009db8:	4606      	mov	r6, r0
 8009dba:	db01      	blt.n	8009dc0 <_malloc_r+0x1c>
 8009dbc:	42a9      	cmp	r1, r5
 8009dbe:	d904      	bls.n	8009dca <_malloc_r+0x26>
 8009dc0:	230c      	movs	r3, #12
 8009dc2:	6033      	str	r3, [r6, #0]
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ea0 <_malloc_r+0xfc>
 8009dce:	f000 f869 	bl	8009ea4 <__malloc_lock>
 8009dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8009dd6:	461c      	mov	r4, r3
 8009dd8:	bb44      	cbnz	r4, 8009e2c <_malloc_r+0x88>
 8009dda:	4629      	mov	r1, r5
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f7ff ffbf 	bl	8009d60 <sbrk_aligned>
 8009de2:	1c43      	adds	r3, r0, #1
 8009de4:	4604      	mov	r4, r0
 8009de6:	d158      	bne.n	8009e9a <_malloc_r+0xf6>
 8009de8:	f8d8 4000 	ldr.w	r4, [r8]
 8009dec:	4627      	mov	r7, r4
 8009dee:	2f00      	cmp	r7, #0
 8009df0:	d143      	bne.n	8009e7a <_malloc_r+0xd6>
 8009df2:	2c00      	cmp	r4, #0
 8009df4:	d04b      	beq.n	8009e8e <_malloc_r+0xea>
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	4639      	mov	r1, r7
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	eb04 0903 	add.w	r9, r4, r3
 8009e00:	f002 fae4 	bl	800c3cc <_sbrk_r>
 8009e04:	4581      	cmp	r9, r0
 8009e06:	d142      	bne.n	8009e8e <_malloc_r+0xea>
 8009e08:	6821      	ldr	r1, [r4, #0]
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	1a6d      	subs	r5, r5, r1
 8009e0e:	4629      	mov	r1, r5
 8009e10:	f7ff ffa6 	bl	8009d60 <sbrk_aligned>
 8009e14:	3001      	adds	r0, #1
 8009e16:	d03a      	beq.n	8009e8e <_malloc_r+0xea>
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	442b      	add	r3, r5
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	bb62      	cbnz	r2, 8009e80 <_malloc_r+0xdc>
 8009e26:	f8c8 7000 	str.w	r7, [r8]
 8009e2a:	e00f      	b.n	8009e4c <_malloc_r+0xa8>
 8009e2c:	6822      	ldr	r2, [r4, #0]
 8009e2e:	1b52      	subs	r2, r2, r5
 8009e30:	d420      	bmi.n	8009e74 <_malloc_r+0xd0>
 8009e32:	2a0b      	cmp	r2, #11
 8009e34:	d917      	bls.n	8009e66 <_malloc_r+0xc2>
 8009e36:	1961      	adds	r1, r4, r5
 8009e38:	42a3      	cmp	r3, r4
 8009e3a:	6025      	str	r5, [r4, #0]
 8009e3c:	bf18      	it	ne
 8009e3e:	6059      	strne	r1, [r3, #4]
 8009e40:	6863      	ldr	r3, [r4, #4]
 8009e42:	bf08      	it	eq
 8009e44:	f8c8 1000 	streq.w	r1, [r8]
 8009e48:	5162      	str	r2, [r4, r5]
 8009e4a:	604b      	str	r3, [r1, #4]
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f000 f82f 	bl	8009eb0 <__malloc_unlock>
 8009e52:	f104 000b 	add.w	r0, r4, #11
 8009e56:	1d23      	adds	r3, r4, #4
 8009e58:	f020 0007 	bic.w	r0, r0, #7
 8009e5c:	1ac2      	subs	r2, r0, r3
 8009e5e:	bf1c      	itt	ne
 8009e60:	1a1b      	subne	r3, r3, r0
 8009e62:	50a3      	strne	r3, [r4, r2]
 8009e64:	e7af      	b.n	8009dc6 <_malloc_r+0x22>
 8009e66:	6862      	ldr	r2, [r4, #4]
 8009e68:	42a3      	cmp	r3, r4
 8009e6a:	bf0c      	ite	eq
 8009e6c:	f8c8 2000 	streq.w	r2, [r8]
 8009e70:	605a      	strne	r2, [r3, #4]
 8009e72:	e7eb      	b.n	8009e4c <_malloc_r+0xa8>
 8009e74:	4623      	mov	r3, r4
 8009e76:	6864      	ldr	r4, [r4, #4]
 8009e78:	e7ae      	b.n	8009dd8 <_malloc_r+0x34>
 8009e7a:	463c      	mov	r4, r7
 8009e7c:	687f      	ldr	r7, [r7, #4]
 8009e7e:	e7b6      	b.n	8009dee <_malloc_r+0x4a>
 8009e80:	461a      	mov	r2, r3
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	42a3      	cmp	r3, r4
 8009e86:	d1fb      	bne.n	8009e80 <_malloc_r+0xdc>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	6053      	str	r3, [r2, #4]
 8009e8c:	e7de      	b.n	8009e4c <_malloc_r+0xa8>
 8009e8e:	230c      	movs	r3, #12
 8009e90:	4630      	mov	r0, r6
 8009e92:	6033      	str	r3, [r6, #0]
 8009e94:	f000 f80c 	bl	8009eb0 <__malloc_unlock>
 8009e98:	e794      	b.n	8009dc4 <_malloc_r+0x20>
 8009e9a:	6005      	str	r5, [r0, #0]
 8009e9c:	e7d6      	b.n	8009e4c <_malloc_r+0xa8>
 8009e9e:	bf00      	nop
 8009ea0:	200006f0 	.word	0x200006f0

08009ea4 <__malloc_lock>:
 8009ea4:	4801      	ldr	r0, [pc, #4]	@ (8009eac <__malloc_lock+0x8>)
 8009ea6:	f7ff b898 	b.w	8008fda <__retarget_lock_acquire_recursive>
 8009eaa:	bf00      	nop
 8009eac:	200006e8 	.word	0x200006e8

08009eb0 <__malloc_unlock>:
 8009eb0:	4801      	ldr	r0, [pc, #4]	@ (8009eb8 <__malloc_unlock+0x8>)
 8009eb2:	f7ff b893 	b.w	8008fdc <__retarget_lock_release_recursive>
 8009eb6:	bf00      	nop
 8009eb8:	200006e8 	.word	0x200006e8

08009ebc <_Balloc>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	69c6      	ldr	r6, [r0, #28]
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	b976      	cbnz	r6, 8009ee4 <_Balloc+0x28>
 8009ec6:	2010      	movs	r0, #16
 8009ec8:	f7ff ff42 	bl	8009d50 <malloc>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	61e0      	str	r0, [r4, #28]
 8009ed0:	b920      	cbnz	r0, 8009edc <_Balloc+0x20>
 8009ed2:	216b      	movs	r1, #107	@ 0x6b
 8009ed4:	4b17      	ldr	r3, [pc, #92]	@ (8009f34 <_Balloc+0x78>)
 8009ed6:	4818      	ldr	r0, [pc, #96]	@ (8009f38 <_Balloc+0x7c>)
 8009ed8:	f002 fa8e 	bl	800c3f8 <__assert_func>
 8009edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ee0:	6006      	str	r6, [r0, #0]
 8009ee2:	60c6      	str	r6, [r0, #12]
 8009ee4:	69e6      	ldr	r6, [r4, #28]
 8009ee6:	68f3      	ldr	r3, [r6, #12]
 8009ee8:	b183      	cbz	r3, 8009f0c <_Balloc+0x50>
 8009eea:	69e3      	ldr	r3, [r4, #28]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ef2:	b9b8      	cbnz	r0, 8009f24 <_Balloc+0x68>
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	fa01 f605 	lsl.w	r6, r1, r5
 8009efa:	1d72      	adds	r2, r6, #5
 8009efc:	4620      	mov	r0, r4
 8009efe:	0092      	lsls	r2, r2, #2
 8009f00:	f002 fa98 	bl	800c434 <_calloc_r>
 8009f04:	b160      	cbz	r0, 8009f20 <_Balloc+0x64>
 8009f06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f0a:	e00e      	b.n	8009f2a <_Balloc+0x6e>
 8009f0c:	2221      	movs	r2, #33	@ 0x21
 8009f0e:	2104      	movs	r1, #4
 8009f10:	4620      	mov	r0, r4
 8009f12:	f002 fa8f 	bl	800c434 <_calloc_r>
 8009f16:	69e3      	ldr	r3, [r4, #28]
 8009f18:	60f0      	str	r0, [r6, #12]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e4      	bne.n	8009eea <_Balloc+0x2e>
 8009f20:	2000      	movs	r0, #0
 8009f22:	bd70      	pop	{r4, r5, r6, pc}
 8009f24:	6802      	ldr	r2, [r0, #0]
 8009f26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f30:	e7f7      	b.n	8009f22 <_Balloc+0x66>
 8009f32:	bf00      	nop
 8009f34:	0800df22 	.word	0x0800df22
 8009f38:	0800dfa2 	.word	0x0800dfa2

08009f3c <_Bfree>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	69c6      	ldr	r6, [r0, #28]
 8009f40:	4605      	mov	r5, r0
 8009f42:	460c      	mov	r4, r1
 8009f44:	b976      	cbnz	r6, 8009f64 <_Bfree+0x28>
 8009f46:	2010      	movs	r0, #16
 8009f48:	f7ff ff02 	bl	8009d50 <malloc>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	61e8      	str	r0, [r5, #28]
 8009f50:	b920      	cbnz	r0, 8009f5c <_Bfree+0x20>
 8009f52:	218f      	movs	r1, #143	@ 0x8f
 8009f54:	4b08      	ldr	r3, [pc, #32]	@ (8009f78 <_Bfree+0x3c>)
 8009f56:	4809      	ldr	r0, [pc, #36]	@ (8009f7c <_Bfree+0x40>)
 8009f58:	f002 fa4e 	bl	800c3f8 <__assert_func>
 8009f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f60:	6006      	str	r6, [r0, #0]
 8009f62:	60c6      	str	r6, [r0, #12]
 8009f64:	b13c      	cbz	r4, 8009f76 <_Bfree+0x3a>
 8009f66:	69eb      	ldr	r3, [r5, #28]
 8009f68:	6862      	ldr	r2, [r4, #4]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f70:	6021      	str	r1, [r4, #0]
 8009f72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f76:	bd70      	pop	{r4, r5, r6, pc}
 8009f78:	0800df22 	.word	0x0800df22
 8009f7c:	0800dfa2 	.word	0x0800dfa2

08009f80 <__multadd>:
 8009f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f84:	4607      	mov	r7, r0
 8009f86:	460c      	mov	r4, r1
 8009f88:	461e      	mov	r6, r3
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	690d      	ldr	r5, [r1, #16]
 8009f8e:	f101 0c14 	add.w	ip, r1, #20
 8009f92:	f8dc 3000 	ldr.w	r3, [ip]
 8009f96:	3001      	adds	r0, #1
 8009f98:	b299      	uxth	r1, r3
 8009f9a:	fb02 6101 	mla	r1, r2, r1, r6
 8009f9e:	0c1e      	lsrs	r6, r3, #16
 8009fa0:	0c0b      	lsrs	r3, r1, #16
 8009fa2:	fb02 3306 	mla	r3, r2, r6, r3
 8009fa6:	b289      	uxth	r1, r1
 8009fa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fac:	4285      	cmp	r5, r0
 8009fae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fb2:	f84c 1b04 	str.w	r1, [ip], #4
 8009fb6:	dcec      	bgt.n	8009f92 <__multadd+0x12>
 8009fb8:	b30e      	cbz	r6, 8009ffe <__multadd+0x7e>
 8009fba:	68a3      	ldr	r3, [r4, #8]
 8009fbc:	42ab      	cmp	r3, r5
 8009fbe:	dc19      	bgt.n	8009ff4 <__multadd+0x74>
 8009fc0:	6861      	ldr	r1, [r4, #4]
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	3101      	adds	r1, #1
 8009fc6:	f7ff ff79 	bl	8009ebc <_Balloc>
 8009fca:	4680      	mov	r8, r0
 8009fcc:	b928      	cbnz	r0, 8009fda <__multadd+0x5a>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	21ba      	movs	r1, #186	@ 0xba
 8009fd2:	4b0c      	ldr	r3, [pc, #48]	@ (800a004 <__multadd+0x84>)
 8009fd4:	480c      	ldr	r0, [pc, #48]	@ (800a008 <__multadd+0x88>)
 8009fd6:	f002 fa0f 	bl	800c3f8 <__assert_func>
 8009fda:	6922      	ldr	r2, [r4, #16]
 8009fdc:	f104 010c 	add.w	r1, r4, #12
 8009fe0:	3202      	adds	r2, #2
 8009fe2:	0092      	lsls	r2, r2, #2
 8009fe4:	300c      	adds	r0, #12
 8009fe6:	f7ff f808 	bl	8008ffa <memcpy>
 8009fea:	4621      	mov	r1, r4
 8009fec:	4638      	mov	r0, r7
 8009fee:	f7ff ffa5 	bl	8009f3c <_Bfree>
 8009ff2:	4644      	mov	r4, r8
 8009ff4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ff8:	3501      	adds	r5, #1
 8009ffa:	615e      	str	r6, [r3, #20]
 8009ffc:	6125      	str	r5, [r4, #16]
 8009ffe:	4620      	mov	r0, r4
 800a000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a004:	0800df91 	.word	0x0800df91
 800a008:	0800dfa2 	.word	0x0800dfa2

0800a00c <__s2b>:
 800a00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a010:	4615      	mov	r5, r2
 800a012:	2209      	movs	r2, #9
 800a014:	461f      	mov	r7, r3
 800a016:	3308      	adds	r3, #8
 800a018:	460c      	mov	r4, r1
 800a01a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a01e:	4606      	mov	r6, r0
 800a020:	2201      	movs	r2, #1
 800a022:	2100      	movs	r1, #0
 800a024:	429a      	cmp	r2, r3
 800a026:	db09      	blt.n	800a03c <__s2b+0x30>
 800a028:	4630      	mov	r0, r6
 800a02a:	f7ff ff47 	bl	8009ebc <_Balloc>
 800a02e:	b940      	cbnz	r0, 800a042 <__s2b+0x36>
 800a030:	4602      	mov	r2, r0
 800a032:	21d3      	movs	r1, #211	@ 0xd3
 800a034:	4b18      	ldr	r3, [pc, #96]	@ (800a098 <__s2b+0x8c>)
 800a036:	4819      	ldr	r0, [pc, #100]	@ (800a09c <__s2b+0x90>)
 800a038:	f002 f9de 	bl	800c3f8 <__assert_func>
 800a03c:	0052      	lsls	r2, r2, #1
 800a03e:	3101      	adds	r1, #1
 800a040:	e7f0      	b.n	800a024 <__s2b+0x18>
 800a042:	9b08      	ldr	r3, [sp, #32]
 800a044:	2d09      	cmp	r5, #9
 800a046:	6143      	str	r3, [r0, #20]
 800a048:	f04f 0301 	mov.w	r3, #1
 800a04c:	6103      	str	r3, [r0, #16]
 800a04e:	dd16      	ble.n	800a07e <__s2b+0x72>
 800a050:	f104 0909 	add.w	r9, r4, #9
 800a054:	46c8      	mov	r8, r9
 800a056:	442c      	add	r4, r5
 800a058:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a05c:	4601      	mov	r1, r0
 800a05e:	220a      	movs	r2, #10
 800a060:	4630      	mov	r0, r6
 800a062:	3b30      	subs	r3, #48	@ 0x30
 800a064:	f7ff ff8c 	bl	8009f80 <__multadd>
 800a068:	45a0      	cmp	r8, r4
 800a06a:	d1f5      	bne.n	800a058 <__s2b+0x4c>
 800a06c:	f1a5 0408 	sub.w	r4, r5, #8
 800a070:	444c      	add	r4, r9
 800a072:	1b2d      	subs	r5, r5, r4
 800a074:	1963      	adds	r3, r4, r5
 800a076:	42bb      	cmp	r3, r7
 800a078:	db04      	blt.n	800a084 <__s2b+0x78>
 800a07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a07e:	2509      	movs	r5, #9
 800a080:	340a      	adds	r4, #10
 800a082:	e7f6      	b.n	800a072 <__s2b+0x66>
 800a084:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a088:	4601      	mov	r1, r0
 800a08a:	220a      	movs	r2, #10
 800a08c:	4630      	mov	r0, r6
 800a08e:	3b30      	subs	r3, #48	@ 0x30
 800a090:	f7ff ff76 	bl	8009f80 <__multadd>
 800a094:	e7ee      	b.n	800a074 <__s2b+0x68>
 800a096:	bf00      	nop
 800a098:	0800df91 	.word	0x0800df91
 800a09c:	0800dfa2 	.word	0x0800dfa2

0800a0a0 <__hi0bits>:
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a0a6:	bf3a      	itte	cc
 800a0a8:	0403      	lslcc	r3, r0, #16
 800a0aa:	2010      	movcc	r0, #16
 800a0ac:	2000      	movcs	r0, #0
 800a0ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0b2:	bf3c      	itt	cc
 800a0b4:	021b      	lslcc	r3, r3, #8
 800a0b6:	3008      	addcc	r0, #8
 800a0b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0bc:	bf3c      	itt	cc
 800a0be:	011b      	lslcc	r3, r3, #4
 800a0c0:	3004      	addcc	r0, #4
 800a0c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0c6:	bf3c      	itt	cc
 800a0c8:	009b      	lslcc	r3, r3, #2
 800a0ca:	3002      	addcc	r0, #2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	db05      	blt.n	800a0dc <__hi0bits+0x3c>
 800a0d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a0d4:	f100 0001 	add.w	r0, r0, #1
 800a0d8:	bf08      	it	eq
 800a0da:	2020      	moveq	r0, #32
 800a0dc:	4770      	bx	lr

0800a0de <__lo0bits>:
 800a0de:	6803      	ldr	r3, [r0, #0]
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	f013 0007 	ands.w	r0, r3, #7
 800a0e6:	d00b      	beq.n	800a100 <__lo0bits+0x22>
 800a0e8:	07d9      	lsls	r1, r3, #31
 800a0ea:	d421      	bmi.n	800a130 <__lo0bits+0x52>
 800a0ec:	0798      	lsls	r0, r3, #30
 800a0ee:	bf49      	itett	mi
 800a0f0:	085b      	lsrmi	r3, r3, #1
 800a0f2:	089b      	lsrpl	r3, r3, #2
 800a0f4:	2001      	movmi	r0, #1
 800a0f6:	6013      	strmi	r3, [r2, #0]
 800a0f8:	bf5c      	itt	pl
 800a0fa:	2002      	movpl	r0, #2
 800a0fc:	6013      	strpl	r3, [r2, #0]
 800a0fe:	4770      	bx	lr
 800a100:	b299      	uxth	r1, r3
 800a102:	b909      	cbnz	r1, 800a108 <__lo0bits+0x2a>
 800a104:	2010      	movs	r0, #16
 800a106:	0c1b      	lsrs	r3, r3, #16
 800a108:	b2d9      	uxtb	r1, r3
 800a10a:	b909      	cbnz	r1, 800a110 <__lo0bits+0x32>
 800a10c:	3008      	adds	r0, #8
 800a10e:	0a1b      	lsrs	r3, r3, #8
 800a110:	0719      	lsls	r1, r3, #28
 800a112:	bf04      	itt	eq
 800a114:	091b      	lsreq	r3, r3, #4
 800a116:	3004      	addeq	r0, #4
 800a118:	0799      	lsls	r1, r3, #30
 800a11a:	bf04      	itt	eq
 800a11c:	089b      	lsreq	r3, r3, #2
 800a11e:	3002      	addeq	r0, #2
 800a120:	07d9      	lsls	r1, r3, #31
 800a122:	d403      	bmi.n	800a12c <__lo0bits+0x4e>
 800a124:	085b      	lsrs	r3, r3, #1
 800a126:	f100 0001 	add.w	r0, r0, #1
 800a12a:	d003      	beq.n	800a134 <__lo0bits+0x56>
 800a12c:	6013      	str	r3, [r2, #0]
 800a12e:	4770      	bx	lr
 800a130:	2000      	movs	r0, #0
 800a132:	4770      	bx	lr
 800a134:	2020      	movs	r0, #32
 800a136:	4770      	bx	lr

0800a138 <__i2b>:
 800a138:	b510      	push	{r4, lr}
 800a13a:	460c      	mov	r4, r1
 800a13c:	2101      	movs	r1, #1
 800a13e:	f7ff febd 	bl	8009ebc <_Balloc>
 800a142:	4602      	mov	r2, r0
 800a144:	b928      	cbnz	r0, 800a152 <__i2b+0x1a>
 800a146:	f240 1145 	movw	r1, #325	@ 0x145
 800a14a:	4b04      	ldr	r3, [pc, #16]	@ (800a15c <__i2b+0x24>)
 800a14c:	4804      	ldr	r0, [pc, #16]	@ (800a160 <__i2b+0x28>)
 800a14e:	f002 f953 	bl	800c3f8 <__assert_func>
 800a152:	2301      	movs	r3, #1
 800a154:	6144      	str	r4, [r0, #20]
 800a156:	6103      	str	r3, [r0, #16]
 800a158:	bd10      	pop	{r4, pc}
 800a15a:	bf00      	nop
 800a15c:	0800df91 	.word	0x0800df91
 800a160:	0800dfa2 	.word	0x0800dfa2

0800a164 <__multiply>:
 800a164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a168:	4614      	mov	r4, r2
 800a16a:	690a      	ldr	r2, [r1, #16]
 800a16c:	6923      	ldr	r3, [r4, #16]
 800a16e:	460f      	mov	r7, r1
 800a170:	429a      	cmp	r2, r3
 800a172:	bfa2      	ittt	ge
 800a174:	4623      	movge	r3, r4
 800a176:	460c      	movge	r4, r1
 800a178:	461f      	movge	r7, r3
 800a17a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a17e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a182:	68a3      	ldr	r3, [r4, #8]
 800a184:	6861      	ldr	r1, [r4, #4]
 800a186:	eb0a 0609 	add.w	r6, sl, r9
 800a18a:	42b3      	cmp	r3, r6
 800a18c:	b085      	sub	sp, #20
 800a18e:	bfb8      	it	lt
 800a190:	3101      	addlt	r1, #1
 800a192:	f7ff fe93 	bl	8009ebc <_Balloc>
 800a196:	b930      	cbnz	r0, 800a1a6 <__multiply+0x42>
 800a198:	4602      	mov	r2, r0
 800a19a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a19e:	4b43      	ldr	r3, [pc, #268]	@ (800a2ac <__multiply+0x148>)
 800a1a0:	4843      	ldr	r0, [pc, #268]	@ (800a2b0 <__multiply+0x14c>)
 800a1a2:	f002 f929 	bl	800c3f8 <__assert_func>
 800a1a6:	f100 0514 	add.w	r5, r0, #20
 800a1aa:	462b      	mov	r3, r5
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a1b2:	4543      	cmp	r3, r8
 800a1b4:	d321      	bcc.n	800a1fa <__multiply+0x96>
 800a1b6:	f107 0114 	add.w	r1, r7, #20
 800a1ba:	f104 0214 	add.w	r2, r4, #20
 800a1be:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a1c2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a1c6:	9302      	str	r3, [sp, #8]
 800a1c8:	1b13      	subs	r3, r2, r4
 800a1ca:	3b15      	subs	r3, #21
 800a1cc:	f023 0303 	bic.w	r3, r3, #3
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	f104 0715 	add.w	r7, r4, #21
 800a1d6:	42ba      	cmp	r2, r7
 800a1d8:	bf38      	it	cc
 800a1da:	2304      	movcc	r3, #4
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	9b02      	ldr	r3, [sp, #8]
 800a1e0:	9103      	str	r1, [sp, #12]
 800a1e2:	428b      	cmp	r3, r1
 800a1e4:	d80c      	bhi.n	800a200 <__multiply+0x9c>
 800a1e6:	2e00      	cmp	r6, #0
 800a1e8:	dd03      	ble.n	800a1f2 <__multiply+0x8e>
 800a1ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d05a      	beq.n	800a2a8 <__multiply+0x144>
 800a1f2:	6106      	str	r6, [r0, #16]
 800a1f4:	b005      	add	sp, #20
 800a1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fa:	f843 2b04 	str.w	r2, [r3], #4
 800a1fe:	e7d8      	b.n	800a1b2 <__multiply+0x4e>
 800a200:	f8b1 a000 	ldrh.w	sl, [r1]
 800a204:	f1ba 0f00 	cmp.w	sl, #0
 800a208:	d023      	beq.n	800a252 <__multiply+0xee>
 800a20a:	46a9      	mov	r9, r5
 800a20c:	f04f 0c00 	mov.w	ip, #0
 800a210:	f104 0e14 	add.w	lr, r4, #20
 800a214:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a218:	f8d9 3000 	ldr.w	r3, [r9]
 800a21c:	fa1f fb87 	uxth.w	fp, r7
 800a220:	b29b      	uxth	r3, r3
 800a222:	fb0a 330b 	mla	r3, sl, fp, r3
 800a226:	4463      	add	r3, ip
 800a228:	f8d9 c000 	ldr.w	ip, [r9]
 800a22c:	0c3f      	lsrs	r7, r7, #16
 800a22e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a232:	fb0a c707 	mla	r7, sl, r7, ip
 800a236:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a240:	4572      	cmp	r2, lr
 800a242:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a246:	f849 3b04 	str.w	r3, [r9], #4
 800a24a:	d8e3      	bhi.n	800a214 <__multiply+0xb0>
 800a24c:	9b01      	ldr	r3, [sp, #4]
 800a24e:	f845 c003 	str.w	ip, [r5, r3]
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	3104      	adds	r1, #4
 800a256:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a25a:	f1b9 0f00 	cmp.w	r9, #0
 800a25e:	d021      	beq.n	800a2a4 <__multiply+0x140>
 800a260:	46ae      	mov	lr, r5
 800a262:	f04f 0a00 	mov.w	sl, #0
 800a266:	682b      	ldr	r3, [r5, #0]
 800a268:	f104 0c14 	add.w	ip, r4, #20
 800a26c:	f8bc b000 	ldrh.w	fp, [ip]
 800a270:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a274:	b29b      	uxth	r3, r3
 800a276:	fb09 770b 	mla	r7, r9, fp, r7
 800a27a:	4457      	add	r7, sl
 800a27c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a280:	f84e 3b04 	str.w	r3, [lr], #4
 800a284:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a288:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a28c:	f8be 3000 	ldrh.w	r3, [lr]
 800a290:	4562      	cmp	r2, ip
 800a292:	fb09 330a 	mla	r3, r9, sl, r3
 800a296:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a29a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a29e:	d8e5      	bhi.n	800a26c <__multiply+0x108>
 800a2a0:	9f01      	ldr	r7, [sp, #4]
 800a2a2:	51eb      	str	r3, [r5, r7]
 800a2a4:	3504      	adds	r5, #4
 800a2a6:	e79a      	b.n	800a1de <__multiply+0x7a>
 800a2a8:	3e01      	subs	r6, #1
 800a2aa:	e79c      	b.n	800a1e6 <__multiply+0x82>
 800a2ac:	0800df91 	.word	0x0800df91
 800a2b0:	0800dfa2 	.word	0x0800dfa2

0800a2b4 <__pow5mult>:
 800a2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2b8:	4615      	mov	r5, r2
 800a2ba:	f012 0203 	ands.w	r2, r2, #3
 800a2be:	4607      	mov	r7, r0
 800a2c0:	460e      	mov	r6, r1
 800a2c2:	d007      	beq.n	800a2d4 <__pow5mult+0x20>
 800a2c4:	4c25      	ldr	r4, [pc, #148]	@ (800a35c <__pow5mult+0xa8>)
 800a2c6:	3a01      	subs	r2, #1
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2ce:	f7ff fe57 	bl	8009f80 <__multadd>
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	10ad      	asrs	r5, r5, #2
 800a2d6:	d03d      	beq.n	800a354 <__pow5mult+0xa0>
 800a2d8:	69fc      	ldr	r4, [r7, #28]
 800a2da:	b97c      	cbnz	r4, 800a2fc <__pow5mult+0x48>
 800a2dc:	2010      	movs	r0, #16
 800a2de:	f7ff fd37 	bl	8009d50 <malloc>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	61f8      	str	r0, [r7, #28]
 800a2e6:	b928      	cbnz	r0, 800a2f4 <__pow5mult+0x40>
 800a2e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a2ec:	4b1c      	ldr	r3, [pc, #112]	@ (800a360 <__pow5mult+0xac>)
 800a2ee:	481d      	ldr	r0, [pc, #116]	@ (800a364 <__pow5mult+0xb0>)
 800a2f0:	f002 f882 	bl	800c3f8 <__assert_func>
 800a2f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2f8:	6004      	str	r4, [r0, #0]
 800a2fa:	60c4      	str	r4, [r0, #12]
 800a2fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a300:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a304:	b94c      	cbnz	r4, 800a31a <__pow5mult+0x66>
 800a306:	f240 2171 	movw	r1, #625	@ 0x271
 800a30a:	4638      	mov	r0, r7
 800a30c:	f7ff ff14 	bl	800a138 <__i2b>
 800a310:	2300      	movs	r3, #0
 800a312:	4604      	mov	r4, r0
 800a314:	f8c8 0008 	str.w	r0, [r8, #8]
 800a318:	6003      	str	r3, [r0, #0]
 800a31a:	f04f 0900 	mov.w	r9, #0
 800a31e:	07eb      	lsls	r3, r5, #31
 800a320:	d50a      	bpl.n	800a338 <__pow5mult+0x84>
 800a322:	4631      	mov	r1, r6
 800a324:	4622      	mov	r2, r4
 800a326:	4638      	mov	r0, r7
 800a328:	f7ff ff1c 	bl	800a164 <__multiply>
 800a32c:	4680      	mov	r8, r0
 800a32e:	4631      	mov	r1, r6
 800a330:	4638      	mov	r0, r7
 800a332:	f7ff fe03 	bl	8009f3c <_Bfree>
 800a336:	4646      	mov	r6, r8
 800a338:	106d      	asrs	r5, r5, #1
 800a33a:	d00b      	beq.n	800a354 <__pow5mult+0xa0>
 800a33c:	6820      	ldr	r0, [r4, #0]
 800a33e:	b938      	cbnz	r0, 800a350 <__pow5mult+0x9c>
 800a340:	4622      	mov	r2, r4
 800a342:	4621      	mov	r1, r4
 800a344:	4638      	mov	r0, r7
 800a346:	f7ff ff0d 	bl	800a164 <__multiply>
 800a34a:	6020      	str	r0, [r4, #0]
 800a34c:	f8c0 9000 	str.w	r9, [r0]
 800a350:	4604      	mov	r4, r0
 800a352:	e7e4      	b.n	800a31e <__pow5mult+0x6a>
 800a354:	4630      	mov	r0, r6
 800a356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a35a:	bf00      	nop
 800a35c:	0800dffc 	.word	0x0800dffc
 800a360:	0800df22 	.word	0x0800df22
 800a364:	0800dfa2 	.word	0x0800dfa2

0800a368 <__lshift>:
 800a368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a36c:	460c      	mov	r4, r1
 800a36e:	4607      	mov	r7, r0
 800a370:	4691      	mov	r9, r2
 800a372:	6923      	ldr	r3, [r4, #16]
 800a374:	6849      	ldr	r1, [r1, #4]
 800a376:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a37a:	68a3      	ldr	r3, [r4, #8]
 800a37c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a380:	f108 0601 	add.w	r6, r8, #1
 800a384:	42b3      	cmp	r3, r6
 800a386:	db0b      	blt.n	800a3a0 <__lshift+0x38>
 800a388:	4638      	mov	r0, r7
 800a38a:	f7ff fd97 	bl	8009ebc <_Balloc>
 800a38e:	4605      	mov	r5, r0
 800a390:	b948      	cbnz	r0, 800a3a6 <__lshift+0x3e>
 800a392:	4602      	mov	r2, r0
 800a394:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a398:	4b27      	ldr	r3, [pc, #156]	@ (800a438 <__lshift+0xd0>)
 800a39a:	4828      	ldr	r0, [pc, #160]	@ (800a43c <__lshift+0xd4>)
 800a39c:	f002 f82c 	bl	800c3f8 <__assert_func>
 800a3a0:	3101      	adds	r1, #1
 800a3a2:	005b      	lsls	r3, r3, #1
 800a3a4:	e7ee      	b.n	800a384 <__lshift+0x1c>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	f100 0114 	add.w	r1, r0, #20
 800a3ac:	f100 0210 	add.w	r2, r0, #16
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	4553      	cmp	r3, sl
 800a3b4:	db33      	blt.n	800a41e <__lshift+0xb6>
 800a3b6:	6920      	ldr	r0, [r4, #16]
 800a3b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3bc:	f104 0314 	add.w	r3, r4, #20
 800a3c0:	f019 091f 	ands.w	r9, r9, #31
 800a3c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3cc:	d02b      	beq.n	800a426 <__lshift+0xbe>
 800a3ce:	468a      	mov	sl, r1
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f1c9 0e20 	rsb	lr, r9, #32
 800a3d6:	6818      	ldr	r0, [r3, #0]
 800a3d8:	fa00 f009 	lsl.w	r0, r0, r9
 800a3dc:	4310      	orrs	r0, r2
 800a3de:	f84a 0b04 	str.w	r0, [sl], #4
 800a3e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e6:	459c      	cmp	ip, r3
 800a3e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3ec:	d8f3      	bhi.n	800a3d6 <__lshift+0x6e>
 800a3ee:	ebac 0304 	sub.w	r3, ip, r4
 800a3f2:	3b15      	subs	r3, #21
 800a3f4:	f023 0303 	bic.w	r3, r3, #3
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	f104 0015 	add.w	r0, r4, #21
 800a3fe:	4584      	cmp	ip, r0
 800a400:	bf38      	it	cc
 800a402:	2304      	movcc	r3, #4
 800a404:	50ca      	str	r2, [r1, r3]
 800a406:	b10a      	cbz	r2, 800a40c <__lshift+0xa4>
 800a408:	f108 0602 	add.w	r6, r8, #2
 800a40c:	3e01      	subs	r6, #1
 800a40e:	4638      	mov	r0, r7
 800a410:	4621      	mov	r1, r4
 800a412:	612e      	str	r6, [r5, #16]
 800a414:	f7ff fd92 	bl	8009f3c <_Bfree>
 800a418:	4628      	mov	r0, r5
 800a41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a422:	3301      	adds	r3, #1
 800a424:	e7c5      	b.n	800a3b2 <__lshift+0x4a>
 800a426:	3904      	subs	r1, #4
 800a428:	f853 2b04 	ldr.w	r2, [r3], #4
 800a42c:	459c      	cmp	ip, r3
 800a42e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a432:	d8f9      	bhi.n	800a428 <__lshift+0xc0>
 800a434:	e7ea      	b.n	800a40c <__lshift+0xa4>
 800a436:	bf00      	nop
 800a438:	0800df91 	.word	0x0800df91
 800a43c:	0800dfa2 	.word	0x0800dfa2

0800a440 <__mcmp>:
 800a440:	4603      	mov	r3, r0
 800a442:	690a      	ldr	r2, [r1, #16]
 800a444:	6900      	ldr	r0, [r0, #16]
 800a446:	b530      	push	{r4, r5, lr}
 800a448:	1a80      	subs	r0, r0, r2
 800a44a:	d10e      	bne.n	800a46a <__mcmp+0x2a>
 800a44c:	3314      	adds	r3, #20
 800a44e:	3114      	adds	r1, #20
 800a450:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a454:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a458:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a45c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a460:	4295      	cmp	r5, r2
 800a462:	d003      	beq.n	800a46c <__mcmp+0x2c>
 800a464:	d205      	bcs.n	800a472 <__mcmp+0x32>
 800a466:	f04f 30ff 	mov.w	r0, #4294967295
 800a46a:	bd30      	pop	{r4, r5, pc}
 800a46c:	42a3      	cmp	r3, r4
 800a46e:	d3f3      	bcc.n	800a458 <__mcmp+0x18>
 800a470:	e7fb      	b.n	800a46a <__mcmp+0x2a>
 800a472:	2001      	movs	r0, #1
 800a474:	e7f9      	b.n	800a46a <__mcmp+0x2a>
	...

0800a478 <__mdiff>:
 800a478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	4689      	mov	r9, r1
 800a47e:	4606      	mov	r6, r0
 800a480:	4611      	mov	r1, r2
 800a482:	4648      	mov	r0, r9
 800a484:	4614      	mov	r4, r2
 800a486:	f7ff ffdb 	bl	800a440 <__mcmp>
 800a48a:	1e05      	subs	r5, r0, #0
 800a48c:	d112      	bne.n	800a4b4 <__mdiff+0x3c>
 800a48e:	4629      	mov	r1, r5
 800a490:	4630      	mov	r0, r6
 800a492:	f7ff fd13 	bl	8009ebc <_Balloc>
 800a496:	4602      	mov	r2, r0
 800a498:	b928      	cbnz	r0, 800a4a6 <__mdiff+0x2e>
 800a49a:	f240 2137 	movw	r1, #567	@ 0x237
 800a49e:	4b3e      	ldr	r3, [pc, #248]	@ (800a598 <__mdiff+0x120>)
 800a4a0:	483e      	ldr	r0, [pc, #248]	@ (800a59c <__mdiff+0x124>)
 800a4a2:	f001 ffa9 	bl	800c3f8 <__assert_func>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	b003      	add	sp, #12
 800a4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b4:	bfbc      	itt	lt
 800a4b6:	464b      	movlt	r3, r9
 800a4b8:	46a1      	movlt	r9, r4
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a4c0:	bfba      	itte	lt
 800a4c2:	461c      	movlt	r4, r3
 800a4c4:	2501      	movlt	r5, #1
 800a4c6:	2500      	movge	r5, #0
 800a4c8:	f7ff fcf8 	bl	8009ebc <_Balloc>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	b918      	cbnz	r0, 800a4d8 <__mdiff+0x60>
 800a4d0:	f240 2145 	movw	r1, #581	@ 0x245
 800a4d4:	4b30      	ldr	r3, [pc, #192]	@ (800a598 <__mdiff+0x120>)
 800a4d6:	e7e3      	b.n	800a4a0 <__mdiff+0x28>
 800a4d8:	f100 0b14 	add.w	fp, r0, #20
 800a4dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a4e0:	f109 0310 	add.w	r3, r9, #16
 800a4e4:	60c5      	str	r5, [r0, #12]
 800a4e6:	f04f 0c00 	mov.w	ip, #0
 800a4ea:	f109 0514 	add.w	r5, r9, #20
 800a4ee:	46d9      	mov	r9, fp
 800a4f0:	6926      	ldr	r6, [r4, #16]
 800a4f2:	f104 0e14 	add.w	lr, r4, #20
 800a4f6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a4fa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	9b01      	ldr	r3, [sp, #4]
 800a502:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a506:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a50a:	b281      	uxth	r1, r0
 800a50c:	9301      	str	r3, [sp, #4]
 800a50e:	fa1f f38a 	uxth.w	r3, sl
 800a512:	1a5b      	subs	r3, r3, r1
 800a514:	0c00      	lsrs	r0, r0, #16
 800a516:	4463      	add	r3, ip
 800a518:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a51c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a520:	b29b      	uxth	r3, r3
 800a522:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a526:	4576      	cmp	r6, lr
 800a528:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a52c:	f849 3b04 	str.w	r3, [r9], #4
 800a530:	d8e6      	bhi.n	800a500 <__mdiff+0x88>
 800a532:	1b33      	subs	r3, r6, r4
 800a534:	3b15      	subs	r3, #21
 800a536:	f023 0303 	bic.w	r3, r3, #3
 800a53a:	3415      	adds	r4, #21
 800a53c:	3304      	adds	r3, #4
 800a53e:	42a6      	cmp	r6, r4
 800a540:	bf38      	it	cc
 800a542:	2304      	movcc	r3, #4
 800a544:	441d      	add	r5, r3
 800a546:	445b      	add	r3, fp
 800a548:	461e      	mov	r6, r3
 800a54a:	462c      	mov	r4, r5
 800a54c:	4544      	cmp	r4, r8
 800a54e:	d30e      	bcc.n	800a56e <__mdiff+0xf6>
 800a550:	f108 0103 	add.w	r1, r8, #3
 800a554:	1b49      	subs	r1, r1, r5
 800a556:	f021 0103 	bic.w	r1, r1, #3
 800a55a:	3d03      	subs	r5, #3
 800a55c:	45a8      	cmp	r8, r5
 800a55e:	bf38      	it	cc
 800a560:	2100      	movcc	r1, #0
 800a562:	440b      	add	r3, r1
 800a564:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a568:	b199      	cbz	r1, 800a592 <__mdiff+0x11a>
 800a56a:	6117      	str	r7, [r2, #16]
 800a56c:	e79e      	b.n	800a4ac <__mdiff+0x34>
 800a56e:	46e6      	mov	lr, ip
 800a570:	f854 1b04 	ldr.w	r1, [r4], #4
 800a574:	fa1f fc81 	uxth.w	ip, r1
 800a578:	44f4      	add	ip, lr
 800a57a:	0c08      	lsrs	r0, r1, #16
 800a57c:	4471      	add	r1, lr
 800a57e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a582:	b289      	uxth	r1, r1
 800a584:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a588:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a58c:	f846 1b04 	str.w	r1, [r6], #4
 800a590:	e7dc      	b.n	800a54c <__mdiff+0xd4>
 800a592:	3f01      	subs	r7, #1
 800a594:	e7e6      	b.n	800a564 <__mdiff+0xec>
 800a596:	bf00      	nop
 800a598:	0800df91 	.word	0x0800df91
 800a59c:	0800dfa2 	.word	0x0800dfa2

0800a5a0 <__ulp>:
 800a5a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a5dc <__ulp+0x3c>)
 800a5a2:	400b      	ands	r3, r1
 800a5a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	dc08      	bgt.n	800a5be <__ulp+0x1e>
 800a5ac:	425b      	negs	r3, r3
 800a5ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a5b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a5b6:	da04      	bge.n	800a5c2 <__ulp+0x22>
 800a5b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a5bc:	4113      	asrs	r3, r2
 800a5be:	2200      	movs	r2, #0
 800a5c0:	e008      	b.n	800a5d4 <__ulp+0x34>
 800a5c2:	f1a2 0314 	sub.w	r3, r2, #20
 800a5c6:	2b1e      	cmp	r3, #30
 800a5c8:	bfd6      	itet	le
 800a5ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a5ce:	2201      	movgt	r2, #1
 800a5d0:	40da      	lsrle	r2, r3
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	7ff00000 	.word	0x7ff00000

0800a5e0 <__b2d>:
 800a5e0:	6902      	ldr	r2, [r0, #16]
 800a5e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e4:	f100 0614 	add.w	r6, r0, #20
 800a5e8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a5ec:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a5f0:	4f1e      	ldr	r7, [pc, #120]	@ (800a66c <__b2d+0x8c>)
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f7ff fd54 	bl	800a0a0 <__hi0bits>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	f1c0 0020 	rsb	r0, r0, #32
 800a5fe:	2b0a      	cmp	r3, #10
 800a600:	f1a2 0504 	sub.w	r5, r2, #4
 800a604:	6008      	str	r0, [r1, #0]
 800a606:	dc12      	bgt.n	800a62e <__b2d+0x4e>
 800a608:	42ae      	cmp	r6, r5
 800a60a:	bf2c      	ite	cs
 800a60c:	2200      	movcs	r2, #0
 800a60e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a612:	f1c3 0c0b 	rsb	ip, r3, #11
 800a616:	3315      	adds	r3, #21
 800a618:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a61c:	fa04 f303 	lsl.w	r3, r4, r3
 800a620:	fa22 f20c 	lsr.w	r2, r2, ip
 800a624:	ea4e 0107 	orr.w	r1, lr, r7
 800a628:	431a      	orrs	r2, r3
 800a62a:	4610      	mov	r0, r2
 800a62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a62e:	42ae      	cmp	r6, r5
 800a630:	bf36      	itet	cc
 800a632:	f1a2 0508 	subcc.w	r5, r2, #8
 800a636:	2200      	movcs	r2, #0
 800a638:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a63c:	3b0b      	subs	r3, #11
 800a63e:	d012      	beq.n	800a666 <__b2d+0x86>
 800a640:	f1c3 0720 	rsb	r7, r3, #32
 800a644:	fa22 f107 	lsr.w	r1, r2, r7
 800a648:	409c      	lsls	r4, r3
 800a64a:	430c      	orrs	r4, r1
 800a64c:	42b5      	cmp	r5, r6
 800a64e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a652:	bf94      	ite	ls
 800a654:	2400      	movls	r4, #0
 800a656:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a65a:	409a      	lsls	r2, r3
 800a65c:	40fc      	lsrs	r4, r7
 800a65e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a662:	4322      	orrs	r2, r4
 800a664:	e7e1      	b.n	800a62a <__b2d+0x4a>
 800a666:	ea44 0107 	orr.w	r1, r4, r7
 800a66a:	e7de      	b.n	800a62a <__b2d+0x4a>
 800a66c:	3ff00000 	.word	0x3ff00000

0800a670 <__d2b>:
 800a670:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a674:	2101      	movs	r1, #1
 800a676:	4690      	mov	r8, r2
 800a678:	4699      	mov	r9, r3
 800a67a:	9e08      	ldr	r6, [sp, #32]
 800a67c:	f7ff fc1e 	bl	8009ebc <_Balloc>
 800a680:	4604      	mov	r4, r0
 800a682:	b930      	cbnz	r0, 800a692 <__d2b+0x22>
 800a684:	4602      	mov	r2, r0
 800a686:	f240 310f 	movw	r1, #783	@ 0x30f
 800a68a:	4b23      	ldr	r3, [pc, #140]	@ (800a718 <__d2b+0xa8>)
 800a68c:	4823      	ldr	r0, [pc, #140]	@ (800a71c <__d2b+0xac>)
 800a68e:	f001 feb3 	bl	800c3f8 <__assert_func>
 800a692:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a696:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a69a:	b10d      	cbz	r5, 800a6a0 <__d2b+0x30>
 800a69c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6a0:	9301      	str	r3, [sp, #4]
 800a6a2:	f1b8 0300 	subs.w	r3, r8, #0
 800a6a6:	d024      	beq.n	800a6f2 <__d2b+0x82>
 800a6a8:	4668      	mov	r0, sp
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	f7ff fd17 	bl	800a0de <__lo0bits>
 800a6b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a6b4:	b1d8      	cbz	r0, 800a6ee <__d2b+0x7e>
 800a6b6:	f1c0 0320 	rsb	r3, r0, #32
 800a6ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a6be:	430b      	orrs	r3, r1
 800a6c0:	40c2      	lsrs	r2, r0
 800a6c2:	6163      	str	r3, [r4, #20]
 800a6c4:	9201      	str	r2, [sp, #4]
 800a6c6:	9b01      	ldr	r3, [sp, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	bf0c      	ite	eq
 800a6cc:	2201      	moveq	r2, #1
 800a6ce:	2202      	movne	r2, #2
 800a6d0:	61a3      	str	r3, [r4, #24]
 800a6d2:	6122      	str	r2, [r4, #16]
 800a6d4:	b1ad      	cbz	r5, 800a702 <__d2b+0x92>
 800a6d6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a6da:	4405      	add	r5, r0
 800a6dc:	6035      	str	r5, [r6, #0]
 800a6de:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a6e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6e4:	6018      	str	r0, [r3, #0]
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	b002      	add	sp, #8
 800a6ea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a6ee:	6161      	str	r1, [r4, #20]
 800a6f0:	e7e9      	b.n	800a6c6 <__d2b+0x56>
 800a6f2:	a801      	add	r0, sp, #4
 800a6f4:	f7ff fcf3 	bl	800a0de <__lo0bits>
 800a6f8:	9b01      	ldr	r3, [sp, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	6163      	str	r3, [r4, #20]
 800a6fe:	3020      	adds	r0, #32
 800a700:	e7e7      	b.n	800a6d2 <__d2b+0x62>
 800a702:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a706:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a70a:	6030      	str	r0, [r6, #0]
 800a70c:	6918      	ldr	r0, [r3, #16]
 800a70e:	f7ff fcc7 	bl	800a0a0 <__hi0bits>
 800a712:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a716:	e7e4      	b.n	800a6e2 <__d2b+0x72>
 800a718:	0800df91 	.word	0x0800df91
 800a71c:	0800dfa2 	.word	0x0800dfa2

0800a720 <__ratio>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	b085      	sub	sp, #20
 800a726:	e9cd 1000 	strd	r1, r0, [sp]
 800a72a:	a902      	add	r1, sp, #8
 800a72c:	f7ff ff58 	bl	800a5e0 <__b2d>
 800a730:	468b      	mov	fp, r1
 800a732:	4606      	mov	r6, r0
 800a734:	460f      	mov	r7, r1
 800a736:	9800      	ldr	r0, [sp, #0]
 800a738:	a903      	add	r1, sp, #12
 800a73a:	f7ff ff51 	bl	800a5e0 <__b2d>
 800a73e:	460d      	mov	r5, r1
 800a740:	9b01      	ldr	r3, [sp, #4]
 800a742:	4689      	mov	r9, r1
 800a744:	6919      	ldr	r1, [r3, #16]
 800a746:	9b00      	ldr	r3, [sp, #0]
 800a748:	4604      	mov	r4, r0
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	4630      	mov	r0, r6
 800a74e:	1ac9      	subs	r1, r1, r3
 800a750:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a754:	1a9b      	subs	r3, r3, r2
 800a756:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	bfcd      	iteet	gt
 800a75e:	463a      	movgt	r2, r7
 800a760:	462a      	movle	r2, r5
 800a762:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a766:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a76a:	bfd8      	it	le
 800a76c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a770:	464b      	mov	r3, r9
 800a772:	4622      	mov	r2, r4
 800a774:	4659      	mov	r1, fp
 800a776:	f7f5 ffd9 	bl	800072c <__aeabi_ddiv>
 800a77a:	b005      	add	sp, #20
 800a77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a780 <__copybits>:
 800a780:	3901      	subs	r1, #1
 800a782:	b570      	push	{r4, r5, r6, lr}
 800a784:	1149      	asrs	r1, r1, #5
 800a786:	6914      	ldr	r4, [r2, #16]
 800a788:	3101      	adds	r1, #1
 800a78a:	f102 0314 	add.w	r3, r2, #20
 800a78e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a792:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a796:	1f05      	subs	r5, r0, #4
 800a798:	42a3      	cmp	r3, r4
 800a79a:	d30c      	bcc.n	800a7b6 <__copybits+0x36>
 800a79c:	1aa3      	subs	r3, r4, r2
 800a79e:	3b11      	subs	r3, #17
 800a7a0:	f023 0303 	bic.w	r3, r3, #3
 800a7a4:	3211      	adds	r2, #17
 800a7a6:	42a2      	cmp	r2, r4
 800a7a8:	bf88      	it	hi
 800a7aa:	2300      	movhi	r3, #0
 800a7ac:	4418      	add	r0, r3
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	4288      	cmp	r0, r1
 800a7b2:	d305      	bcc.n	800a7c0 <__copybits+0x40>
 800a7b4:	bd70      	pop	{r4, r5, r6, pc}
 800a7b6:	f853 6b04 	ldr.w	r6, [r3], #4
 800a7ba:	f845 6f04 	str.w	r6, [r5, #4]!
 800a7be:	e7eb      	b.n	800a798 <__copybits+0x18>
 800a7c0:	f840 3b04 	str.w	r3, [r0], #4
 800a7c4:	e7f4      	b.n	800a7b0 <__copybits+0x30>

0800a7c6 <__any_on>:
 800a7c6:	f100 0214 	add.w	r2, r0, #20
 800a7ca:	6900      	ldr	r0, [r0, #16]
 800a7cc:	114b      	asrs	r3, r1, #5
 800a7ce:	4298      	cmp	r0, r3
 800a7d0:	b510      	push	{r4, lr}
 800a7d2:	db11      	blt.n	800a7f8 <__any_on+0x32>
 800a7d4:	dd0a      	ble.n	800a7ec <__any_on+0x26>
 800a7d6:	f011 011f 	ands.w	r1, r1, #31
 800a7da:	d007      	beq.n	800a7ec <__any_on+0x26>
 800a7dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7e0:	fa24 f001 	lsr.w	r0, r4, r1
 800a7e4:	fa00 f101 	lsl.w	r1, r0, r1
 800a7e8:	428c      	cmp	r4, r1
 800a7ea:	d10b      	bne.n	800a804 <__any_on+0x3e>
 800a7ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d803      	bhi.n	800a7fc <__any_on+0x36>
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	bd10      	pop	{r4, pc}
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	e7f7      	b.n	800a7ec <__any_on+0x26>
 800a7fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a800:	2900      	cmp	r1, #0
 800a802:	d0f5      	beq.n	800a7f0 <__any_on+0x2a>
 800a804:	2001      	movs	r0, #1
 800a806:	e7f6      	b.n	800a7f6 <__any_on+0x30>

0800a808 <sulp>:
 800a808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80c:	460f      	mov	r7, r1
 800a80e:	4690      	mov	r8, r2
 800a810:	f7ff fec6 	bl	800a5a0 <__ulp>
 800a814:	4604      	mov	r4, r0
 800a816:	460d      	mov	r5, r1
 800a818:	f1b8 0f00 	cmp.w	r8, #0
 800a81c:	d011      	beq.n	800a842 <sulp+0x3a>
 800a81e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a822:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a826:	2b00      	cmp	r3, #0
 800a828:	dd0b      	ble.n	800a842 <sulp+0x3a>
 800a82a:	2400      	movs	r4, #0
 800a82c:	051b      	lsls	r3, r3, #20
 800a82e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a832:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a836:	4622      	mov	r2, r4
 800a838:	462b      	mov	r3, r5
 800a83a:	f7f5 fe4d 	bl	80004d8 <__aeabi_dmul>
 800a83e:	4604      	mov	r4, r0
 800a840:	460d      	mov	r5, r1
 800a842:	4620      	mov	r0, r4
 800a844:	4629      	mov	r1, r5
 800a846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a84a:	0000      	movs	r0, r0
 800a84c:	0000      	movs	r0, r0
	...

0800a850 <_strtod_l>:
 800a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	b09f      	sub	sp, #124	@ 0x7c
 800a856:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a858:	2200      	movs	r2, #0
 800a85a:	460c      	mov	r4, r1
 800a85c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a85e:	f04f 0a00 	mov.w	sl, #0
 800a862:	f04f 0b00 	mov.w	fp, #0
 800a866:	460a      	mov	r2, r1
 800a868:	9005      	str	r0, [sp, #20]
 800a86a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a86c:	7811      	ldrb	r1, [r2, #0]
 800a86e:	292b      	cmp	r1, #43	@ 0x2b
 800a870:	d048      	beq.n	800a904 <_strtod_l+0xb4>
 800a872:	d836      	bhi.n	800a8e2 <_strtod_l+0x92>
 800a874:	290d      	cmp	r1, #13
 800a876:	d830      	bhi.n	800a8da <_strtod_l+0x8a>
 800a878:	2908      	cmp	r1, #8
 800a87a:	d830      	bhi.n	800a8de <_strtod_l+0x8e>
 800a87c:	2900      	cmp	r1, #0
 800a87e:	d039      	beq.n	800a8f4 <_strtod_l+0xa4>
 800a880:	2200      	movs	r2, #0
 800a882:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a884:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a886:	782a      	ldrb	r2, [r5, #0]
 800a888:	2a30      	cmp	r2, #48	@ 0x30
 800a88a:	f040 80b1 	bne.w	800a9f0 <_strtod_l+0x1a0>
 800a88e:	786a      	ldrb	r2, [r5, #1]
 800a890:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a894:	2a58      	cmp	r2, #88	@ 0x58
 800a896:	d16c      	bne.n	800a972 <_strtod_l+0x122>
 800a898:	9302      	str	r3, [sp, #8]
 800a89a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a89c:	4a8e      	ldr	r2, [pc, #568]	@ (800aad8 <_strtod_l+0x288>)
 800a89e:	9301      	str	r3, [sp, #4]
 800a8a0:	ab1a      	add	r3, sp, #104	@ 0x68
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	9805      	ldr	r0, [sp, #20]
 800a8a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a8a8:	a919      	add	r1, sp, #100	@ 0x64
 800a8aa:	f001 fe3f 	bl	800c52c <__gethex>
 800a8ae:	f010 060f 	ands.w	r6, r0, #15
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	d005      	beq.n	800a8c2 <_strtod_l+0x72>
 800a8b6:	2e06      	cmp	r6, #6
 800a8b8:	d126      	bne.n	800a908 <_strtod_l+0xb8>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	3501      	adds	r5, #1
 800a8be:	9519      	str	r5, [sp, #100]	@ 0x64
 800a8c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f040 8584 	bne.w	800b3d2 <_strtod_l+0xb82>
 800a8ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8cc:	b1bb      	cbz	r3, 800a8fe <_strtod_l+0xae>
 800a8ce:	4650      	mov	r0, sl
 800a8d0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a8d4:	b01f      	add	sp, #124	@ 0x7c
 800a8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8da:	2920      	cmp	r1, #32
 800a8dc:	d1d0      	bne.n	800a880 <_strtod_l+0x30>
 800a8de:	3201      	adds	r2, #1
 800a8e0:	e7c3      	b.n	800a86a <_strtod_l+0x1a>
 800a8e2:	292d      	cmp	r1, #45	@ 0x2d
 800a8e4:	d1cc      	bne.n	800a880 <_strtod_l+0x30>
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a8ea:	1c51      	adds	r1, r2, #1
 800a8ec:	9119      	str	r1, [sp, #100]	@ 0x64
 800a8ee:	7852      	ldrb	r2, [r2, #1]
 800a8f0:	2a00      	cmp	r2, #0
 800a8f2:	d1c7      	bne.n	800a884 <_strtod_l+0x34>
 800a8f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8f6:	9419      	str	r4, [sp, #100]	@ 0x64
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f040 8568 	bne.w	800b3ce <_strtod_l+0xb7e>
 800a8fe:	4650      	mov	r0, sl
 800a900:	4659      	mov	r1, fp
 800a902:	e7e7      	b.n	800a8d4 <_strtod_l+0x84>
 800a904:	2100      	movs	r1, #0
 800a906:	e7ef      	b.n	800a8e8 <_strtod_l+0x98>
 800a908:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a90a:	b13a      	cbz	r2, 800a91c <_strtod_l+0xcc>
 800a90c:	2135      	movs	r1, #53	@ 0x35
 800a90e:	a81c      	add	r0, sp, #112	@ 0x70
 800a910:	f7ff ff36 	bl	800a780 <__copybits>
 800a914:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a916:	9805      	ldr	r0, [sp, #20]
 800a918:	f7ff fb10 	bl	8009f3c <_Bfree>
 800a91c:	3e01      	subs	r6, #1
 800a91e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a920:	2e04      	cmp	r6, #4
 800a922:	d806      	bhi.n	800a932 <_strtod_l+0xe2>
 800a924:	e8df f006 	tbb	[pc, r6]
 800a928:	201d0314 	.word	0x201d0314
 800a92c:	14          	.byte	0x14
 800a92d:	00          	.byte	0x00
 800a92e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a932:	05e1      	lsls	r1, r4, #23
 800a934:	bf48      	it	mi
 800a936:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a93a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a93e:	0d1b      	lsrs	r3, r3, #20
 800a940:	051b      	lsls	r3, r3, #20
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1bd      	bne.n	800a8c2 <_strtod_l+0x72>
 800a946:	f7fe fb1d 	bl	8008f84 <__errno>
 800a94a:	2322      	movs	r3, #34	@ 0x22
 800a94c:	6003      	str	r3, [r0, #0]
 800a94e:	e7b8      	b.n	800a8c2 <_strtod_l+0x72>
 800a950:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a954:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a958:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a95c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a960:	e7e7      	b.n	800a932 <_strtod_l+0xe2>
 800a962:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800aadc <_strtod_l+0x28c>
 800a966:	e7e4      	b.n	800a932 <_strtod_l+0xe2>
 800a968:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a96c:	f04f 3aff 	mov.w	sl, #4294967295
 800a970:	e7df      	b.n	800a932 <_strtod_l+0xe2>
 800a972:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	9219      	str	r2, [sp, #100]	@ 0x64
 800a978:	785b      	ldrb	r3, [r3, #1]
 800a97a:	2b30      	cmp	r3, #48	@ 0x30
 800a97c:	d0f9      	beq.n	800a972 <_strtod_l+0x122>
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d09f      	beq.n	800a8c2 <_strtod_l+0x72>
 800a982:	2301      	movs	r3, #1
 800a984:	9309      	str	r3, [sp, #36]	@ 0x24
 800a986:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a988:	220a      	movs	r2, #10
 800a98a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a98c:	2300      	movs	r3, #0
 800a98e:	461f      	mov	r7, r3
 800a990:	9308      	str	r3, [sp, #32]
 800a992:	930a      	str	r3, [sp, #40]	@ 0x28
 800a994:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a996:	7805      	ldrb	r5, [r0, #0]
 800a998:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a99c:	b2d9      	uxtb	r1, r3
 800a99e:	2909      	cmp	r1, #9
 800a9a0:	d928      	bls.n	800a9f4 <_strtod_l+0x1a4>
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	494e      	ldr	r1, [pc, #312]	@ (800aae0 <_strtod_l+0x290>)
 800a9a6:	f7fe fa91 	bl	8008ecc <strncmp>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	d032      	beq.n	800aa14 <_strtod_l+0x1c4>
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	462a      	mov	r2, r5
 800a9b2:	4681      	mov	r9, r0
 800a9b4:	463d      	mov	r5, r7
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2a65      	cmp	r2, #101	@ 0x65
 800a9ba:	d001      	beq.n	800a9c0 <_strtod_l+0x170>
 800a9bc:	2a45      	cmp	r2, #69	@ 0x45
 800a9be:	d114      	bne.n	800a9ea <_strtod_l+0x19a>
 800a9c0:	b91d      	cbnz	r5, 800a9ca <_strtod_l+0x17a>
 800a9c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9c4:	4302      	orrs	r2, r0
 800a9c6:	d095      	beq.n	800a8f4 <_strtod_l+0xa4>
 800a9c8:	2500      	movs	r5, #0
 800a9ca:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a9cc:	1c62      	adds	r2, r4, #1
 800a9ce:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9d0:	7862      	ldrb	r2, [r4, #1]
 800a9d2:	2a2b      	cmp	r2, #43	@ 0x2b
 800a9d4:	d077      	beq.n	800aac6 <_strtod_l+0x276>
 800a9d6:	2a2d      	cmp	r2, #45	@ 0x2d
 800a9d8:	d07b      	beq.n	800aad2 <_strtod_l+0x282>
 800a9da:	f04f 0c00 	mov.w	ip, #0
 800a9de:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a9e2:	2909      	cmp	r1, #9
 800a9e4:	f240 8082 	bls.w	800aaec <_strtod_l+0x29c>
 800a9e8:	9419      	str	r4, [sp, #100]	@ 0x64
 800a9ea:	f04f 0800 	mov.w	r8, #0
 800a9ee:	e0a2      	b.n	800ab36 <_strtod_l+0x2e6>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	e7c7      	b.n	800a984 <_strtod_l+0x134>
 800a9f4:	2f08      	cmp	r7, #8
 800a9f6:	bfd5      	itete	le
 800a9f8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a9fa:	9908      	ldrgt	r1, [sp, #32]
 800a9fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa00:	fb02 3301 	mlagt	r3, r2, r1, r3
 800aa04:	f100 0001 	add.w	r0, r0, #1
 800aa08:	bfd4      	ite	le
 800aa0a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800aa0c:	9308      	strgt	r3, [sp, #32]
 800aa0e:	3701      	adds	r7, #1
 800aa10:	9019      	str	r0, [sp, #100]	@ 0x64
 800aa12:	e7bf      	b.n	800a994 <_strtod_l+0x144>
 800aa14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa1a:	785a      	ldrb	r2, [r3, #1]
 800aa1c:	b37f      	cbz	r7, 800aa7e <_strtod_l+0x22e>
 800aa1e:	4681      	mov	r9, r0
 800aa20:	463d      	mov	r5, r7
 800aa22:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aa26:	2b09      	cmp	r3, #9
 800aa28:	d912      	bls.n	800aa50 <_strtod_l+0x200>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e7c4      	b.n	800a9b8 <_strtod_l+0x168>
 800aa2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa30:	3001      	adds	r0, #1
 800aa32:	1c5a      	adds	r2, r3, #1
 800aa34:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa36:	785a      	ldrb	r2, [r3, #1]
 800aa38:	2a30      	cmp	r2, #48	@ 0x30
 800aa3a:	d0f8      	beq.n	800aa2e <_strtod_l+0x1de>
 800aa3c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aa40:	2b08      	cmp	r3, #8
 800aa42:	f200 84cb 	bhi.w	800b3dc <_strtod_l+0xb8c>
 800aa46:	4681      	mov	r9, r0
 800aa48:	2000      	movs	r0, #0
 800aa4a:	4605      	mov	r5, r0
 800aa4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa4e:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa50:	3a30      	subs	r2, #48	@ 0x30
 800aa52:	f100 0301 	add.w	r3, r0, #1
 800aa56:	d02a      	beq.n	800aaae <_strtod_l+0x25e>
 800aa58:	4499      	add	r9, r3
 800aa5a:	210a      	movs	r1, #10
 800aa5c:	462b      	mov	r3, r5
 800aa5e:	eb00 0c05 	add.w	ip, r0, r5
 800aa62:	4563      	cmp	r3, ip
 800aa64:	d10d      	bne.n	800aa82 <_strtod_l+0x232>
 800aa66:	1c69      	adds	r1, r5, #1
 800aa68:	4401      	add	r1, r0
 800aa6a:	4428      	add	r0, r5
 800aa6c:	2808      	cmp	r0, #8
 800aa6e:	dc16      	bgt.n	800aa9e <_strtod_l+0x24e>
 800aa70:	230a      	movs	r3, #10
 800aa72:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa74:	fb03 2300 	mla	r3, r3, r0, r2
 800aa78:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e018      	b.n	800aab0 <_strtod_l+0x260>
 800aa7e:	4638      	mov	r0, r7
 800aa80:	e7da      	b.n	800aa38 <_strtod_l+0x1e8>
 800aa82:	2b08      	cmp	r3, #8
 800aa84:	f103 0301 	add.w	r3, r3, #1
 800aa88:	dc03      	bgt.n	800aa92 <_strtod_l+0x242>
 800aa8a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aa8c:	434e      	muls	r6, r1
 800aa8e:	960a      	str	r6, [sp, #40]	@ 0x28
 800aa90:	e7e7      	b.n	800aa62 <_strtod_l+0x212>
 800aa92:	2b10      	cmp	r3, #16
 800aa94:	bfde      	ittt	le
 800aa96:	9e08      	ldrle	r6, [sp, #32]
 800aa98:	434e      	mulle	r6, r1
 800aa9a:	9608      	strle	r6, [sp, #32]
 800aa9c:	e7e1      	b.n	800aa62 <_strtod_l+0x212>
 800aa9e:	280f      	cmp	r0, #15
 800aaa0:	dceb      	bgt.n	800aa7a <_strtod_l+0x22a>
 800aaa2:	230a      	movs	r3, #10
 800aaa4:	9808      	ldr	r0, [sp, #32]
 800aaa6:	fb03 2300 	mla	r3, r3, r0, r2
 800aaaa:	9308      	str	r3, [sp, #32]
 800aaac:	e7e5      	b.n	800aa7a <_strtod_l+0x22a>
 800aaae:	4629      	mov	r1, r5
 800aab0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aab2:	460d      	mov	r5, r1
 800aab4:	1c50      	adds	r0, r2, #1
 800aab6:	9019      	str	r0, [sp, #100]	@ 0x64
 800aab8:	7852      	ldrb	r2, [r2, #1]
 800aaba:	4618      	mov	r0, r3
 800aabc:	e7b1      	b.n	800aa22 <_strtod_l+0x1d2>
 800aabe:	f04f 0900 	mov.w	r9, #0
 800aac2:	2301      	movs	r3, #1
 800aac4:	e77d      	b.n	800a9c2 <_strtod_l+0x172>
 800aac6:	f04f 0c00 	mov.w	ip, #0
 800aaca:	1ca2      	adds	r2, r4, #2
 800aacc:	9219      	str	r2, [sp, #100]	@ 0x64
 800aace:	78a2      	ldrb	r2, [r4, #2]
 800aad0:	e785      	b.n	800a9de <_strtod_l+0x18e>
 800aad2:	f04f 0c01 	mov.w	ip, #1
 800aad6:	e7f8      	b.n	800aaca <_strtod_l+0x27a>
 800aad8:	0800e110 	.word	0x0800e110
 800aadc:	7ff00000 	.word	0x7ff00000
 800aae0:	0800e0f8 	.word	0x0800e0f8
 800aae4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aae6:	1c51      	adds	r1, r2, #1
 800aae8:	9119      	str	r1, [sp, #100]	@ 0x64
 800aaea:	7852      	ldrb	r2, [r2, #1]
 800aaec:	2a30      	cmp	r2, #48	@ 0x30
 800aaee:	d0f9      	beq.n	800aae4 <_strtod_l+0x294>
 800aaf0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800aaf4:	2908      	cmp	r1, #8
 800aaf6:	f63f af78 	bhi.w	800a9ea <_strtod_l+0x19a>
 800aafa:	f04f 080a 	mov.w	r8, #10
 800aafe:	3a30      	subs	r2, #48	@ 0x30
 800ab00:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab04:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ab06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab08:	1c56      	adds	r6, r2, #1
 800ab0a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ab0c:	7852      	ldrb	r2, [r2, #1]
 800ab0e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ab12:	f1be 0f09 	cmp.w	lr, #9
 800ab16:	d939      	bls.n	800ab8c <_strtod_l+0x33c>
 800ab18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ab1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ab1e:	1a76      	subs	r6, r6, r1
 800ab20:	2e08      	cmp	r6, #8
 800ab22:	dc03      	bgt.n	800ab2c <_strtod_l+0x2dc>
 800ab24:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ab26:	4588      	cmp	r8, r1
 800ab28:	bfa8      	it	ge
 800ab2a:	4688      	movge	r8, r1
 800ab2c:	f1bc 0f00 	cmp.w	ip, #0
 800ab30:	d001      	beq.n	800ab36 <_strtod_l+0x2e6>
 800ab32:	f1c8 0800 	rsb	r8, r8, #0
 800ab36:	2d00      	cmp	r5, #0
 800ab38:	d14e      	bne.n	800abd8 <_strtod_l+0x388>
 800ab3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab3c:	4308      	orrs	r0, r1
 800ab3e:	f47f aec0 	bne.w	800a8c2 <_strtod_l+0x72>
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f47f aed6 	bne.w	800a8f4 <_strtod_l+0xa4>
 800ab48:	2a69      	cmp	r2, #105	@ 0x69
 800ab4a:	d028      	beq.n	800ab9e <_strtod_l+0x34e>
 800ab4c:	dc25      	bgt.n	800ab9a <_strtod_l+0x34a>
 800ab4e:	2a49      	cmp	r2, #73	@ 0x49
 800ab50:	d025      	beq.n	800ab9e <_strtod_l+0x34e>
 800ab52:	2a4e      	cmp	r2, #78	@ 0x4e
 800ab54:	f47f aece 	bne.w	800a8f4 <_strtod_l+0xa4>
 800ab58:	499a      	ldr	r1, [pc, #616]	@ (800adc4 <_strtod_l+0x574>)
 800ab5a:	a819      	add	r0, sp, #100	@ 0x64
 800ab5c:	f001 ff08 	bl	800c970 <__match>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	f43f aec7 	beq.w	800a8f4 <_strtod_l+0xa4>
 800ab66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	2b28      	cmp	r3, #40	@ 0x28
 800ab6c:	d12e      	bne.n	800abcc <_strtod_l+0x37c>
 800ab6e:	4996      	ldr	r1, [pc, #600]	@ (800adc8 <_strtod_l+0x578>)
 800ab70:	aa1c      	add	r2, sp, #112	@ 0x70
 800ab72:	a819      	add	r0, sp, #100	@ 0x64
 800ab74:	f001 ff10 	bl	800c998 <__hexnan>
 800ab78:	2805      	cmp	r0, #5
 800ab7a:	d127      	bne.n	800abcc <_strtod_l+0x37c>
 800ab7c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab7e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ab82:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ab86:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ab8a:	e69a      	b.n	800a8c2 <_strtod_l+0x72>
 800ab8c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ab8e:	fb08 2101 	mla	r1, r8, r1, r2
 800ab92:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ab96:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab98:	e7b5      	b.n	800ab06 <_strtod_l+0x2b6>
 800ab9a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ab9c:	e7da      	b.n	800ab54 <_strtod_l+0x304>
 800ab9e:	498b      	ldr	r1, [pc, #556]	@ (800adcc <_strtod_l+0x57c>)
 800aba0:	a819      	add	r0, sp, #100	@ 0x64
 800aba2:	f001 fee5 	bl	800c970 <__match>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	f43f aea4 	beq.w	800a8f4 <_strtod_l+0xa4>
 800abac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abae:	4988      	ldr	r1, [pc, #544]	@ (800add0 <_strtod_l+0x580>)
 800abb0:	3b01      	subs	r3, #1
 800abb2:	a819      	add	r0, sp, #100	@ 0x64
 800abb4:	9319      	str	r3, [sp, #100]	@ 0x64
 800abb6:	f001 fedb 	bl	800c970 <__match>
 800abba:	b910      	cbnz	r0, 800abc2 <_strtod_l+0x372>
 800abbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abbe:	3301      	adds	r3, #1
 800abc0:	9319      	str	r3, [sp, #100]	@ 0x64
 800abc2:	f04f 0a00 	mov.w	sl, #0
 800abc6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800add4 <_strtod_l+0x584>
 800abca:	e67a      	b.n	800a8c2 <_strtod_l+0x72>
 800abcc:	4882      	ldr	r0, [pc, #520]	@ (800add8 <_strtod_l+0x588>)
 800abce:	f001 fc0d 	bl	800c3ec <nan>
 800abd2:	4682      	mov	sl, r0
 800abd4:	468b      	mov	fp, r1
 800abd6:	e674      	b.n	800a8c2 <_strtod_l+0x72>
 800abd8:	eba8 0309 	sub.w	r3, r8, r9
 800abdc:	2f00      	cmp	r7, #0
 800abde:	bf08      	it	eq
 800abe0:	462f      	moveq	r7, r5
 800abe2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800abe4:	2d10      	cmp	r5, #16
 800abe6:	462c      	mov	r4, r5
 800abe8:	9309      	str	r3, [sp, #36]	@ 0x24
 800abea:	bfa8      	it	ge
 800abec:	2410      	movge	r4, #16
 800abee:	f7f5 fbf9 	bl	80003e4 <__aeabi_ui2d>
 800abf2:	2d09      	cmp	r5, #9
 800abf4:	4682      	mov	sl, r0
 800abf6:	468b      	mov	fp, r1
 800abf8:	dc11      	bgt.n	800ac1e <_strtod_l+0x3ce>
 800abfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f43f ae60 	beq.w	800a8c2 <_strtod_l+0x72>
 800ac02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac04:	dd76      	ble.n	800acf4 <_strtod_l+0x4a4>
 800ac06:	2b16      	cmp	r3, #22
 800ac08:	dc5d      	bgt.n	800acc6 <_strtod_l+0x476>
 800ac0a:	4974      	ldr	r1, [pc, #464]	@ (800addc <_strtod_l+0x58c>)
 800ac0c:	4652      	mov	r2, sl
 800ac0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac12:	465b      	mov	r3, fp
 800ac14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac18:	f7f5 fc5e 	bl	80004d8 <__aeabi_dmul>
 800ac1c:	e7d9      	b.n	800abd2 <_strtod_l+0x382>
 800ac1e:	4b6f      	ldr	r3, [pc, #444]	@ (800addc <_strtod_l+0x58c>)
 800ac20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ac28:	f7f5 fc56 	bl	80004d8 <__aeabi_dmul>
 800ac2c:	4682      	mov	sl, r0
 800ac2e:	9808      	ldr	r0, [sp, #32]
 800ac30:	468b      	mov	fp, r1
 800ac32:	f7f5 fbd7 	bl	80003e4 <__aeabi_ui2d>
 800ac36:	4602      	mov	r2, r0
 800ac38:	460b      	mov	r3, r1
 800ac3a:	4650      	mov	r0, sl
 800ac3c:	4659      	mov	r1, fp
 800ac3e:	f7f5 fa95 	bl	800016c <__adddf3>
 800ac42:	2d0f      	cmp	r5, #15
 800ac44:	4682      	mov	sl, r0
 800ac46:	468b      	mov	fp, r1
 800ac48:	ddd7      	ble.n	800abfa <_strtod_l+0x3aa>
 800ac4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac4c:	1b2c      	subs	r4, r5, r4
 800ac4e:	441c      	add	r4, r3
 800ac50:	2c00      	cmp	r4, #0
 800ac52:	f340 8096 	ble.w	800ad82 <_strtod_l+0x532>
 800ac56:	f014 030f 	ands.w	r3, r4, #15
 800ac5a:	d00a      	beq.n	800ac72 <_strtod_l+0x422>
 800ac5c:	495f      	ldr	r1, [pc, #380]	@ (800addc <_strtod_l+0x58c>)
 800ac5e:	4652      	mov	r2, sl
 800ac60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac68:	465b      	mov	r3, fp
 800ac6a:	f7f5 fc35 	bl	80004d8 <__aeabi_dmul>
 800ac6e:	4682      	mov	sl, r0
 800ac70:	468b      	mov	fp, r1
 800ac72:	f034 040f 	bics.w	r4, r4, #15
 800ac76:	d073      	beq.n	800ad60 <_strtod_l+0x510>
 800ac78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ac7c:	dd48      	ble.n	800ad10 <_strtod_l+0x4c0>
 800ac7e:	2400      	movs	r4, #0
 800ac80:	46a0      	mov	r8, r4
 800ac82:	46a1      	mov	r9, r4
 800ac84:	940a      	str	r4, [sp, #40]	@ 0x28
 800ac86:	2322      	movs	r3, #34	@ 0x22
 800ac88:	f04f 0a00 	mov.w	sl, #0
 800ac8c:	9a05      	ldr	r2, [sp, #20]
 800ac8e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800add4 <_strtod_l+0x584>
 800ac92:	6013      	str	r3, [r2, #0]
 800ac94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f43f ae13 	beq.w	800a8c2 <_strtod_l+0x72>
 800ac9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac9e:	9805      	ldr	r0, [sp, #20]
 800aca0:	f7ff f94c 	bl	8009f3c <_Bfree>
 800aca4:	4649      	mov	r1, r9
 800aca6:	9805      	ldr	r0, [sp, #20]
 800aca8:	f7ff f948 	bl	8009f3c <_Bfree>
 800acac:	4641      	mov	r1, r8
 800acae:	9805      	ldr	r0, [sp, #20]
 800acb0:	f7ff f944 	bl	8009f3c <_Bfree>
 800acb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800acb6:	9805      	ldr	r0, [sp, #20]
 800acb8:	f7ff f940 	bl	8009f3c <_Bfree>
 800acbc:	4621      	mov	r1, r4
 800acbe:	9805      	ldr	r0, [sp, #20]
 800acc0:	f7ff f93c 	bl	8009f3c <_Bfree>
 800acc4:	e5fd      	b.n	800a8c2 <_strtod_l+0x72>
 800acc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acc8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800accc:	4293      	cmp	r3, r2
 800acce:	dbbc      	blt.n	800ac4a <_strtod_l+0x3fa>
 800acd0:	4c42      	ldr	r4, [pc, #264]	@ (800addc <_strtod_l+0x58c>)
 800acd2:	f1c5 050f 	rsb	r5, r5, #15
 800acd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800acda:	4652      	mov	r2, sl
 800acdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ace0:	465b      	mov	r3, fp
 800ace2:	f7f5 fbf9 	bl	80004d8 <__aeabi_dmul>
 800ace6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ace8:	1b5d      	subs	r5, r3, r5
 800acea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800acee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800acf2:	e791      	b.n	800ac18 <_strtod_l+0x3c8>
 800acf4:	3316      	adds	r3, #22
 800acf6:	dba8      	blt.n	800ac4a <_strtod_l+0x3fa>
 800acf8:	4b38      	ldr	r3, [pc, #224]	@ (800addc <_strtod_l+0x58c>)
 800acfa:	eba9 0808 	sub.w	r8, r9, r8
 800acfe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ad02:	4650      	mov	r0, sl
 800ad04:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ad08:	4659      	mov	r1, fp
 800ad0a:	f7f5 fd0f 	bl	800072c <__aeabi_ddiv>
 800ad0e:	e760      	b.n	800abd2 <_strtod_l+0x382>
 800ad10:	4b33      	ldr	r3, [pc, #204]	@ (800ade0 <_strtod_l+0x590>)
 800ad12:	4650      	mov	r0, sl
 800ad14:	9308      	str	r3, [sp, #32]
 800ad16:	2300      	movs	r3, #0
 800ad18:	4659      	mov	r1, fp
 800ad1a:	461e      	mov	r6, r3
 800ad1c:	1124      	asrs	r4, r4, #4
 800ad1e:	2c01      	cmp	r4, #1
 800ad20:	dc21      	bgt.n	800ad66 <_strtod_l+0x516>
 800ad22:	b10b      	cbz	r3, 800ad28 <_strtod_l+0x4d8>
 800ad24:	4682      	mov	sl, r0
 800ad26:	468b      	mov	fp, r1
 800ad28:	492d      	ldr	r1, [pc, #180]	@ (800ade0 <_strtod_l+0x590>)
 800ad2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ad2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ad32:	4652      	mov	r2, sl
 800ad34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad38:	465b      	mov	r3, fp
 800ad3a:	f7f5 fbcd 	bl	80004d8 <__aeabi_dmul>
 800ad3e:	4b25      	ldr	r3, [pc, #148]	@ (800add4 <_strtod_l+0x584>)
 800ad40:	460a      	mov	r2, r1
 800ad42:	400b      	ands	r3, r1
 800ad44:	4927      	ldr	r1, [pc, #156]	@ (800ade4 <_strtod_l+0x594>)
 800ad46:	4682      	mov	sl, r0
 800ad48:	428b      	cmp	r3, r1
 800ad4a:	d898      	bhi.n	800ac7e <_strtod_l+0x42e>
 800ad4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ad50:	428b      	cmp	r3, r1
 800ad52:	bf86      	itte	hi
 800ad54:	f04f 3aff 	movhi.w	sl, #4294967295
 800ad58:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ade8 <_strtod_l+0x598>
 800ad5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ad60:	2300      	movs	r3, #0
 800ad62:	9308      	str	r3, [sp, #32]
 800ad64:	e07a      	b.n	800ae5c <_strtod_l+0x60c>
 800ad66:	07e2      	lsls	r2, r4, #31
 800ad68:	d505      	bpl.n	800ad76 <_strtod_l+0x526>
 800ad6a:	9b08      	ldr	r3, [sp, #32]
 800ad6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad70:	f7f5 fbb2 	bl	80004d8 <__aeabi_dmul>
 800ad74:	2301      	movs	r3, #1
 800ad76:	9a08      	ldr	r2, [sp, #32]
 800ad78:	3601      	adds	r6, #1
 800ad7a:	3208      	adds	r2, #8
 800ad7c:	1064      	asrs	r4, r4, #1
 800ad7e:	9208      	str	r2, [sp, #32]
 800ad80:	e7cd      	b.n	800ad1e <_strtod_l+0x4ce>
 800ad82:	d0ed      	beq.n	800ad60 <_strtod_l+0x510>
 800ad84:	4264      	negs	r4, r4
 800ad86:	f014 020f 	ands.w	r2, r4, #15
 800ad8a:	d00a      	beq.n	800ada2 <_strtod_l+0x552>
 800ad8c:	4b13      	ldr	r3, [pc, #76]	@ (800addc <_strtod_l+0x58c>)
 800ad8e:	4650      	mov	r0, sl
 800ad90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad94:	4659      	mov	r1, fp
 800ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9a:	f7f5 fcc7 	bl	800072c <__aeabi_ddiv>
 800ad9e:	4682      	mov	sl, r0
 800ada0:	468b      	mov	fp, r1
 800ada2:	1124      	asrs	r4, r4, #4
 800ada4:	d0dc      	beq.n	800ad60 <_strtod_l+0x510>
 800ada6:	2c1f      	cmp	r4, #31
 800ada8:	dd20      	ble.n	800adec <_strtod_l+0x59c>
 800adaa:	2400      	movs	r4, #0
 800adac:	46a0      	mov	r8, r4
 800adae:	46a1      	mov	r9, r4
 800adb0:	940a      	str	r4, [sp, #40]	@ 0x28
 800adb2:	2322      	movs	r3, #34	@ 0x22
 800adb4:	9a05      	ldr	r2, [sp, #20]
 800adb6:	f04f 0a00 	mov.w	sl, #0
 800adba:	f04f 0b00 	mov.w	fp, #0
 800adbe:	6013      	str	r3, [r2, #0]
 800adc0:	e768      	b.n	800ac94 <_strtod_l+0x444>
 800adc2:	bf00      	nop
 800adc4:	0800deeb 	.word	0x0800deeb
 800adc8:	0800e0fc 	.word	0x0800e0fc
 800adcc:	0800dee3 	.word	0x0800dee3
 800add0:	0800df18 	.word	0x0800df18
 800add4:	7ff00000 	.word	0x7ff00000
 800add8:	0800e2c0 	.word	0x0800e2c0
 800addc:	0800e030 	.word	0x0800e030
 800ade0:	0800e008 	.word	0x0800e008
 800ade4:	7ca00000 	.word	0x7ca00000
 800ade8:	7fefffff 	.word	0x7fefffff
 800adec:	f014 0310 	ands.w	r3, r4, #16
 800adf0:	bf18      	it	ne
 800adf2:	236a      	movne	r3, #106	@ 0x6a
 800adf4:	4650      	mov	r0, sl
 800adf6:	9308      	str	r3, [sp, #32]
 800adf8:	4659      	mov	r1, fp
 800adfa:	2300      	movs	r3, #0
 800adfc:	4ea9      	ldr	r6, [pc, #676]	@ (800b0a4 <_strtod_l+0x854>)
 800adfe:	07e2      	lsls	r2, r4, #31
 800ae00:	d504      	bpl.n	800ae0c <_strtod_l+0x5bc>
 800ae02:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae06:	f7f5 fb67 	bl	80004d8 <__aeabi_dmul>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	1064      	asrs	r4, r4, #1
 800ae0e:	f106 0608 	add.w	r6, r6, #8
 800ae12:	d1f4      	bne.n	800adfe <_strtod_l+0x5ae>
 800ae14:	b10b      	cbz	r3, 800ae1a <_strtod_l+0x5ca>
 800ae16:	4682      	mov	sl, r0
 800ae18:	468b      	mov	fp, r1
 800ae1a:	9b08      	ldr	r3, [sp, #32]
 800ae1c:	b1b3      	cbz	r3, 800ae4c <_strtod_l+0x5fc>
 800ae1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ae22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	4659      	mov	r1, fp
 800ae2a:	dd0f      	ble.n	800ae4c <_strtod_l+0x5fc>
 800ae2c:	2b1f      	cmp	r3, #31
 800ae2e:	dd57      	ble.n	800aee0 <_strtod_l+0x690>
 800ae30:	2b34      	cmp	r3, #52	@ 0x34
 800ae32:	bfd8      	it	le
 800ae34:	f04f 33ff 	movle.w	r3, #4294967295
 800ae38:	f04f 0a00 	mov.w	sl, #0
 800ae3c:	bfcf      	iteee	gt
 800ae3e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ae42:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ae46:	4093      	lslle	r3, r2
 800ae48:	ea03 0b01 	andle.w	fp, r3, r1
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2300      	movs	r3, #0
 800ae50:	4650      	mov	r0, sl
 800ae52:	4659      	mov	r1, fp
 800ae54:	f7f5 fda8 	bl	80009a8 <__aeabi_dcmpeq>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d1a6      	bne.n	800adaa <_strtod_l+0x55a>
 800ae5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae5e:	463a      	mov	r2, r7
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ae64:	462b      	mov	r3, r5
 800ae66:	9805      	ldr	r0, [sp, #20]
 800ae68:	f7ff f8d0 	bl	800a00c <__s2b>
 800ae6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f43f af05 	beq.w	800ac7e <_strtod_l+0x42e>
 800ae74:	2400      	movs	r4, #0
 800ae76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae78:	eba9 0308 	sub.w	r3, r9, r8
 800ae7c:	2a00      	cmp	r2, #0
 800ae7e:	bfa8      	it	ge
 800ae80:	2300      	movge	r3, #0
 800ae82:	46a0      	mov	r8, r4
 800ae84:	9312      	str	r3, [sp, #72]	@ 0x48
 800ae86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ae8a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ae8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae8e:	9805      	ldr	r0, [sp, #20]
 800ae90:	6859      	ldr	r1, [r3, #4]
 800ae92:	f7ff f813 	bl	8009ebc <_Balloc>
 800ae96:	4681      	mov	r9, r0
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	f43f aef4 	beq.w	800ac86 <_strtod_l+0x436>
 800ae9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aea0:	300c      	adds	r0, #12
 800aea2:	691a      	ldr	r2, [r3, #16]
 800aea4:	f103 010c 	add.w	r1, r3, #12
 800aea8:	3202      	adds	r2, #2
 800aeaa:	0092      	lsls	r2, r2, #2
 800aeac:	f7fe f8a5 	bl	8008ffa <memcpy>
 800aeb0:	ab1c      	add	r3, sp, #112	@ 0x70
 800aeb2:	9301      	str	r3, [sp, #4]
 800aeb4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	4652      	mov	r2, sl
 800aeba:	465b      	mov	r3, fp
 800aebc:	9805      	ldr	r0, [sp, #20]
 800aebe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800aec2:	f7ff fbd5 	bl	800a670 <__d2b>
 800aec6:	901a      	str	r0, [sp, #104]	@ 0x68
 800aec8:	2800      	cmp	r0, #0
 800aeca:	f43f aedc 	beq.w	800ac86 <_strtod_l+0x436>
 800aece:	2101      	movs	r1, #1
 800aed0:	9805      	ldr	r0, [sp, #20]
 800aed2:	f7ff f931 	bl	800a138 <__i2b>
 800aed6:	4680      	mov	r8, r0
 800aed8:	b948      	cbnz	r0, 800aeee <_strtod_l+0x69e>
 800aeda:	f04f 0800 	mov.w	r8, #0
 800aede:	e6d2      	b.n	800ac86 <_strtod_l+0x436>
 800aee0:	f04f 32ff 	mov.w	r2, #4294967295
 800aee4:	fa02 f303 	lsl.w	r3, r2, r3
 800aee8:	ea03 0a0a 	and.w	sl, r3, sl
 800aeec:	e7ae      	b.n	800ae4c <_strtod_l+0x5fc>
 800aeee:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800aef0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800aef2:	2d00      	cmp	r5, #0
 800aef4:	bfab      	itete	ge
 800aef6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800aef8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800aefa:	18ef      	addge	r7, r5, r3
 800aefc:	1b5e      	sublt	r6, r3, r5
 800aefe:	9b08      	ldr	r3, [sp, #32]
 800af00:	bfa8      	it	ge
 800af02:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800af04:	eba5 0503 	sub.w	r5, r5, r3
 800af08:	4415      	add	r5, r2
 800af0a:	4b67      	ldr	r3, [pc, #412]	@ (800b0a8 <_strtod_l+0x858>)
 800af0c:	f105 35ff 	add.w	r5, r5, #4294967295
 800af10:	bfb8      	it	lt
 800af12:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800af14:	429d      	cmp	r5, r3
 800af16:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800af1a:	da50      	bge.n	800afbe <_strtod_l+0x76e>
 800af1c:	1b5b      	subs	r3, r3, r5
 800af1e:	2b1f      	cmp	r3, #31
 800af20:	f04f 0101 	mov.w	r1, #1
 800af24:	eba2 0203 	sub.w	r2, r2, r3
 800af28:	dc3d      	bgt.n	800afa6 <_strtod_l+0x756>
 800af2a:	fa01 f303 	lsl.w	r3, r1, r3
 800af2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af30:	2300      	movs	r3, #0
 800af32:	9310      	str	r3, [sp, #64]	@ 0x40
 800af34:	18bd      	adds	r5, r7, r2
 800af36:	9b08      	ldr	r3, [sp, #32]
 800af38:	42af      	cmp	r7, r5
 800af3a:	4416      	add	r6, r2
 800af3c:	441e      	add	r6, r3
 800af3e:	463b      	mov	r3, r7
 800af40:	bfa8      	it	ge
 800af42:	462b      	movge	r3, r5
 800af44:	42b3      	cmp	r3, r6
 800af46:	bfa8      	it	ge
 800af48:	4633      	movge	r3, r6
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	bfc2      	ittt	gt
 800af4e:	1aed      	subgt	r5, r5, r3
 800af50:	1af6      	subgt	r6, r6, r3
 800af52:	1aff      	subgt	r7, r7, r3
 800af54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af56:	2b00      	cmp	r3, #0
 800af58:	dd16      	ble.n	800af88 <_strtod_l+0x738>
 800af5a:	4641      	mov	r1, r8
 800af5c:	461a      	mov	r2, r3
 800af5e:	9805      	ldr	r0, [sp, #20]
 800af60:	f7ff f9a8 	bl	800a2b4 <__pow5mult>
 800af64:	4680      	mov	r8, r0
 800af66:	2800      	cmp	r0, #0
 800af68:	d0b7      	beq.n	800aeda <_strtod_l+0x68a>
 800af6a:	4601      	mov	r1, r0
 800af6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af6e:	9805      	ldr	r0, [sp, #20]
 800af70:	f7ff f8f8 	bl	800a164 <__multiply>
 800af74:	900e      	str	r0, [sp, #56]	@ 0x38
 800af76:	2800      	cmp	r0, #0
 800af78:	f43f ae85 	beq.w	800ac86 <_strtod_l+0x436>
 800af7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af7e:	9805      	ldr	r0, [sp, #20]
 800af80:	f7fe ffdc 	bl	8009f3c <_Bfree>
 800af84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af86:	931a      	str	r3, [sp, #104]	@ 0x68
 800af88:	2d00      	cmp	r5, #0
 800af8a:	dc1d      	bgt.n	800afc8 <_strtod_l+0x778>
 800af8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af8e:	2b00      	cmp	r3, #0
 800af90:	dd23      	ble.n	800afda <_strtod_l+0x78a>
 800af92:	4649      	mov	r1, r9
 800af94:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800af96:	9805      	ldr	r0, [sp, #20]
 800af98:	f7ff f98c 	bl	800a2b4 <__pow5mult>
 800af9c:	4681      	mov	r9, r0
 800af9e:	b9e0      	cbnz	r0, 800afda <_strtod_l+0x78a>
 800afa0:	f04f 0900 	mov.w	r9, #0
 800afa4:	e66f      	b.n	800ac86 <_strtod_l+0x436>
 800afa6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800afaa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800afae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800afb2:	35e2      	adds	r5, #226	@ 0xe2
 800afb4:	fa01 f305 	lsl.w	r3, r1, r5
 800afb8:	9310      	str	r3, [sp, #64]	@ 0x40
 800afba:	9113      	str	r1, [sp, #76]	@ 0x4c
 800afbc:	e7ba      	b.n	800af34 <_strtod_l+0x6e4>
 800afbe:	2300      	movs	r3, #0
 800afc0:	9310      	str	r3, [sp, #64]	@ 0x40
 800afc2:	2301      	movs	r3, #1
 800afc4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800afc6:	e7b5      	b.n	800af34 <_strtod_l+0x6e4>
 800afc8:	462a      	mov	r2, r5
 800afca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afcc:	9805      	ldr	r0, [sp, #20]
 800afce:	f7ff f9cb 	bl	800a368 <__lshift>
 800afd2:	901a      	str	r0, [sp, #104]	@ 0x68
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d1d9      	bne.n	800af8c <_strtod_l+0x73c>
 800afd8:	e655      	b.n	800ac86 <_strtod_l+0x436>
 800afda:	2e00      	cmp	r6, #0
 800afdc:	dd07      	ble.n	800afee <_strtod_l+0x79e>
 800afde:	4649      	mov	r1, r9
 800afe0:	4632      	mov	r2, r6
 800afe2:	9805      	ldr	r0, [sp, #20]
 800afe4:	f7ff f9c0 	bl	800a368 <__lshift>
 800afe8:	4681      	mov	r9, r0
 800afea:	2800      	cmp	r0, #0
 800afec:	d0d8      	beq.n	800afa0 <_strtod_l+0x750>
 800afee:	2f00      	cmp	r7, #0
 800aff0:	dd08      	ble.n	800b004 <_strtod_l+0x7b4>
 800aff2:	4641      	mov	r1, r8
 800aff4:	463a      	mov	r2, r7
 800aff6:	9805      	ldr	r0, [sp, #20]
 800aff8:	f7ff f9b6 	bl	800a368 <__lshift>
 800affc:	4680      	mov	r8, r0
 800affe:	2800      	cmp	r0, #0
 800b000:	f43f ae41 	beq.w	800ac86 <_strtod_l+0x436>
 800b004:	464a      	mov	r2, r9
 800b006:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b008:	9805      	ldr	r0, [sp, #20]
 800b00a:	f7ff fa35 	bl	800a478 <__mdiff>
 800b00e:	4604      	mov	r4, r0
 800b010:	2800      	cmp	r0, #0
 800b012:	f43f ae38 	beq.w	800ac86 <_strtod_l+0x436>
 800b016:	68c3      	ldr	r3, [r0, #12]
 800b018:	4641      	mov	r1, r8
 800b01a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b01c:	2300      	movs	r3, #0
 800b01e:	60c3      	str	r3, [r0, #12]
 800b020:	f7ff fa0e 	bl	800a440 <__mcmp>
 800b024:	2800      	cmp	r0, #0
 800b026:	da45      	bge.n	800b0b4 <_strtod_l+0x864>
 800b028:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b02a:	ea53 030a 	orrs.w	r3, r3, sl
 800b02e:	d16b      	bne.n	800b108 <_strtod_l+0x8b8>
 800b030:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b034:	2b00      	cmp	r3, #0
 800b036:	d167      	bne.n	800b108 <_strtod_l+0x8b8>
 800b038:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b03c:	0d1b      	lsrs	r3, r3, #20
 800b03e:	051b      	lsls	r3, r3, #20
 800b040:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b044:	d960      	bls.n	800b108 <_strtod_l+0x8b8>
 800b046:	6963      	ldr	r3, [r4, #20]
 800b048:	b913      	cbnz	r3, 800b050 <_strtod_l+0x800>
 800b04a:	6923      	ldr	r3, [r4, #16]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	dd5b      	ble.n	800b108 <_strtod_l+0x8b8>
 800b050:	4621      	mov	r1, r4
 800b052:	2201      	movs	r2, #1
 800b054:	9805      	ldr	r0, [sp, #20]
 800b056:	f7ff f987 	bl	800a368 <__lshift>
 800b05a:	4641      	mov	r1, r8
 800b05c:	4604      	mov	r4, r0
 800b05e:	f7ff f9ef 	bl	800a440 <__mcmp>
 800b062:	2800      	cmp	r0, #0
 800b064:	dd50      	ble.n	800b108 <_strtod_l+0x8b8>
 800b066:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b06a:	9a08      	ldr	r2, [sp, #32]
 800b06c:	0d1b      	lsrs	r3, r3, #20
 800b06e:	051b      	lsls	r3, r3, #20
 800b070:	2a00      	cmp	r2, #0
 800b072:	d06a      	beq.n	800b14a <_strtod_l+0x8fa>
 800b074:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b078:	d867      	bhi.n	800b14a <_strtod_l+0x8fa>
 800b07a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b07e:	f67f ae98 	bls.w	800adb2 <_strtod_l+0x562>
 800b082:	4650      	mov	r0, sl
 800b084:	4659      	mov	r1, fp
 800b086:	4b09      	ldr	r3, [pc, #36]	@ (800b0ac <_strtod_l+0x85c>)
 800b088:	2200      	movs	r2, #0
 800b08a:	f7f5 fa25 	bl	80004d8 <__aeabi_dmul>
 800b08e:	4b08      	ldr	r3, [pc, #32]	@ (800b0b0 <_strtod_l+0x860>)
 800b090:	4682      	mov	sl, r0
 800b092:	400b      	ands	r3, r1
 800b094:	468b      	mov	fp, r1
 800b096:	2b00      	cmp	r3, #0
 800b098:	f47f ae00 	bne.w	800ac9c <_strtod_l+0x44c>
 800b09c:	2322      	movs	r3, #34	@ 0x22
 800b09e:	9a05      	ldr	r2, [sp, #20]
 800b0a0:	6013      	str	r3, [r2, #0]
 800b0a2:	e5fb      	b.n	800ac9c <_strtod_l+0x44c>
 800b0a4:	0800e128 	.word	0x0800e128
 800b0a8:	fffffc02 	.word	0xfffffc02
 800b0ac:	39500000 	.word	0x39500000
 800b0b0:	7ff00000 	.word	0x7ff00000
 800b0b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b0b8:	d165      	bne.n	800b186 <_strtod_l+0x936>
 800b0ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b0bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0c0:	b35a      	cbz	r2, 800b11a <_strtod_l+0x8ca>
 800b0c2:	4a99      	ldr	r2, [pc, #612]	@ (800b328 <_strtod_l+0xad8>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d12b      	bne.n	800b120 <_strtod_l+0x8d0>
 800b0c8:	9b08      	ldr	r3, [sp, #32]
 800b0ca:	4651      	mov	r1, sl
 800b0cc:	b303      	cbz	r3, 800b110 <_strtod_l+0x8c0>
 800b0ce:	465a      	mov	r2, fp
 800b0d0:	4b96      	ldr	r3, [pc, #600]	@ (800b32c <_strtod_l+0xadc>)
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0dc:	d81b      	bhi.n	800b116 <_strtod_l+0x8c6>
 800b0de:	0d1b      	lsrs	r3, r3, #20
 800b0e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e8:	4299      	cmp	r1, r3
 800b0ea:	d119      	bne.n	800b120 <_strtod_l+0x8d0>
 800b0ec:	4b90      	ldr	r3, [pc, #576]	@ (800b330 <_strtod_l+0xae0>)
 800b0ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d102      	bne.n	800b0fa <_strtod_l+0x8aa>
 800b0f4:	3101      	adds	r1, #1
 800b0f6:	f43f adc6 	beq.w	800ac86 <_strtod_l+0x436>
 800b0fa:	f04f 0a00 	mov.w	sl, #0
 800b0fe:	4b8b      	ldr	r3, [pc, #556]	@ (800b32c <_strtod_l+0xadc>)
 800b100:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b102:	401a      	ands	r2, r3
 800b104:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b108:	9b08      	ldr	r3, [sp, #32]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1b9      	bne.n	800b082 <_strtod_l+0x832>
 800b10e:	e5c5      	b.n	800ac9c <_strtod_l+0x44c>
 800b110:	f04f 33ff 	mov.w	r3, #4294967295
 800b114:	e7e8      	b.n	800b0e8 <_strtod_l+0x898>
 800b116:	4613      	mov	r3, r2
 800b118:	e7e6      	b.n	800b0e8 <_strtod_l+0x898>
 800b11a:	ea53 030a 	orrs.w	r3, r3, sl
 800b11e:	d0a2      	beq.n	800b066 <_strtod_l+0x816>
 800b120:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b122:	b1db      	cbz	r3, 800b15c <_strtod_l+0x90c>
 800b124:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b126:	4213      	tst	r3, r2
 800b128:	d0ee      	beq.n	800b108 <_strtod_l+0x8b8>
 800b12a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b12c:	4650      	mov	r0, sl
 800b12e:	4659      	mov	r1, fp
 800b130:	9a08      	ldr	r2, [sp, #32]
 800b132:	b1bb      	cbz	r3, 800b164 <_strtod_l+0x914>
 800b134:	f7ff fb68 	bl	800a808 <sulp>
 800b138:	4602      	mov	r2, r0
 800b13a:	460b      	mov	r3, r1
 800b13c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b140:	f7f5 f814 	bl	800016c <__adddf3>
 800b144:	4682      	mov	sl, r0
 800b146:	468b      	mov	fp, r1
 800b148:	e7de      	b.n	800b108 <_strtod_l+0x8b8>
 800b14a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b14e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b152:	f04f 3aff 	mov.w	sl, #4294967295
 800b156:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b15a:	e7d5      	b.n	800b108 <_strtod_l+0x8b8>
 800b15c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b15e:	ea13 0f0a 	tst.w	r3, sl
 800b162:	e7e1      	b.n	800b128 <_strtod_l+0x8d8>
 800b164:	f7ff fb50 	bl	800a808 <sulp>
 800b168:	4602      	mov	r2, r0
 800b16a:	460b      	mov	r3, r1
 800b16c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b170:	f7f4 fffa 	bl	8000168 <__aeabi_dsub>
 800b174:	2200      	movs	r2, #0
 800b176:	2300      	movs	r3, #0
 800b178:	4682      	mov	sl, r0
 800b17a:	468b      	mov	fp, r1
 800b17c:	f7f5 fc14 	bl	80009a8 <__aeabi_dcmpeq>
 800b180:	2800      	cmp	r0, #0
 800b182:	d0c1      	beq.n	800b108 <_strtod_l+0x8b8>
 800b184:	e615      	b.n	800adb2 <_strtod_l+0x562>
 800b186:	4641      	mov	r1, r8
 800b188:	4620      	mov	r0, r4
 800b18a:	f7ff fac9 	bl	800a720 <__ratio>
 800b18e:	2200      	movs	r2, #0
 800b190:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b194:	4606      	mov	r6, r0
 800b196:	460f      	mov	r7, r1
 800b198:	f7f5 fc1a 	bl	80009d0 <__aeabi_dcmple>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d06d      	beq.n	800b27c <_strtod_l+0xa2c>
 800b1a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d178      	bne.n	800b298 <_strtod_l+0xa48>
 800b1a6:	f1ba 0f00 	cmp.w	sl, #0
 800b1aa:	d156      	bne.n	800b25a <_strtod_l+0xa0a>
 800b1ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d158      	bne.n	800b268 <_strtod_l+0xa18>
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	4639      	mov	r1, r7
 800b1bc:	4b5d      	ldr	r3, [pc, #372]	@ (800b334 <_strtod_l+0xae4>)
 800b1be:	f7f5 fbfd 	bl	80009bc <__aeabi_dcmplt>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d157      	bne.n	800b276 <_strtod_l+0xa26>
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	4639      	mov	r1, r7
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	4b5a      	ldr	r3, [pc, #360]	@ (800b338 <_strtod_l+0xae8>)
 800b1ce:	f7f5 f983 	bl	80004d8 <__aeabi_dmul>
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	460f      	mov	r7, r1
 800b1d6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b1da:	9606      	str	r6, [sp, #24]
 800b1dc:	9307      	str	r3, [sp, #28]
 800b1de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1e2:	4d52      	ldr	r5, [pc, #328]	@ (800b32c <_strtod_l+0xadc>)
 800b1e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b1e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ea:	401d      	ands	r5, r3
 800b1ec:	4b53      	ldr	r3, [pc, #332]	@ (800b33c <_strtod_l+0xaec>)
 800b1ee:	429d      	cmp	r5, r3
 800b1f0:	f040 80aa 	bne.w	800b348 <_strtod_l+0xaf8>
 800b1f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1f6:	4650      	mov	r0, sl
 800b1f8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b1fc:	4659      	mov	r1, fp
 800b1fe:	f7ff f9cf 	bl	800a5a0 <__ulp>
 800b202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b206:	f7f5 f967 	bl	80004d8 <__aeabi_dmul>
 800b20a:	4652      	mov	r2, sl
 800b20c:	465b      	mov	r3, fp
 800b20e:	f7f4 ffad 	bl	800016c <__adddf3>
 800b212:	460b      	mov	r3, r1
 800b214:	4945      	ldr	r1, [pc, #276]	@ (800b32c <_strtod_l+0xadc>)
 800b216:	4a4a      	ldr	r2, [pc, #296]	@ (800b340 <_strtod_l+0xaf0>)
 800b218:	4019      	ands	r1, r3
 800b21a:	4291      	cmp	r1, r2
 800b21c:	4682      	mov	sl, r0
 800b21e:	d942      	bls.n	800b2a6 <_strtod_l+0xa56>
 800b220:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b222:	4b43      	ldr	r3, [pc, #268]	@ (800b330 <_strtod_l+0xae0>)
 800b224:	429a      	cmp	r2, r3
 800b226:	d103      	bne.n	800b230 <_strtod_l+0x9e0>
 800b228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b22a:	3301      	adds	r3, #1
 800b22c:	f43f ad2b 	beq.w	800ac86 <_strtod_l+0x436>
 800b230:	f04f 3aff 	mov.w	sl, #4294967295
 800b234:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800b330 <_strtod_l+0xae0>
 800b238:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b23a:	9805      	ldr	r0, [sp, #20]
 800b23c:	f7fe fe7e 	bl	8009f3c <_Bfree>
 800b240:	4649      	mov	r1, r9
 800b242:	9805      	ldr	r0, [sp, #20]
 800b244:	f7fe fe7a 	bl	8009f3c <_Bfree>
 800b248:	4641      	mov	r1, r8
 800b24a:	9805      	ldr	r0, [sp, #20]
 800b24c:	f7fe fe76 	bl	8009f3c <_Bfree>
 800b250:	4621      	mov	r1, r4
 800b252:	9805      	ldr	r0, [sp, #20]
 800b254:	f7fe fe72 	bl	8009f3c <_Bfree>
 800b258:	e618      	b.n	800ae8c <_strtod_l+0x63c>
 800b25a:	f1ba 0f01 	cmp.w	sl, #1
 800b25e:	d103      	bne.n	800b268 <_strtod_l+0xa18>
 800b260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b262:	2b00      	cmp	r3, #0
 800b264:	f43f ada5 	beq.w	800adb2 <_strtod_l+0x562>
 800b268:	2200      	movs	r2, #0
 800b26a:	4b36      	ldr	r3, [pc, #216]	@ (800b344 <_strtod_l+0xaf4>)
 800b26c:	2600      	movs	r6, #0
 800b26e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b272:	4f30      	ldr	r7, [pc, #192]	@ (800b334 <_strtod_l+0xae4>)
 800b274:	e7b3      	b.n	800b1de <_strtod_l+0x98e>
 800b276:	2600      	movs	r6, #0
 800b278:	4f2f      	ldr	r7, [pc, #188]	@ (800b338 <_strtod_l+0xae8>)
 800b27a:	e7ac      	b.n	800b1d6 <_strtod_l+0x986>
 800b27c:	4630      	mov	r0, r6
 800b27e:	4639      	mov	r1, r7
 800b280:	4b2d      	ldr	r3, [pc, #180]	@ (800b338 <_strtod_l+0xae8>)
 800b282:	2200      	movs	r2, #0
 800b284:	f7f5 f928 	bl	80004d8 <__aeabi_dmul>
 800b288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b28a:	4606      	mov	r6, r0
 800b28c:	460f      	mov	r7, r1
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d0a1      	beq.n	800b1d6 <_strtod_l+0x986>
 800b292:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b296:	e7a2      	b.n	800b1de <_strtod_l+0x98e>
 800b298:	2200      	movs	r2, #0
 800b29a:	4b26      	ldr	r3, [pc, #152]	@ (800b334 <_strtod_l+0xae4>)
 800b29c:	4616      	mov	r6, r2
 800b29e:	461f      	mov	r7, r3
 800b2a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b2a4:	e79b      	b.n	800b1de <_strtod_l+0x98e>
 800b2a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b2aa:	9b08      	ldr	r3, [sp, #32]
 800b2ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1c1      	bne.n	800b238 <_strtod_l+0x9e8>
 800b2b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b2b8:	0d1b      	lsrs	r3, r3, #20
 800b2ba:	051b      	lsls	r3, r3, #20
 800b2bc:	429d      	cmp	r5, r3
 800b2be:	d1bb      	bne.n	800b238 <_strtod_l+0x9e8>
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	4639      	mov	r1, r7
 800b2c4:	f7f5 ff4a 	bl	800115c <__aeabi_d2lz>
 800b2c8:	f7f5 f8d8 	bl	800047c <__aeabi_l2d>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	4639      	mov	r1, r7
 800b2d4:	f7f4 ff48 	bl	8000168 <__aeabi_dsub>
 800b2d8:	460b      	mov	r3, r1
 800b2da:	4602      	mov	r2, r0
 800b2dc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b2e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b2e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2e6:	ea46 060a 	orr.w	r6, r6, sl
 800b2ea:	431e      	orrs	r6, r3
 800b2ec:	d069      	beq.n	800b3c2 <_strtod_l+0xb72>
 800b2ee:	a30a      	add	r3, pc, #40	@ (adr r3, 800b318 <_strtod_l+0xac8>)
 800b2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f4:	f7f5 fb62 	bl	80009bc <__aeabi_dcmplt>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	f47f accf 	bne.w	800ac9c <_strtod_l+0x44c>
 800b2fe:	a308      	add	r3, pc, #32	@ (adr r3, 800b320 <_strtod_l+0xad0>)
 800b300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b304:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b308:	f7f5 fb76 	bl	80009f8 <__aeabi_dcmpgt>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d093      	beq.n	800b238 <_strtod_l+0x9e8>
 800b310:	e4c4      	b.n	800ac9c <_strtod_l+0x44c>
 800b312:	bf00      	nop
 800b314:	f3af 8000 	nop.w
 800b318:	94a03595 	.word	0x94a03595
 800b31c:	3fdfffff 	.word	0x3fdfffff
 800b320:	35afe535 	.word	0x35afe535
 800b324:	3fe00000 	.word	0x3fe00000
 800b328:	000fffff 	.word	0x000fffff
 800b32c:	7ff00000 	.word	0x7ff00000
 800b330:	7fefffff 	.word	0x7fefffff
 800b334:	3ff00000 	.word	0x3ff00000
 800b338:	3fe00000 	.word	0x3fe00000
 800b33c:	7fe00000 	.word	0x7fe00000
 800b340:	7c9fffff 	.word	0x7c9fffff
 800b344:	bff00000 	.word	0xbff00000
 800b348:	9b08      	ldr	r3, [sp, #32]
 800b34a:	b323      	cbz	r3, 800b396 <_strtod_l+0xb46>
 800b34c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b350:	d821      	bhi.n	800b396 <_strtod_l+0xb46>
 800b352:	a327      	add	r3, pc, #156	@ (adr r3, 800b3f0 <_strtod_l+0xba0>)
 800b354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b358:	4630      	mov	r0, r6
 800b35a:	4639      	mov	r1, r7
 800b35c:	f7f5 fb38 	bl	80009d0 <__aeabi_dcmple>
 800b360:	b1a0      	cbz	r0, 800b38c <_strtod_l+0xb3c>
 800b362:	4639      	mov	r1, r7
 800b364:	4630      	mov	r0, r6
 800b366:	f7f5 fb8f 	bl	8000a88 <__aeabi_d2uiz>
 800b36a:	2801      	cmp	r0, #1
 800b36c:	bf38      	it	cc
 800b36e:	2001      	movcc	r0, #1
 800b370:	f7f5 f838 	bl	80003e4 <__aeabi_ui2d>
 800b374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b376:	4606      	mov	r6, r0
 800b378:	460f      	mov	r7, r1
 800b37a:	b9fb      	cbnz	r3, 800b3bc <_strtod_l+0xb6c>
 800b37c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b380:	9014      	str	r0, [sp, #80]	@ 0x50
 800b382:	9315      	str	r3, [sp, #84]	@ 0x54
 800b384:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b388:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b38c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b38e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b392:	1b5b      	subs	r3, r3, r5
 800b394:	9311      	str	r3, [sp, #68]	@ 0x44
 800b396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b39a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b39e:	f7ff f8ff 	bl	800a5a0 <__ulp>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4650      	mov	r0, sl
 800b3a8:	4659      	mov	r1, fp
 800b3aa:	f7f5 f895 	bl	80004d8 <__aeabi_dmul>
 800b3ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b3b2:	f7f4 fedb 	bl	800016c <__adddf3>
 800b3b6:	4682      	mov	sl, r0
 800b3b8:	468b      	mov	fp, r1
 800b3ba:	e776      	b.n	800b2aa <_strtod_l+0xa5a>
 800b3bc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b3c0:	e7e0      	b.n	800b384 <_strtod_l+0xb34>
 800b3c2:	a30d      	add	r3, pc, #52	@ (adr r3, 800b3f8 <_strtod_l+0xba8>)
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	f7f5 faf8 	bl	80009bc <__aeabi_dcmplt>
 800b3cc:	e79e      	b.n	800b30c <_strtod_l+0xabc>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3d4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	f7ff ba77 	b.w	800a8ca <_strtod_l+0x7a>
 800b3dc:	2a65      	cmp	r2, #101	@ 0x65
 800b3de:	f43f ab6e 	beq.w	800aabe <_strtod_l+0x26e>
 800b3e2:	2a45      	cmp	r2, #69	@ 0x45
 800b3e4:	f43f ab6b 	beq.w	800aabe <_strtod_l+0x26e>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	f7ff bba6 	b.w	800ab3a <_strtod_l+0x2ea>
 800b3ee:	bf00      	nop
 800b3f0:	ffc00000 	.word	0xffc00000
 800b3f4:	41dfffff 	.word	0x41dfffff
 800b3f8:	94a03595 	.word	0x94a03595
 800b3fc:	3fcfffff 	.word	0x3fcfffff

0800b400 <_strtod_r>:
 800b400:	4b01      	ldr	r3, [pc, #4]	@ (800b408 <_strtod_r+0x8>)
 800b402:	f7ff ba25 	b.w	800a850 <_strtod_l>
 800b406:	bf00      	nop
 800b408:	20000078 	.word	0x20000078

0800b40c <_strtol_l.constprop.0>:
 800b40c:	2b24      	cmp	r3, #36	@ 0x24
 800b40e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b412:	4686      	mov	lr, r0
 800b414:	4690      	mov	r8, r2
 800b416:	d801      	bhi.n	800b41c <_strtol_l.constprop.0+0x10>
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d106      	bne.n	800b42a <_strtol_l.constprop.0+0x1e>
 800b41c:	f7fd fdb2 	bl	8008f84 <__errno>
 800b420:	2316      	movs	r3, #22
 800b422:	6003      	str	r3, [r0, #0]
 800b424:	2000      	movs	r0, #0
 800b426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b42a:	460d      	mov	r5, r1
 800b42c:	4833      	ldr	r0, [pc, #204]	@ (800b4fc <_strtol_l.constprop.0+0xf0>)
 800b42e:	462a      	mov	r2, r5
 800b430:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b434:	5d06      	ldrb	r6, [r0, r4]
 800b436:	f016 0608 	ands.w	r6, r6, #8
 800b43a:	d1f8      	bne.n	800b42e <_strtol_l.constprop.0+0x22>
 800b43c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b43e:	d12d      	bne.n	800b49c <_strtol_l.constprop.0+0x90>
 800b440:	2601      	movs	r6, #1
 800b442:	782c      	ldrb	r4, [r5, #0]
 800b444:	1c95      	adds	r5, r2, #2
 800b446:	f033 0210 	bics.w	r2, r3, #16
 800b44a:	d109      	bne.n	800b460 <_strtol_l.constprop.0+0x54>
 800b44c:	2c30      	cmp	r4, #48	@ 0x30
 800b44e:	d12a      	bne.n	800b4a6 <_strtol_l.constprop.0+0x9a>
 800b450:	782a      	ldrb	r2, [r5, #0]
 800b452:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b456:	2a58      	cmp	r2, #88	@ 0x58
 800b458:	d125      	bne.n	800b4a6 <_strtol_l.constprop.0+0x9a>
 800b45a:	2310      	movs	r3, #16
 800b45c:	786c      	ldrb	r4, [r5, #1]
 800b45e:	3502      	adds	r5, #2
 800b460:	2200      	movs	r2, #0
 800b462:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b466:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b46a:	fbbc f9f3 	udiv	r9, ip, r3
 800b46e:	4610      	mov	r0, r2
 800b470:	fb03 ca19 	mls	sl, r3, r9, ip
 800b474:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b478:	2f09      	cmp	r7, #9
 800b47a:	d81b      	bhi.n	800b4b4 <_strtol_l.constprop.0+0xa8>
 800b47c:	463c      	mov	r4, r7
 800b47e:	42a3      	cmp	r3, r4
 800b480:	dd27      	ble.n	800b4d2 <_strtol_l.constprop.0+0xc6>
 800b482:	1c57      	adds	r7, r2, #1
 800b484:	d007      	beq.n	800b496 <_strtol_l.constprop.0+0x8a>
 800b486:	4581      	cmp	r9, r0
 800b488:	d320      	bcc.n	800b4cc <_strtol_l.constprop.0+0xc0>
 800b48a:	d101      	bne.n	800b490 <_strtol_l.constprop.0+0x84>
 800b48c:	45a2      	cmp	sl, r4
 800b48e:	db1d      	blt.n	800b4cc <_strtol_l.constprop.0+0xc0>
 800b490:	2201      	movs	r2, #1
 800b492:	fb00 4003 	mla	r0, r0, r3, r4
 800b496:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b49a:	e7eb      	b.n	800b474 <_strtol_l.constprop.0+0x68>
 800b49c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b49e:	bf04      	itt	eq
 800b4a0:	782c      	ldrbeq	r4, [r5, #0]
 800b4a2:	1c95      	addeq	r5, r2, #2
 800b4a4:	e7cf      	b.n	800b446 <_strtol_l.constprop.0+0x3a>
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1da      	bne.n	800b460 <_strtol_l.constprop.0+0x54>
 800b4aa:	2c30      	cmp	r4, #48	@ 0x30
 800b4ac:	bf0c      	ite	eq
 800b4ae:	2308      	moveq	r3, #8
 800b4b0:	230a      	movne	r3, #10
 800b4b2:	e7d5      	b.n	800b460 <_strtol_l.constprop.0+0x54>
 800b4b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b4b8:	2f19      	cmp	r7, #25
 800b4ba:	d801      	bhi.n	800b4c0 <_strtol_l.constprop.0+0xb4>
 800b4bc:	3c37      	subs	r4, #55	@ 0x37
 800b4be:	e7de      	b.n	800b47e <_strtol_l.constprop.0+0x72>
 800b4c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b4c4:	2f19      	cmp	r7, #25
 800b4c6:	d804      	bhi.n	800b4d2 <_strtol_l.constprop.0+0xc6>
 800b4c8:	3c57      	subs	r4, #87	@ 0x57
 800b4ca:	e7d8      	b.n	800b47e <_strtol_l.constprop.0+0x72>
 800b4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d0:	e7e1      	b.n	800b496 <_strtol_l.constprop.0+0x8a>
 800b4d2:	1c53      	adds	r3, r2, #1
 800b4d4:	d108      	bne.n	800b4e8 <_strtol_l.constprop.0+0xdc>
 800b4d6:	2322      	movs	r3, #34	@ 0x22
 800b4d8:	4660      	mov	r0, ip
 800b4da:	f8ce 3000 	str.w	r3, [lr]
 800b4de:	f1b8 0f00 	cmp.w	r8, #0
 800b4e2:	d0a0      	beq.n	800b426 <_strtol_l.constprop.0+0x1a>
 800b4e4:	1e69      	subs	r1, r5, #1
 800b4e6:	e006      	b.n	800b4f6 <_strtol_l.constprop.0+0xea>
 800b4e8:	b106      	cbz	r6, 800b4ec <_strtol_l.constprop.0+0xe0>
 800b4ea:	4240      	negs	r0, r0
 800b4ec:	f1b8 0f00 	cmp.w	r8, #0
 800b4f0:	d099      	beq.n	800b426 <_strtol_l.constprop.0+0x1a>
 800b4f2:	2a00      	cmp	r2, #0
 800b4f4:	d1f6      	bne.n	800b4e4 <_strtol_l.constprop.0+0xd8>
 800b4f6:	f8c8 1000 	str.w	r1, [r8]
 800b4fa:	e794      	b.n	800b426 <_strtol_l.constprop.0+0x1a>
 800b4fc:	0800e151 	.word	0x0800e151

0800b500 <_strtol_r>:
 800b500:	f7ff bf84 	b.w	800b40c <_strtol_l.constprop.0>

0800b504 <__ssputs_r>:
 800b504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b508:	461f      	mov	r7, r3
 800b50a:	688e      	ldr	r6, [r1, #8]
 800b50c:	4682      	mov	sl, r0
 800b50e:	42be      	cmp	r6, r7
 800b510:	460c      	mov	r4, r1
 800b512:	4690      	mov	r8, r2
 800b514:	680b      	ldr	r3, [r1, #0]
 800b516:	d82d      	bhi.n	800b574 <__ssputs_r+0x70>
 800b518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b51c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b520:	d026      	beq.n	800b570 <__ssputs_r+0x6c>
 800b522:	6965      	ldr	r5, [r4, #20]
 800b524:	6909      	ldr	r1, [r1, #16]
 800b526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b52a:	eba3 0901 	sub.w	r9, r3, r1
 800b52e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b532:	1c7b      	adds	r3, r7, #1
 800b534:	444b      	add	r3, r9
 800b536:	106d      	asrs	r5, r5, #1
 800b538:	429d      	cmp	r5, r3
 800b53a:	bf38      	it	cc
 800b53c:	461d      	movcc	r5, r3
 800b53e:	0553      	lsls	r3, r2, #21
 800b540:	d527      	bpl.n	800b592 <__ssputs_r+0x8e>
 800b542:	4629      	mov	r1, r5
 800b544:	f7fe fc2e 	bl	8009da4 <_malloc_r>
 800b548:	4606      	mov	r6, r0
 800b54a:	b360      	cbz	r0, 800b5a6 <__ssputs_r+0xa2>
 800b54c:	464a      	mov	r2, r9
 800b54e:	6921      	ldr	r1, [r4, #16]
 800b550:	f7fd fd53 	bl	8008ffa <memcpy>
 800b554:	89a3      	ldrh	r3, [r4, #12]
 800b556:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b55a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b55e:	81a3      	strh	r3, [r4, #12]
 800b560:	6126      	str	r6, [r4, #16]
 800b562:	444e      	add	r6, r9
 800b564:	6026      	str	r6, [r4, #0]
 800b566:	463e      	mov	r6, r7
 800b568:	6165      	str	r5, [r4, #20]
 800b56a:	eba5 0509 	sub.w	r5, r5, r9
 800b56e:	60a5      	str	r5, [r4, #8]
 800b570:	42be      	cmp	r6, r7
 800b572:	d900      	bls.n	800b576 <__ssputs_r+0x72>
 800b574:	463e      	mov	r6, r7
 800b576:	4632      	mov	r2, r6
 800b578:	4641      	mov	r1, r8
 800b57a:	6820      	ldr	r0, [r4, #0]
 800b57c:	f000 feea 	bl	800c354 <memmove>
 800b580:	2000      	movs	r0, #0
 800b582:	68a3      	ldr	r3, [r4, #8]
 800b584:	1b9b      	subs	r3, r3, r6
 800b586:	60a3      	str	r3, [r4, #8]
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	4433      	add	r3, r6
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b592:	462a      	mov	r2, r5
 800b594:	f001 faad 	bl	800caf2 <_realloc_r>
 800b598:	4606      	mov	r6, r0
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d1e0      	bne.n	800b560 <__ssputs_r+0x5c>
 800b59e:	4650      	mov	r0, sl
 800b5a0:	6921      	ldr	r1, [r4, #16]
 800b5a2:	f7fe fb8d 	bl	8009cc0 <_free_r>
 800b5a6:	230c      	movs	r3, #12
 800b5a8:	f8ca 3000 	str.w	r3, [sl]
 800b5ac:	89a3      	ldrh	r3, [r4, #12]
 800b5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5b6:	81a3      	strh	r3, [r4, #12]
 800b5b8:	e7e9      	b.n	800b58e <__ssputs_r+0x8a>
	...

0800b5bc <_svfiprintf_r>:
 800b5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c0:	4698      	mov	r8, r3
 800b5c2:	898b      	ldrh	r3, [r1, #12]
 800b5c4:	4607      	mov	r7, r0
 800b5c6:	061b      	lsls	r3, r3, #24
 800b5c8:	460d      	mov	r5, r1
 800b5ca:	4614      	mov	r4, r2
 800b5cc:	b09d      	sub	sp, #116	@ 0x74
 800b5ce:	d510      	bpl.n	800b5f2 <_svfiprintf_r+0x36>
 800b5d0:	690b      	ldr	r3, [r1, #16]
 800b5d2:	b973      	cbnz	r3, 800b5f2 <_svfiprintf_r+0x36>
 800b5d4:	2140      	movs	r1, #64	@ 0x40
 800b5d6:	f7fe fbe5 	bl	8009da4 <_malloc_r>
 800b5da:	6028      	str	r0, [r5, #0]
 800b5dc:	6128      	str	r0, [r5, #16]
 800b5de:	b930      	cbnz	r0, 800b5ee <_svfiprintf_r+0x32>
 800b5e0:	230c      	movs	r3, #12
 800b5e2:	603b      	str	r3, [r7, #0]
 800b5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e8:	b01d      	add	sp, #116	@ 0x74
 800b5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ee:	2340      	movs	r3, #64	@ 0x40
 800b5f0:	616b      	str	r3, [r5, #20]
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5f6:	2320      	movs	r3, #32
 800b5f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5fc:	2330      	movs	r3, #48	@ 0x30
 800b5fe:	f04f 0901 	mov.w	r9, #1
 800b602:	f8cd 800c 	str.w	r8, [sp, #12]
 800b606:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b7a0 <_svfiprintf_r+0x1e4>
 800b60a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b60e:	4623      	mov	r3, r4
 800b610:	469a      	mov	sl, r3
 800b612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b616:	b10a      	cbz	r2, 800b61c <_svfiprintf_r+0x60>
 800b618:	2a25      	cmp	r2, #37	@ 0x25
 800b61a:	d1f9      	bne.n	800b610 <_svfiprintf_r+0x54>
 800b61c:	ebba 0b04 	subs.w	fp, sl, r4
 800b620:	d00b      	beq.n	800b63a <_svfiprintf_r+0x7e>
 800b622:	465b      	mov	r3, fp
 800b624:	4622      	mov	r2, r4
 800b626:	4629      	mov	r1, r5
 800b628:	4638      	mov	r0, r7
 800b62a:	f7ff ff6b 	bl	800b504 <__ssputs_r>
 800b62e:	3001      	adds	r0, #1
 800b630:	f000 80a7 	beq.w	800b782 <_svfiprintf_r+0x1c6>
 800b634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b636:	445a      	add	r2, fp
 800b638:	9209      	str	r2, [sp, #36]	@ 0x24
 800b63a:	f89a 3000 	ldrb.w	r3, [sl]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f000 809f 	beq.w	800b782 <_svfiprintf_r+0x1c6>
 800b644:	2300      	movs	r3, #0
 800b646:	f04f 32ff 	mov.w	r2, #4294967295
 800b64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b64e:	f10a 0a01 	add.w	sl, sl, #1
 800b652:	9304      	str	r3, [sp, #16]
 800b654:	9307      	str	r3, [sp, #28]
 800b656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b65a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b65c:	4654      	mov	r4, sl
 800b65e:	2205      	movs	r2, #5
 800b660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b664:	484e      	ldr	r0, [pc, #312]	@ (800b7a0 <_svfiprintf_r+0x1e4>)
 800b666:	f7fd fcba 	bl	8008fde <memchr>
 800b66a:	9a04      	ldr	r2, [sp, #16]
 800b66c:	b9d8      	cbnz	r0, 800b6a6 <_svfiprintf_r+0xea>
 800b66e:	06d0      	lsls	r0, r2, #27
 800b670:	bf44      	itt	mi
 800b672:	2320      	movmi	r3, #32
 800b674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b678:	0711      	lsls	r1, r2, #28
 800b67a:	bf44      	itt	mi
 800b67c:	232b      	movmi	r3, #43	@ 0x2b
 800b67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b682:	f89a 3000 	ldrb.w	r3, [sl]
 800b686:	2b2a      	cmp	r3, #42	@ 0x2a
 800b688:	d015      	beq.n	800b6b6 <_svfiprintf_r+0xfa>
 800b68a:	4654      	mov	r4, sl
 800b68c:	2000      	movs	r0, #0
 800b68e:	f04f 0c0a 	mov.w	ip, #10
 800b692:	9a07      	ldr	r2, [sp, #28]
 800b694:	4621      	mov	r1, r4
 800b696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b69a:	3b30      	subs	r3, #48	@ 0x30
 800b69c:	2b09      	cmp	r3, #9
 800b69e:	d94b      	bls.n	800b738 <_svfiprintf_r+0x17c>
 800b6a0:	b1b0      	cbz	r0, 800b6d0 <_svfiprintf_r+0x114>
 800b6a2:	9207      	str	r2, [sp, #28]
 800b6a4:	e014      	b.n	800b6d0 <_svfiprintf_r+0x114>
 800b6a6:	eba0 0308 	sub.w	r3, r0, r8
 800b6aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	46a2      	mov	sl, r4
 800b6b2:	9304      	str	r3, [sp, #16]
 800b6b4:	e7d2      	b.n	800b65c <_svfiprintf_r+0xa0>
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	1d19      	adds	r1, r3, #4
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	9103      	str	r1, [sp, #12]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	bfbb      	ittet	lt
 800b6c2:	425b      	neglt	r3, r3
 800b6c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b6c8:	9307      	strge	r3, [sp, #28]
 800b6ca:	9307      	strlt	r3, [sp, #28]
 800b6cc:	bfb8      	it	lt
 800b6ce:	9204      	strlt	r2, [sp, #16]
 800b6d0:	7823      	ldrb	r3, [r4, #0]
 800b6d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6d4:	d10a      	bne.n	800b6ec <_svfiprintf_r+0x130>
 800b6d6:	7863      	ldrb	r3, [r4, #1]
 800b6d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6da:	d132      	bne.n	800b742 <_svfiprintf_r+0x186>
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	3402      	adds	r4, #2
 800b6e0:	1d1a      	adds	r2, r3, #4
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	9203      	str	r2, [sp, #12]
 800b6e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6ea:	9305      	str	r3, [sp, #20]
 800b6ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b7a4 <_svfiprintf_r+0x1e8>
 800b6f0:	2203      	movs	r2, #3
 800b6f2:	4650      	mov	r0, sl
 800b6f4:	7821      	ldrb	r1, [r4, #0]
 800b6f6:	f7fd fc72 	bl	8008fde <memchr>
 800b6fa:	b138      	cbz	r0, 800b70c <_svfiprintf_r+0x150>
 800b6fc:	2240      	movs	r2, #64	@ 0x40
 800b6fe:	9b04      	ldr	r3, [sp, #16]
 800b700:	eba0 000a 	sub.w	r0, r0, sl
 800b704:	4082      	lsls	r2, r0
 800b706:	4313      	orrs	r3, r2
 800b708:	3401      	adds	r4, #1
 800b70a:	9304      	str	r3, [sp, #16]
 800b70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b710:	2206      	movs	r2, #6
 800b712:	4825      	ldr	r0, [pc, #148]	@ (800b7a8 <_svfiprintf_r+0x1ec>)
 800b714:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b718:	f7fd fc61 	bl	8008fde <memchr>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d036      	beq.n	800b78e <_svfiprintf_r+0x1d2>
 800b720:	4b22      	ldr	r3, [pc, #136]	@ (800b7ac <_svfiprintf_r+0x1f0>)
 800b722:	bb1b      	cbnz	r3, 800b76c <_svfiprintf_r+0x1b0>
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	3307      	adds	r3, #7
 800b728:	f023 0307 	bic.w	r3, r3, #7
 800b72c:	3308      	adds	r3, #8
 800b72e:	9303      	str	r3, [sp, #12]
 800b730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b732:	4433      	add	r3, r6
 800b734:	9309      	str	r3, [sp, #36]	@ 0x24
 800b736:	e76a      	b.n	800b60e <_svfiprintf_r+0x52>
 800b738:	460c      	mov	r4, r1
 800b73a:	2001      	movs	r0, #1
 800b73c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b740:	e7a8      	b.n	800b694 <_svfiprintf_r+0xd8>
 800b742:	2300      	movs	r3, #0
 800b744:	f04f 0c0a 	mov.w	ip, #10
 800b748:	4619      	mov	r1, r3
 800b74a:	3401      	adds	r4, #1
 800b74c:	9305      	str	r3, [sp, #20]
 800b74e:	4620      	mov	r0, r4
 800b750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b754:	3a30      	subs	r2, #48	@ 0x30
 800b756:	2a09      	cmp	r2, #9
 800b758:	d903      	bls.n	800b762 <_svfiprintf_r+0x1a6>
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d0c6      	beq.n	800b6ec <_svfiprintf_r+0x130>
 800b75e:	9105      	str	r1, [sp, #20]
 800b760:	e7c4      	b.n	800b6ec <_svfiprintf_r+0x130>
 800b762:	4604      	mov	r4, r0
 800b764:	2301      	movs	r3, #1
 800b766:	fb0c 2101 	mla	r1, ip, r1, r2
 800b76a:	e7f0      	b.n	800b74e <_svfiprintf_r+0x192>
 800b76c:	ab03      	add	r3, sp, #12
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	462a      	mov	r2, r5
 800b772:	4638      	mov	r0, r7
 800b774:	4b0e      	ldr	r3, [pc, #56]	@ (800b7b0 <_svfiprintf_r+0x1f4>)
 800b776:	a904      	add	r1, sp, #16
 800b778:	f7fc fb7c 	bl	8007e74 <_printf_float>
 800b77c:	1c42      	adds	r2, r0, #1
 800b77e:	4606      	mov	r6, r0
 800b780:	d1d6      	bne.n	800b730 <_svfiprintf_r+0x174>
 800b782:	89ab      	ldrh	r3, [r5, #12]
 800b784:	065b      	lsls	r3, r3, #25
 800b786:	f53f af2d 	bmi.w	800b5e4 <_svfiprintf_r+0x28>
 800b78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b78c:	e72c      	b.n	800b5e8 <_svfiprintf_r+0x2c>
 800b78e:	ab03      	add	r3, sp, #12
 800b790:	9300      	str	r3, [sp, #0]
 800b792:	462a      	mov	r2, r5
 800b794:	4638      	mov	r0, r7
 800b796:	4b06      	ldr	r3, [pc, #24]	@ (800b7b0 <_svfiprintf_r+0x1f4>)
 800b798:	a904      	add	r1, sp, #16
 800b79a:	f7fc fe09 	bl	80083b0 <_printf_i>
 800b79e:	e7ed      	b.n	800b77c <_svfiprintf_r+0x1c0>
 800b7a0:	0800e251 	.word	0x0800e251
 800b7a4:	0800e257 	.word	0x0800e257
 800b7a8:	0800e25b 	.word	0x0800e25b
 800b7ac:	08007e75 	.word	0x08007e75
 800b7b0:	0800b505 	.word	0x0800b505

0800b7b4 <_sungetc_r>:
 800b7b4:	b538      	push	{r3, r4, r5, lr}
 800b7b6:	1c4b      	adds	r3, r1, #1
 800b7b8:	4614      	mov	r4, r2
 800b7ba:	d103      	bne.n	800b7c4 <_sungetc_r+0x10>
 800b7bc:	f04f 35ff 	mov.w	r5, #4294967295
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	8993      	ldrh	r3, [r2, #12]
 800b7c6:	b2cd      	uxtb	r5, r1
 800b7c8:	f023 0320 	bic.w	r3, r3, #32
 800b7cc:	8193      	strh	r3, [r2, #12]
 800b7ce:	6853      	ldr	r3, [r2, #4]
 800b7d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b7d2:	b18a      	cbz	r2, 800b7f8 <_sungetc_r+0x44>
 800b7d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	dd08      	ble.n	800b7ec <_sungetc_r+0x38>
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	1e5a      	subs	r2, r3, #1
 800b7de:	6022      	str	r2, [r4, #0]
 800b7e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b7e4:	6863      	ldr	r3, [r4, #4]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	6063      	str	r3, [r4, #4]
 800b7ea:	e7e9      	b.n	800b7c0 <_sungetc_r+0xc>
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	f000 fd79 	bl	800c2e4 <__submore>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d0f1      	beq.n	800b7da <_sungetc_r+0x26>
 800b7f6:	e7e1      	b.n	800b7bc <_sungetc_r+0x8>
 800b7f8:	6921      	ldr	r1, [r4, #16]
 800b7fa:	6822      	ldr	r2, [r4, #0]
 800b7fc:	b141      	cbz	r1, 800b810 <_sungetc_r+0x5c>
 800b7fe:	4291      	cmp	r1, r2
 800b800:	d206      	bcs.n	800b810 <_sungetc_r+0x5c>
 800b802:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b806:	42a9      	cmp	r1, r5
 800b808:	d102      	bne.n	800b810 <_sungetc_r+0x5c>
 800b80a:	3a01      	subs	r2, #1
 800b80c:	6022      	str	r2, [r4, #0]
 800b80e:	e7ea      	b.n	800b7e6 <_sungetc_r+0x32>
 800b810:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800b814:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b818:	6363      	str	r3, [r4, #52]	@ 0x34
 800b81a:	2303      	movs	r3, #3
 800b81c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b81e:	4623      	mov	r3, r4
 800b820:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	2301      	movs	r3, #1
 800b828:	e7de      	b.n	800b7e8 <_sungetc_r+0x34>

0800b82a <__ssrefill_r>:
 800b82a:	b510      	push	{r4, lr}
 800b82c:	460c      	mov	r4, r1
 800b82e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b830:	b169      	cbz	r1, 800b84e <__ssrefill_r+0x24>
 800b832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b836:	4299      	cmp	r1, r3
 800b838:	d001      	beq.n	800b83e <__ssrefill_r+0x14>
 800b83a:	f7fe fa41 	bl	8009cc0 <_free_r>
 800b83e:	2000      	movs	r0, #0
 800b840:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b842:	6360      	str	r0, [r4, #52]	@ 0x34
 800b844:	6063      	str	r3, [r4, #4]
 800b846:	b113      	cbz	r3, 800b84e <__ssrefill_r+0x24>
 800b848:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b84a:	6023      	str	r3, [r4, #0]
 800b84c:	bd10      	pop	{r4, pc}
 800b84e:	6923      	ldr	r3, [r4, #16]
 800b850:	f04f 30ff 	mov.w	r0, #4294967295
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	2300      	movs	r3, #0
 800b858:	6063      	str	r3, [r4, #4]
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	f043 0320 	orr.w	r3, r3, #32
 800b860:	81a3      	strh	r3, [r4, #12]
 800b862:	e7f3      	b.n	800b84c <__ssrefill_r+0x22>

0800b864 <__ssvfiscanf_r>:
 800b864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b868:	460c      	mov	r4, r1
 800b86a:	2100      	movs	r1, #0
 800b86c:	4606      	mov	r6, r0
 800b86e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b872:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b876:	49aa      	ldr	r1, [pc, #680]	@ (800bb20 <__ssvfiscanf_r+0x2bc>)
 800b878:	f10d 0804 	add.w	r8, sp, #4
 800b87c:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b87e:	49a9      	ldr	r1, [pc, #676]	@ (800bb24 <__ssvfiscanf_r+0x2c0>)
 800b880:	4fa9      	ldr	r7, [pc, #676]	@ (800bb28 <__ssvfiscanf_r+0x2c4>)
 800b882:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b886:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	7813      	ldrb	r3, [r2, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 8159 	beq.w	800bb44 <__ssvfiscanf_r+0x2e0>
 800b892:	5cf9      	ldrb	r1, [r7, r3]
 800b894:	1c55      	adds	r5, r2, #1
 800b896:	f011 0108 	ands.w	r1, r1, #8
 800b89a:	d019      	beq.n	800b8d0 <__ssvfiscanf_r+0x6c>
 800b89c:	6863      	ldr	r3, [r4, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	dd0f      	ble.n	800b8c2 <__ssvfiscanf_r+0x5e>
 800b8a2:	6823      	ldr	r3, [r4, #0]
 800b8a4:	781a      	ldrb	r2, [r3, #0]
 800b8a6:	5cba      	ldrb	r2, [r7, r2]
 800b8a8:	0712      	lsls	r2, r2, #28
 800b8aa:	d401      	bmi.n	800b8b0 <__ssvfiscanf_r+0x4c>
 800b8ac:	462a      	mov	r2, r5
 800b8ae:	e7ec      	b.n	800b88a <__ssvfiscanf_r+0x26>
 800b8b0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	3201      	adds	r2, #1
 800b8b6:	9245      	str	r2, [sp, #276]	@ 0x114
 800b8b8:	6862      	ldr	r2, [r4, #4]
 800b8ba:	6023      	str	r3, [r4, #0]
 800b8bc:	3a01      	subs	r2, #1
 800b8be:	6062      	str	r2, [r4, #4]
 800b8c0:	e7ec      	b.n	800b89c <__ssvfiscanf_r+0x38>
 800b8c2:	4621      	mov	r1, r4
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b8c8:	4798      	blx	r3
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d0e9      	beq.n	800b8a2 <__ssvfiscanf_r+0x3e>
 800b8ce:	e7ed      	b.n	800b8ac <__ssvfiscanf_r+0x48>
 800b8d0:	2b25      	cmp	r3, #37	@ 0x25
 800b8d2:	d012      	beq.n	800b8fa <__ssvfiscanf_r+0x96>
 800b8d4:	4699      	mov	r9, r3
 800b8d6:	6863      	ldr	r3, [r4, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f340 8094 	ble.w	800ba06 <__ssvfiscanf_r+0x1a2>
 800b8de:	6822      	ldr	r2, [r4, #0]
 800b8e0:	7813      	ldrb	r3, [r2, #0]
 800b8e2:	454b      	cmp	r3, r9
 800b8e4:	f040 812e 	bne.w	800bb44 <__ssvfiscanf_r+0x2e0>
 800b8e8:	6863      	ldr	r3, [r4, #4]
 800b8ea:	3201      	adds	r2, #1
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	6063      	str	r3, [r4, #4]
 800b8f0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b8f2:	6022      	str	r2, [r4, #0]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	9345      	str	r3, [sp, #276]	@ 0x114
 800b8f8:	e7d8      	b.n	800b8ac <__ssvfiscanf_r+0x48>
 800b8fa:	9141      	str	r1, [sp, #260]	@ 0x104
 800b8fc:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b8fe:	7853      	ldrb	r3, [r2, #1]
 800b900:	2b2a      	cmp	r3, #42	@ 0x2a
 800b902:	bf04      	itt	eq
 800b904:	2310      	moveq	r3, #16
 800b906:	1c95      	addeq	r5, r2, #2
 800b908:	f04f 020a 	mov.w	r2, #10
 800b90c:	bf08      	it	eq
 800b90e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b910:	46a9      	mov	r9, r5
 800b912:	f819 1b01 	ldrb.w	r1, [r9], #1
 800b916:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b91a:	2b09      	cmp	r3, #9
 800b91c:	d91e      	bls.n	800b95c <__ssvfiscanf_r+0xf8>
 800b91e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800bb2c <__ssvfiscanf_r+0x2c8>
 800b922:	2203      	movs	r2, #3
 800b924:	4650      	mov	r0, sl
 800b926:	f7fd fb5a 	bl	8008fde <memchr>
 800b92a:	b138      	cbz	r0, 800b93c <__ssvfiscanf_r+0xd8>
 800b92c:	2301      	movs	r3, #1
 800b92e:	464d      	mov	r5, r9
 800b930:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b932:	eba0 000a 	sub.w	r0, r0, sl
 800b936:	4083      	lsls	r3, r0
 800b938:	4313      	orrs	r3, r2
 800b93a:	9341      	str	r3, [sp, #260]	@ 0x104
 800b93c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b940:	2b78      	cmp	r3, #120	@ 0x78
 800b942:	d806      	bhi.n	800b952 <__ssvfiscanf_r+0xee>
 800b944:	2b57      	cmp	r3, #87	@ 0x57
 800b946:	d810      	bhi.n	800b96a <__ssvfiscanf_r+0x106>
 800b948:	2b25      	cmp	r3, #37	@ 0x25
 800b94a:	d0c3      	beq.n	800b8d4 <__ssvfiscanf_r+0x70>
 800b94c:	d856      	bhi.n	800b9fc <__ssvfiscanf_r+0x198>
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d064      	beq.n	800ba1c <__ssvfiscanf_r+0x1b8>
 800b952:	2303      	movs	r3, #3
 800b954:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b956:	230a      	movs	r3, #10
 800b958:	9342      	str	r3, [sp, #264]	@ 0x108
 800b95a:	e077      	b.n	800ba4c <__ssvfiscanf_r+0x1e8>
 800b95c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b95e:	464d      	mov	r5, r9
 800b960:	fb02 1103 	mla	r1, r2, r3, r1
 800b964:	3930      	subs	r1, #48	@ 0x30
 800b966:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b968:	e7d2      	b.n	800b910 <__ssvfiscanf_r+0xac>
 800b96a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b96e:	2a20      	cmp	r2, #32
 800b970:	d8ef      	bhi.n	800b952 <__ssvfiscanf_r+0xee>
 800b972:	a101      	add	r1, pc, #4	@ (adr r1, 800b978 <__ssvfiscanf_r+0x114>)
 800b974:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b978:	0800ba2b 	.word	0x0800ba2b
 800b97c:	0800b953 	.word	0x0800b953
 800b980:	0800b953 	.word	0x0800b953
 800b984:	0800ba85 	.word	0x0800ba85
 800b988:	0800b953 	.word	0x0800b953
 800b98c:	0800b953 	.word	0x0800b953
 800b990:	0800b953 	.word	0x0800b953
 800b994:	0800b953 	.word	0x0800b953
 800b998:	0800b953 	.word	0x0800b953
 800b99c:	0800b953 	.word	0x0800b953
 800b9a0:	0800b953 	.word	0x0800b953
 800b9a4:	0800ba9b 	.word	0x0800ba9b
 800b9a8:	0800ba81 	.word	0x0800ba81
 800b9ac:	0800ba03 	.word	0x0800ba03
 800b9b0:	0800ba03 	.word	0x0800ba03
 800b9b4:	0800ba03 	.word	0x0800ba03
 800b9b8:	0800b953 	.word	0x0800b953
 800b9bc:	0800ba3d 	.word	0x0800ba3d
 800b9c0:	0800b953 	.word	0x0800b953
 800b9c4:	0800b953 	.word	0x0800b953
 800b9c8:	0800b953 	.word	0x0800b953
 800b9cc:	0800b953 	.word	0x0800b953
 800b9d0:	0800baab 	.word	0x0800baab
 800b9d4:	0800ba45 	.word	0x0800ba45
 800b9d8:	0800ba23 	.word	0x0800ba23
 800b9dc:	0800b953 	.word	0x0800b953
 800b9e0:	0800b953 	.word	0x0800b953
 800b9e4:	0800baa7 	.word	0x0800baa7
 800b9e8:	0800b953 	.word	0x0800b953
 800b9ec:	0800ba81 	.word	0x0800ba81
 800b9f0:	0800b953 	.word	0x0800b953
 800b9f4:	0800b953 	.word	0x0800b953
 800b9f8:	0800ba2b 	.word	0x0800ba2b
 800b9fc:	3b45      	subs	r3, #69	@ 0x45
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d8a7      	bhi.n	800b952 <__ssvfiscanf_r+0xee>
 800ba02:	2305      	movs	r3, #5
 800ba04:	e021      	b.n	800ba4a <__ssvfiscanf_r+0x1e6>
 800ba06:	4621      	mov	r1, r4
 800ba08:	4630      	mov	r0, r6
 800ba0a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ba0c:	4798      	blx	r3
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	f43f af65 	beq.w	800b8de <__ssvfiscanf_r+0x7a>
 800ba14:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ba16:	2800      	cmp	r0, #0
 800ba18:	f040 808c 	bne.w	800bb34 <__ssvfiscanf_r+0x2d0>
 800ba1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba20:	e08c      	b.n	800bb3c <__ssvfiscanf_r+0x2d8>
 800ba22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ba24:	f042 0220 	orr.w	r2, r2, #32
 800ba28:	9241      	str	r2, [sp, #260]	@ 0x104
 800ba2a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ba2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba30:	9241      	str	r2, [sp, #260]	@ 0x104
 800ba32:	2210      	movs	r2, #16
 800ba34:	2b6e      	cmp	r3, #110	@ 0x6e
 800ba36:	9242      	str	r2, [sp, #264]	@ 0x108
 800ba38:	d902      	bls.n	800ba40 <__ssvfiscanf_r+0x1dc>
 800ba3a:	e005      	b.n	800ba48 <__ssvfiscanf_r+0x1e4>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	9342      	str	r3, [sp, #264]	@ 0x108
 800ba40:	2303      	movs	r3, #3
 800ba42:	e002      	b.n	800ba4a <__ssvfiscanf_r+0x1e6>
 800ba44:	2308      	movs	r3, #8
 800ba46:	9342      	str	r3, [sp, #264]	@ 0x108
 800ba48:	2304      	movs	r3, #4
 800ba4a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ba4c:	6863      	ldr	r3, [r4, #4]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	dd39      	ble.n	800bac6 <__ssvfiscanf_r+0x262>
 800ba52:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ba54:	0659      	lsls	r1, r3, #25
 800ba56:	d404      	bmi.n	800ba62 <__ssvfiscanf_r+0x1fe>
 800ba58:	6823      	ldr	r3, [r4, #0]
 800ba5a:	781a      	ldrb	r2, [r3, #0]
 800ba5c:	5cba      	ldrb	r2, [r7, r2]
 800ba5e:	0712      	lsls	r2, r2, #28
 800ba60:	d438      	bmi.n	800bad4 <__ssvfiscanf_r+0x270>
 800ba62:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	dc47      	bgt.n	800baf8 <__ssvfiscanf_r+0x294>
 800ba68:	466b      	mov	r3, sp
 800ba6a:	4622      	mov	r2, r4
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	a941      	add	r1, sp, #260	@ 0x104
 800ba70:	f000 f9aa 	bl	800bdc8 <_scanf_chars>
 800ba74:	2801      	cmp	r0, #1
 800ba76:	d065      	beq.n	800bb44 <__ssvfiscanf_r+0x2e0>
 800ba78:	2802      	cmp	r0, #2
 800ba7a:	f47f af17 	bne.w	800b8ac <__ssvfiscanf_r+0x48>
 800ba7e:	e7c9      	b.n	800ba14 <__ssvfiscanf_r+0x1b0>
 800ba80:	220a      	movs	r2, #10
 800ba82:	e7d7      	b.n	800ba34 <__ssvfiscanf_r+0x1d0>
 800ba84:	4629      	mov	r1, r5
 800ba86:	4640      	mov	r0, r8
 800ba88:	f000 fbf3 	bl	800c272 <__sccl>
 800ba8c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ba8e:	4605      	mov	r5, r0
 800ba90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba94:	9341      	str	r3, [sp, #260]	@ 0x104
 800ba96:	2301      	movs	r3, #1
 800ba98:	e7d7      	b.n	800ba4a <__ssvfiscanf_r+0x1e6>
 800ba9a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ba9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baa0:	9341      	str	r3, [sp, #260]	@ 0x104
 800baa2:	2300      	movs	r3, #0
 800baa4:	e7d1      	b.n	800ba4a <__ssvfiscanf_r+0x1e6>
 800baa6:	2302      	movs	r3, #2
 800baa8:	e7cf      	b.n	800ba4a <__ssvfiscanf_r+0x1e6>
 800baaa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800baac:	06c3      	lsls	r3, r0, #27
 800baae:	f53f aefd 	bmi.w	800b8ac <__ssvfiscanf_r+0x48>
 800bab2:	9b00      	ldr	r3, [sp, #0]
 800bab4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bab6:	1d19      	adds	r1, r3, #4
 800bab8:	9100      	str	r1, [sp, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	07c0      	lsls	r0, r0, #31
 800babe:	bf4c      	ite	mi
 800bac0:	801a      	strhmi	r2, [r3, #0]
 800bac2:	601a      	strpl	r2, [r3, #0]
 800bac4:	e6f2      	b.n	800b8ac <__ssvfiscanf_r+0x48>
 800bac6:	4621      	mov	r1, r4
 800bac8:	4630      	mov	r0, r6
 800baca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bacc:	4798      	blx	r3
 800bace:	2800      	cmp	r0, #0
 800bad0:	d0bf      	beq.n	800ba52 <__ssvfiscanf_r+0x1ee>
 800bad2:	e79f      	b.n	800ba14 <__ssvfiscanf_r+0x1b0>
 800bad4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bad6:	3201      	adds	r2, #1
 800bad8:	9245      	str	r2, [sp, #276]	@ 0x114
 800bada:	6862      	ldr	r2, [r4, #4]
 800badc:	3a01      	subs	r2, #1
 800bade:	2a00      	cmp	r2, #0
 800bae0:	6062      	str	r2, [r4, #4]
 800bae2:	dd02      	ble.n	800baea <__ssvfiscanf_r+0x286>
 800bae4:	3301      	adds	r3, #1
 800bae6:	6023      	str	r3, [r4, #0]
 800bae8:	e7b6      	b.n	800ba58 <__ssvfiscanf_r+0x1f4>
 800baea:	4621      	mov	r1, r4
 800baec:	4630      	mov	r0, r6
 800baee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800baf0:	4798      	blx	r3
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d0b0      	beq.n	800ba58 <__ssvfiscanf_r+0x1f4>
 800baf6:	e78d      	b.n	800ba14 <__ssvfiscanf_r+0x1b0>
 800baf8:	2b04      	cmp	r3, #4
 800bafa:	dc06      	bgt.n	800bb0a <__ssvfiscanf_r+0x2a6>
 800bafc:	466b      	mov	r3, sp
 800bafe:	4622      	mov	r2, r4
 800bb00:	4630      	mov	r0, r6
 800bb02:	a941      	add	r1, sp, #260	@ 0x104
 800bb04:	f000 f9ba 	bl	800be7c <_scanf_i>
 800bb08:	e7b4      	b.n	800ba74 <__ssvfiscanf_r+0x210>
 800bb0a:	4b09      	ldr	r3, [pc, #36]	@ (800bb30 <__ssvfiscanf_r+0x2cc>)
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f43f aecd 	beq.w	800b8ac <__ssvfiscanf_r+0x48>
 800bb12:	466b      	mov	r3, sp
 800bb14:	4622      	mov	r2, r4
 800bb16:	4630      	mov	r0, r6
 800bb18:	a941      	add	r1, sp, #260	@ 0x104
 800bb1a:	f7fc fd69 	bl	80085f0 <_scanf_float>
 800bb1e:	e7a9      	b.n	800ba74 <__ssvfiscanf_r+0x210>
 800bb20:	0800b7b5 	.word	0x0800b7b5
 800bb24:	0800b82b 	.word	0x0800b82b
 800bb28:	0800e151 	.word	0x0800e151
 800bb2c:	0800e257 	.word	0x0800e257
 800bb30:	080085f1 	.word	0x080085f1
 800bb34:	89a3      	ldrh	r3, [r4, #12]
 800bb36:	065b      	lsls	r3, r3, #25
 800bb38:	f53f af70 	bmi.w	800ba1c <__ssvfiscanf_r+0x1b8>
 800bb3c:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800bb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb44:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bb46:	e7f9      	b.n	800bb3c <__ssvfiscanf_r+0x2d8>

0800bb48 <__sfputc_r>:
 800bb48:	6893      	ldr	r3, [r2, #8]
 800bb4a:	b410      	push	{r4}
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	6093      	str	r3, [r2, #8]
 800bb52:	da07      	bge.n	800bb64 <__sfputc_r+0x1c>
 800bb54:	6994      	ldr	r4, [r2, #24]
 800bb56:	42a3      	cmp	r3, r4
 800bb58:	db01      	blt.n	800bb5e <__sfputc_r+0x16>
 800bb5a:	290a      	cmp	r1, #10
 800bb5c:	d102      	bne.n	800bb64 <__sfputc_r+0x1c>
 800bb5e:	bc10      	pop	{r4}
 800bb60:	f7fd b917 	b.w	8008d92 <__swbuf_r>
 800bb64:	6813      	ldr	r3, [r2, #0]
 800bb66:	1c58      	adds	r0, r3, #1
 800bb68:	6010      	str	r0, [r2, #0]
 800bb6a:	7019      	strb	r1, [r3, #0]
 800bb6c:	4608      	mov	r0, r1
 800bb6e:	bc10      	pop	{r4}
 800bb70:	4770      	bx	lr

0800bb72 <__sfputs_r>:
 800bb72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb74:	4606      	mov	r6, r0
 800bb76:	460f      	mov	r7, r1
 800bb78:	4614      	mov	r4, r2
 800bb7a:	18d5      	adds	r5, r2, r3
 800bb7c:	42ac      	cmp	r4, r5
 800bb7e:	d101      	bne.n	800bb84 <__sfputs_r+0x12>
 800bb80:	2000      	movs	r0, #0
 800bb82:	e007      	b.n	800bb94 <__sfputs_r+0x22>
 800bb84:	463a      	mov	r2, r7
 800bb86:	4630      	mov	r0, r6
 800bb88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb8c:	f7ff ffdc 	bl	800bb48 <__sfputc_r>
 800bb90:	1c43      	adds	r3, r0, #1
 800bb92:	d1f3      	bne.n	800bb7c <__sfputs_r+0xa>
 800bb94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb98 <_vfiprintf_r>:
 800bb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9c:	460d      	mov	r5, r1
 800bb9e:	4614      	mov	r4, r2
 800bba0:	4698      	mov	r8, r3
 800bba2:	4606      	mov	r6, r0
 800bba4:	b09d      	sub	sp, #116	@ 0x74
 800bba6:	b118      	cbz	r0, 800bbb0 <_vfiprintf_r+0x18>
 800bba8:	6a03      	ldr	r3, [r0, #32]
 800bbaa:	b90b      	cbnz	r3, 800bbb0 <_vfiprintf_r+0x18>
 800bbac:	f7fc ffbc 	bl	8008b28 <__sinit>
 800bbb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbb2:	07d9      	lsls	r1, r3, #31
 800bbb4:	d405      	bmi.n	800bbc2 <_vfiprintf_r+0x2a>
 800bbb6:	89ab      	ldrh	r3, [r5, #12]
 800bbb8:	059a      	lsls	r2, r3, #22
 800bbba:	d402      	bmi.n	800bbc2 <_vfiprintf_r+0x2a>
 800bbbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbbe:	f7fd fa0c 	bl	8008fda <__retarget_lock_acquire_recursive>
 800bbc2:	89ab      	ldrh	r3, [r5, #12]
 800bbc4:	071b      	lsls	r3, r3, #28
 800bbc6:	d501      	bpl.n	800bbcc <_vfiprintf_r+0x34>
 800bbc8:	692b      	ldr	r3, [r5, #16]
 800bbca:	b99b      	cbnz	r3, 800bbf4 <_vfiprintf_r+0x5c>
 800bbcc:	4629      	mov	r1, r5
 800bbce:	4630      	mov	r0, r6
 800bbd0:	f7fd f91e 	bl	8008e10 <__swsetup_r>
 800bbd4:	b170      	cbz	r0, 800bbf4 <_vfiprintf_r+0x5c>
 800bbd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbd8:	07dc      	lsls	r4, r3, #31
 800bbda:	d504      	bpl.n	800bbe6 <_vfiprintf_r+0x4e>
 800bbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe0:	b01d      	add	sp, #116	@ 0x74
 800bbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe6:	89ab      	ldrh	r3, [r5, #12]
 800bbe8:	0598      	lsls	r0, r3, #22
 800bbea:	d4f7      	bmi.n	800bbdc <_vfiprintf_r+0x44>
 800bbec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbee:	f7fd f9f5 	bl	8008fdc <__retarget_lock_release_recursive>
 800bbf2:	e7f3      	b.n	800bbdc <_vfiprintf_r+0x44>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbf8:	2320      	movs	r3, #32
 800bbfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbfe:	2330      	movs	r3, #48	@ 0x30
 800bc00:	f04f 0901 	mov.w	r9, #1
 800bc04:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc08:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bdb4 <_vfiprintf_r+0x21c>
 800bc0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc10:	4623      	mov	r3, r4
 800bc12:	469a      	mov	sl, r3
 800bc14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc18:	b10a      	cbz	r2, 800bc1e <_vfiprintf_r+0x86>
 800bc1a:	2a25      	cmp	r2, #37	@ 0x25
 800bc1c:	d1f9      	bne.n	800bc12 <_vfiprintf_r+0x7a>
 800bc1e:	ebba 0b04 	subs.w	fp, sl, r4
 800bc22:	d00b      	beq.n	800bc3c <_vfiprintf_r+0xa4>
 800bc24:	465b      	mov	r3, fp
 800bc26:	4622      	mov	r2, r4
 800bc28:	4629      	mov	r1, r5
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	f7ff ffa1 	bl	800bb72 <__sfputs_r>
 800bc30:	3001      	adds	r0, #1
 800bc32:	f000 80a7 	beq.w	800bd84 <_vfiprintf_r+0x1ec>
 800bc36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc38:	445a      	add	r2, fp
 800bc3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f000 809f 	beq.w	800bd84 <_vfiprintf_r+0x1ec>
 800bc46:	2300      	movs	r3, #0
 800bc48:	f04f 32ff 	mov.w	r2, #4294967295
 800bc4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc50:	f10a 0a01 	add.w	sl, sl, #1
 800bc54:	9304      	str	r3, [sp, #16]
 800bc56:	9307      	str	r3, [sp, #28]
 800bc58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc5e:	4654      	mov	r4, sl
 800bc60:	2205      	movs	r2, #5
 800bc62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc66:	4853      	ldr	r0, [pc, #332]	@ (800bdb4 <_vfiprintf_r+0x21c>)
 800bc68:	f7fd f9b9 	bl	8008fde <memchr>
 800bc6c:	9a04      	ldr	r2, [sp, #16]
 800bc6e:	b9d8      	cbnz	r0, 800bca8 <_vfiprintf_r+0x110>
 800bc70:	06d1      	lsls	r1, r2, #27
 800bc72:	bf44      	itt	mi
 800bc74:	2320      	movmi	r3, #32
 800bc76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc7a:	0713      	lsls	r3, r2, #28
 800bc7c:	bf44      	itt	mi
 800bc7e:	232b      	movmi	r3, #43	@ 0x2b
 800bc80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc84:	f89a 3000 	ldrb.w	r3, [sl]
 800bc88:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc8a:	d015      	beq.n	800bcb8 <_vfiprintf_r+0x120>
 800bc8c:	4654      	mov	r4, sl
 800bc8e:	2000      	movs	r0, #0
 800bc90:	f04f 0c0a 	mov.w	ip, #10
 800bc94:	9a07      	ldr	r2, [sp, #28]
 800bc96:	4621      	mov	r1, r4
 800bc98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc9c:	3b30      	subs	r3, #48	@ 0x30
 800bc9e:	2b09      	cmp	r3, #9
 800bca0:	d94b      	bls.n	800bd3a <_vfiprintf_r+0x1a2>
 800bca2:	b1b0      	cbz	r0, 800bcd2 <_vfiprintf_r+0x13a>
 800bca4:	9207      	str	r2, [sp, #28]
 800bca6:	e014      	b.n	800bcd2 <_vfiprintf_r+0x13a>
 800bca8:	eba0 0308 	sub.w	r3, r0, r8
 800bcac:	fa09 f303 	lsl.w	r3, r9, r3
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	46a2      	mov	sl, r4
 800bcb4:	9304      	str	r3, [sp, #16]
 800bcb6:	e7d2      	b.n	800bc5e <_vfiprintf_r+0xc6>
 800bcb8:	9b03      	ldr	r3, [sp, #12]
 800bcba:	1d19      	adds	r1, r3, #4
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	9103      	str	r1, [sp, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	bfbb      	ittet	lt
 800bcc4:	425b      	neglt	r3, r3
 800bcc6:	f042 0202 	orrlt.w	r2, r2, #2
 800bcca:	9307      	strge	r3, [sp, #28]
 800bccc:	9307      	strlt	r3, [sp, #28]
 800bcce:	bfb8      	it	lt
 800bcd0:	9204      	strlt	r2, [sp, #16]
 800bcd2:	7823      	ldrb	r3, [r4, #0]
 800bcd4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcd6:	d10a      	bne.n	800bcee <_vfiprintf_r+0x156>
 800bcd8:	7863      	ldrb	r3, [r4, #1]
 800bcda:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcdc:	d132      	bne.n	800bd44 <_vfiprintf_r+0x1ac>
 800bcde:	9b03      	ldr	r3, [sp, #12]
 800bce0:	3402      	adds	r4, #2
 800bce2:	1d1a      	adds	r2, r3, #4
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	9203      	str	r2, [sp, #12]
 800bce8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcec:	9305      	str	r3, [sp, #20]
 800bcee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bdb8 <_vfiprintf_r+0x220>
 800bcf2:	2203      	movs	r2, #3
 800bcf4:	4650      	mov	r0, sl
 800bcf6:	7821      	ldrb	r1, [r4, #0]
 800bcf8:	f7fd f971 	bl	8008fde <memchr>
 800bcfc:	b138      	cbz	r0, 800bd0e <_vfiprintf_r+0x176>
 800bcfe:	2240      	movs	r2, #64	@ 0x40
 800bd00:	9b04      	ldr	r3, [sp, #16]
 800bd02:	eba0 000a 	sub.w	r0, r0, sl
 800bd06:	4082      	lsls	r2, r0
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	3401      	adds	r4, #1
 800bd0c:	9304      	str	r3, [sp, #16]
 800bd0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd12:	2206      	movs	r2, #6
 800bd14:	4829      	ldr	r0, [pc, #164]	@ (800bdbc <_vfiprintf_r+0x224>)
 800bd16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd1a:	f7fd f960 	bl	8008fde <memchr>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	d03f      	beq.n	800bda2 <_vfiprintf_r+0x20a>
 800bd22:	4b27      	ldr	r3, [pc, #156]	@ (800bdc0 <_vfiprintf_r+0x228>)
 800bd24:	bb1b      	cbnz	r3, 800bd6e <_vfiprintf_r+0x1d6>
 800bd26:	9b03      	ldr	r3, [sp, #12]
 800bd28:	3307      	adds	r3, #7
 800bd2a:	f023 0307 	bic.w	r3, r3, #7
 800bd2e:	3308      	adds	r3, #8
 800bd30:	9303      	str	r3, [sp, #12]
 800bd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd34:	443b      	add	r3, r7
 800bd36:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd38:	e76a      	b.n	800bc10 <_vfiprintf_r+0x78>
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	2001      	movs	r0, #1
 800bd3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd42:	e7a8      	b.n	800bc96 <_vfiprintf_r+0xfe>
 800bd44:	2300      	movs	r3, #0
 800bd46:	f04f 0c0a 	mov.w	ip, #10
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	3401      	adds	r4, #1
 800bd4e:	9305      	str	r3, [sp, #20]
 800bd50:	4620      	mov	r0, r4
 800bd52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd56:	3a30      	subs	r2, #48	@ 0x30
 800bd58:	2a09      	cmp	r2, #9
 800bd5a:	d903      	bls.n	800bd64 <_vfiprintf_r+0x1cc>
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d0c6      	beq.n	800bcee <_vfiprintf_r+0x156>
 800bd60:	9105      	str	r1, [sp, #20]
 800bd62:	e7c4      	b.n	800bcee <_vfiprintf_r+0x156>
 800bd64:	4604      	mov	r4, r0
 800bd66:	2301      	movs	r3, #1
 800bd68:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd6c:	e7f0      	b.n	800bd50 <_vfiprintf_r+0x1b8>
 800bd6e:	ab03      	add	r3, sp, #12
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	462a      	mov	r2, r5
 800bd74:	4630      	mov	r0, r6
 800bd76:	4b13      	ldr	r3, [pc, #76]	@ (800bdc4 <_vfiprintf_r+0x22c>)
 800bd78:	a904      	add	r1, sp, #16
 800bd7a:	f7fc f87b 	bl	8007e74 <_printf_float>
 800bd7e:	4607      	mov	r7, r0
 800bd80:	1c78      	adds	r0, r7, #1
 800bd82:	d1d6      	bne.n	800bd32 <_vfiprintf_r+0x19a>
 800bd84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd86:	07d9      	lsls	r1, r3, #31
 800bd88:	d405      	bmi.n	800bd96 <_vfiprintf_r+0x1fe>
 800bd8a:	89ab      	ldrh	r3, [r5, #12]
 800bd8c:	059a      	lsls	r2, r3, #22
 800bd8e:	d402      	bmi.n	800bd96 <_vfiprintf_r+0x1fe>
 800bd90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd92:	f7fd f923 	bl	8008fdc <__retarget_lock_release_recursive>
 800bd96:	89ab      	ldrh	r3, [r5, #12]
 800bd98:	065b      	lsls	r3, r3, #25
 800bd9a:	f53f af1f 	bmi.w	800bbdc <_vfiprintf_r+0x44>
 800bd9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bda0:	e71e      	b.n	800bbe0 <_vfiprintf_r+0x48>
 800bda2:	ab03      	add	r3, sp, #12
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	462a      	mov	r2, r5
 800bda8:	4630      	mov	r0, r6
 800bdaa:	4b06      	ldr	r3, [pc, #24]	@ (800bdc4 <_vfiprintf_r+0x22c>)
 800bdac:	a904      	add	r1, sp, #16
 800bdae:	f7fc faff 	bl	80083b0 <_printf_i>
 800bdb2:	e7e4      	b.n	800bd7e <_vfiprintf_r+0x1e6>
 800bdb4:	0800e251 	.word	0x0800e251
 800bdb8:	0800e257 	.word	0x0800e257
 800bdbc:	0800e25b 	.word	0x0800e25b
 800bdc0:	08007e75 	.word	0x08007e75
 800bdc4:	0800bb73 	.word	0x0800bb73

0800bdc8 <_scanf_chars>:
 800bdc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdcc:	4615      	mov	r5, r2
 800bdce:	688a      	ldr	r2, [r1, #8]
 800bdd0:	4680      	mov	r8, r0
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	b932      	cbnz	r2, 800bde4 <_scanf_chars+0x1c>
 800bdd6:	698a      	ldr	r2, [r1, #24]
 800bdd8:	2a00      	cmp	r2, #0
 800bdda:	bf14      	ite	ne
 800bddc:	f04f 32ff 	movne.w	r2, #4294967295
 800bde0:	2201      	moveq	r2, #1
 800bde2:	608a      	str	r2, [r1, #8]
 800bde4:	2700      	movs	r7, #0
 800bde6:	6822      	ldr	r2, [r4, #0]
 800bde8:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800be78 <_scanf_chars+0xb0>
 800bdec:	06d1      	lsls	r1, r2, #27
 800bdee:	bf5f      	itttt	pl
 800bdf0:	681a      	ldrpl	r2, [r3, #0]
 800bdf2:	1d11      	addpl	r1, r2, #4
 800bdf4:	6019      	strpl	r1, [r3, #0]
 800bdf6:	6816      	ldrpl	r6, [r2, #0]
 800bdf8:	69a0      	ldr	r0, [r4, #24]
 800bdfa:	b188      	cbz	r0, 800be20 <_scanf_chars+0x58>
 800bdfc:	2801      	cmp	r0, #1
 800bdfe:	d107      	bne.n	800be10 <_scanf_chars+0x48>
 800be00:	682b      	ldr	r3, [r5, #0]
 800be02:	781a      	ldrb	r2, [r3, #0]
 800be04:	6963      	ldr	r3, [r4, #20]
 800be06:	5c9b      	ldrb	r3, [r3, r2]
 800be08:	b953      	cbnz	r3, 800be20 <_scanf_chars+0x58>
 800be0a:	2f00      	cmp	r7, #0
 800be0c:	d031      	beq.n	800be72 <_scanf_chars+0xaa>
 800be0e:	e022      	b.n	800be56 <_scanf_chars+0x8e>
 800be10:	2802      	cmp	r0, #2
 800be12:	d120      	bne.n	800be56 <_scanf_chars+0x8e>
 800be14:	682b      	ldr	r3, [r5, #0]
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	f819 3003 	ldrb.w	r3, [r9, r3]
 800be1c:	071b      	lsls	r3, r3, #28
 800be1e:	d41a      	bmi.n	800be56 <_scanf_chars+0x8e>
 800be20:	6823      	ldr	r3, [r4, #0]
 800be22:	3701      	adds	r7, #1
 800be24:	06da      	lsls	r2, r3, #27
 800be26:	bf5e      	ittt	pl
 800be28:	682b      	ldrpl	r3, [r5, #0]
 800be2a:	781b      	ldrbpl	r3, [r3, #0]
 800be2c:	f806 3b01 	strbpl.w	r3, [r6], #1
 800be30:	682a      	ldr	r2, [r5, #0]
 800be32:	686b      	ldr	r3, [r5, #4]
 800be34:	3201      	adds	r2, #1
 800be36:	602a      	str	r2, [r5, #0]
 800be38:	68a2      	ldr	r2, [r4, #8]
 800be3a:	3b01      	subs	r3, #1
 800be3c:	3a01      	subs	r2, #1
 800be3e:	606b      	str	r3, [r5, #4]
 800be40:	60a2      	str	r2, [r4, #8]
 800be42:	b142      	cbz	r2, 800be56 <_scanf_chars+0x8e>
 800be44:	2b00      	cmp	r3, #0
 800be46:	dcd7      	bgt.n	800bdf8 <_scanf_chars+0x30>
 800be48:	4629      	mov	r1, r5
 800be4a:	4640      	mov	r0, r8
 800be4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800be50:	4798      	blx	r3
 800be52:	2800      	cmp	r0, #0
 800be54:	d0d0      	beq.n	800bdf8 <_scanf_chars+0x30>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	f013 0310 	ands.w	r3, r3, #16
 800be5c:	d105      	bne.n	800be6a <_scanf_chars+0xa2>
 800be5e:	68e2      	ldr	r2, [r4, #12]
 800be60:	3201      	adds	r2, #1
 800be62:	60e2      	str	r2, [r4, #12]
 800be64:	69a2      	ldr	r2, [r4, #24]
 800be66:	b102      	cbz	r2, 800be6a <_scanf_chars+0xa2>
 800be68:	7033      	strb	r3, [r6, #0]
 800be6a:	2000      	movs	r0, #0
 800be6c:	6923      	ldr	r3, [r4, #16]
 800be6e:	443b      	add	r3, r7
 800be70:	6123      	str	r3, [r4, #16]
 800be72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be76:	bf00      	nop
 800be78:	0800e151 	.word	0x0800e151

0800be7c <_scanf_i>:
 800be7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be80:	460c      	mov	r4, r1
 800be82:	4698      	mov	r8, r3
 800be84:	4b72      	ldr	r3, [pc, #456]	@ (800c050 <_scanf_i+0x1d4>)
 800be86:	b087      	sub	sp, #28
 800be88:	4682      	mov	sl, r0
 800be8a:	4616      	mov	r6, r2
 800be8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be90:	ab03      	add	r3, sp, #12
 800be92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800be96:	4b6f      	ldr	r3, [pc, #444]	@ (800c054 <_scanf_i+0x1d8>)
 800be98:	69a1      	ldr	r1, [r4, #24]
 800be9a:	4a6f      	ldr	r2, [pc, #444]	@ (800c058 <_scanf_i+0x1dc>)
 800be9c:	4627      	mov	r7, r4
 800be9e:	2903      	cmp	r1, #3
 800bea0:	bf08      	it	eq
 800bea2:	461a      	moveq	r2, r3
 800bea4:	68a3      	ldr	r3, [r4, #8]
 800bea6:	9201      	str	r2, [sp, #4]
 800bea8:	1e5a      	subs	r2, r3, #1
 800beaa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800beae:	bf81      	itttt	hi
 800beb0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800beb4:	eb03 0905 	addhi.w	r9, r3, r5
 800beb8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bebc:	60a3      	strhi	r3, [r4, #8]
 800bebe:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bec2:	bf98      	it	ls
 800bec4:	f04f 0900 	movls.w	r9, #0
 800bec8:	463d      	mov	r5, r7
 800beca:	f04f 0b00 	mov.w	fp, #0
 800bece:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800bed2:	6023      	str	r3, [r4, #0]
 800bed4:	6831      	ldr	r1, [r6, #0]
 800bed6:	ab03      	add	r3, sp, #12
 800bed8:	2202      	movs	r2, #2
 800beda:	7809      	ldrb	r1, [r1, #0]
 800bedc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bee0:	f7fd f87d 	bl	8008fde <memchr>
 800bee4:	b328      	cbz	r0, 800bf32 <_scanf_i+0xb6>
 800bee6:	f1bb 0f01 	cmp.w	fp, #1
 800beea:	d159      	bne.n	800bfa0 <_scanf_i+0x124>
 800beec:	6862      	ldr	r2, [r4, #4]
 800beee:	b92a      	cbnz	r2, 800befc <_scanf_i+0x80>
 800bef0:	2108      	movs	r1, #8
 800bef2:	6822      	ldr	r2, [r4, #0]
 800bef4:	6061      	str	r1, [r4, #4]
 800bef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800befa:	6022      	str	r2, [r4, #0]
 800befc:	6822      	ldr	r2, [r4, #0]
 800befe:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800bf02:	6022      	str	r2, [r4, #0]
 800bf04:	68a2      	ldr	r2, [r4, #8]
 800bf06:	1e51      	subs	r1, r2, #1
 800bf08:	60a1      	str	r1, [r4, #8]
 800bf0a:	b192      	cbz	r2, 800bf32 <_scanf_i+0xb6>
 800bf0c:	6832      	ldr	r2, [r6, #0]
 800bf0e:	1c51      	adds	r1, r2, #1
 800bf10:	6031      	str	r1, [r6, #0]
 800bf12:	7812      	ldrb	r2, [r2, #0]
 800bf14:	f805 2b01 	strb.w	r2, [r5], #1
 800bf18:	6872      	ldr	r2, [r6, #4]
 800bf1a:	3a01      	subs	r2, #1
 800bf1c:	2a00      	cmp	r2, #0
 800bf1e:	6072      	str	r2, [r6, #4]
 800bf20:	dc07      	bgt.n	800bf32 <_scanf_i+0xb6>
 800bf22:	4631      	mov	r1, r6
 800bf24:	4650      	mov	r0, sl
 800bf26:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800bf2a:	4790      	blx	r2
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	f040 8085 	bne.w	800c03c <_scanf_i+0x1c0>
 800bf32:	f10b 0b01 	add.w	fp, fp, #1
 800bf36:	f1bb 0f03 	cmp.w	fp, #3
 800bf3a:	d1cb      	bne.n	800bed4 <_scanf_i+0x58>
 800bf3c:	6863      	ldr	r3, [r4, #4]
 800bf3e:	b90b      	cbnz	r3, 800bf44 <_scanf_i+0xc8>
 800bf40:	230a      	movs	r3, #10
 800bf42:	6063      	str	r3, [r4, #4]
 800bf44:	6863      	ldr	r3, [r4, #4]
 800bf46:	4945      	ldr	r1, [pc, #276]	@ (800c05c <_scanf_i+0x1e0>)
 800bf48:	6960      	ldr	r0, [r4, #20]
 800bf4a:	1ac9      	subs	r1, r1, r3
 800bf4c:	f000 f991 	bl	800c272 <__sccl>
 800bf50:	f04f 0b00 	mov.w	fp, #0
 800bf54:	68a3      	ldr	r3, [r4, #8]
 800bf56:	6822      	ldr	r2, [r4, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d03d      	beq.n	800bfd8 <_scanf_i+0x15c>
 800bf5c:	6831      	ldr	r1, [r6, #0]
 800bf5e:	6960      	ldr	r0, [r4, #20]
 800bf60:	f891 c000 	ldrb.w	ip, [r1]
 800bf64:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d035      	beq.n	800bfd8 <_scanf_i+0x15c>
 800bf6c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800bf70:	d124      	bne.n	800bfbc <_scanf_i+0x140>
 800bf72:	0510      	lsls	r0, r2, #20
 800bf74:	d522      	bpl.n	800bfbc <_scanf_i+0x140>
 800bf76:	f10b 0b01 	add.w	fp, fp, #1
 800bf7a:	f1b9 0f00 	cmp.w	r9, #0
 800bf7e:	d003      	beq.n	800bf88 <_scanf_i+0x10c>
 800bf80:	3301      	adds	r3, #1
 800bf82:	f109 39ff 	add.w	r9, r9, #4294967295
 800bf86:	60a3      	str	r3, [r4, #8]
 800bf88:	6873      	ldr	r3, [r6, #4]
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	6073      	str	r3, [r6, #4]
 800bf90:	dd1b      	ble.n	800bfca <_scanf_i+0x14e>
 800bf92:	6833      	ldr	r3, [r6, #0]
 800bf94:	3301      	adds	r3, #1
 800bf96:	6033      	str	r3, [r6, #0]
 800bf98:	68a3      	ldr	r3, [r4, #8]
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	60a3      	str	r3, [r4, #8]
 800bf9e:	e7d9      	b.n	800bf54 <_scanf_i+0xd8>
 800bfa0:	f1bb 0f02 	cmp.w	fp, #2
 800bfa4:	d1ae      	bne.n	800bf04 <_scanf_i+0x88>
 800bfa6:	6822      	ldr	r2, [r4, #0]
 800bfa8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800bfac:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800bfb0:	d1bf      	bne.n	800bf32 <_scanf_i+0xb6>
 800bfb2:	2110      	movs	r1, #16
 800bfb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bfb8:	6061      	str	r1, [r4, #4]
 800bfba:	e7a2      	b.n	800bf02 <_scanf_i+0x86>
 800bfbc:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800bfc0:	6022      	str	r2, [r4, #0]
 800bfc2:	780b      	ldrb	r3, [r1, #0]
 800bfc4:	f805 3b01 	strb.w	r3, [r5], #1
 800bfc8:	e7de      	b.n	800bf88 <_scanf_i+0x10c>
 800bfca:	4631      	mov	r1, r6
 800bfcc:	4650      	mov	r0, sl
 800bfce:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bfd2:	4798      	blx	r3
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d0df      	beq.n	800bf98 <_scanf_i+0x11c>
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	05d9      	lsls	r1, r3, #23
 800bfdc:	d50d      	bpl.n	800bffa <_scanf_i+0x17e>
 800bfde:	42bd      	cmp	r5, r7
 800bfe0:	d909      	bls.n	800bff6 <_scanf_i+0x17a>
 800bfe2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bfe6:	4632      	mov	r2, r6
 800bfe8:	4650      	mov	r0, sl
 800bfea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bfee:	f105 39ff 	add.w	r9, r5, #4294967295
 800bff2:	4798      	blx	r3
 800bff4:	464d      	mov	r5, r9
 800bff6:	42bd      	cmp	r5, r7
 800bff8:	d028      	beq.n	800c04c <_scanf_i+0x1d0>
 800bffa:	6822      	ldr	r2, [r4, #0]
 800bffc:	f012 0210 	ands.w	r2, r2, #16
 800c000:	d113      	bne.n	800c02a <_scanf_i+0x1ae>
 800c002:	702a      	strb	r2, [r5, #0]
 800c004:	4639      	mov	r1, r7
 800c006:	6863      	ldr	r3, [r4, #4]
 800c008:	4650      	mov	r0, sl
 800c00a:	9e01      	ldr	r6, [sp, #4]
 800c00c:	47b0      	blx	r6
 800c00e:	f8d8 3000 	ldr.w	r3, [r8]
 800c012:	6821      	ldr	r1, [r4, #0]
 800c014:	1d1a      	adds	r2, r3, #4
 800c016:	f8c8 2000 	str.w	r2, [r8]
 800c01a:	f011 0f20 	tst.w	r1, #32
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	d00f      	beq.n	800c042 <_scanf_i+0x1c6>
 800c022:	6018      	str	r0, [r3, #0]
 800c024:	68e3      	ldr	r3, [r4, #12]
 800c026:	3301      	adds	r3, #1
 800c028:	60e3      	str	r3, [r4, #12]
 800c02a:	2000      	movs	r0, #0
 800c02c:	6923      	ldr	r3, [r4, #16]
 800c02e:	1bed      	subs	r5, r5, r7
 800c030:	445d      	add	r5, fp
 800c032:	442b      	add	r3, r5
 800c034:	6123      	str	r3, [r4, #16]
 800c036:	b007      	add	sp, #28
 800c038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03c:	f04f 0b00 	mov.w	fp, #0
 800c040:	e7ca      	b.n	800bfd8 <_scanf_i+0x15c>
 800c042:	07ca      	lsls	r2, r1, #31
 800c044:	bf4c      	ite	mi
 800c046:	8018      	strhmi	r0, [r3, #0]
 800c048:	6018      	strpl	r0, [r3, #0]
 800c04a:	e7eb      	b.n	800c024 <_scanf_i+0x1a8>
 800c04c:	2001      	movs	r0, #1
 800c04e:	e7f2      	b.n	800c036 <_scanf_i+0x1ba>
 800c050:	0800dea8 	.word	0x0800dea8
 800c054:	0800b501 	.word	0x0800b501
 800c058:	0800cc2d 	.word	0x0800cc2d
 800c05c:	0800e272 	.word	0x0800e272

0800c060 <__sflush_r>:
 800c060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c066:	0716      	lsls	r6, r2, #28
 800c068:	4605      	mov	r5, r0
 800c06a:	460c      	mov	r4, r1
 800c06c:	d454      	bmi.n	800c118 <__sflush_r+0xb8>
 800c06e:	684b      	ldr	r3, [r1, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	dc02      	bgt.n	800c07a <__sflush_r+0x1a>
 800c074:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c076:	2b00      	cmp	r3, #0
 800c078:	dd48      	ble.n	800c10c <__sflush_r+0xac>
 800c07a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c07c:	2e00      	cmp	r6, #0
 800c07e:	d045      	beq.n	800c10c <__sflush_r+0xac>
 800c080:	2300      	movs	r3, #0
 800c082:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c086:	682f      	ldr	r7, [r5, #0]
 800c088:	6a21      	ldr	r1, [r4, #32]
 800c08a:	602b      	str	r3, [r5, #0]
 800c08c:	d030      	beq.n	800c0f0 <__sflush_r+0x90>
 800c08e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	0759      	lsls	r1, r3, #29
 800c094:	d505      	bpl.n	800c0a2 <__sflush_r+0x42>
 800c096:	6863      	ldr	r3, [r4, #4]
 800c098:	1ad2      	subs	r2, r2, r3
 800c09a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c09c:	b10b      	cbz	r3, 800c0a2 <__sflush_r+0x42>
 800c09e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0a0:	1ad2      	subs	r2, r2, r3
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0a8:	6a21      	ldr	r1, [r4, #32]
 800c0aa:	47b0      	blx	r6
 800c0ac:	1c43      	adds	r3, r0, #1
 800c0ae:	89a3      	ldrh	r3, [r4, #12]
 800c0b0:	d106      	bne.n	800c0c0 <__sflush_r+0x60>
 800c0b2:	6829      	ldr	r1, [r5, #0]
 800c0b4:	291d      	cmp	r1, #29
 800c0b6:	d82b      	bhi.n	800c110 <__sflush_r+0xb0>
 800c0b8:	4a28      	ldr	r2, [pc, #160]	@ (800c15c <__sflush_r+0xfc>)
 800c0ba:	410a      	asrs	r2, r1
 800c0bc:	07d6      	lsls	r6, r2, #31
 800c0be:	d427      	bmi.n	800c110 <__sflush_r+0xb0>
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	6062      	str	r2, [r4, #4]
 800c0c4:	6922      	ldr	r2, [r4, #16]
 800c0c6:	04d9      	lsls	r1, r3, #19
 800c0c8:	6022      	str	r2, [r4, #0]
 800c0ca:	d504      	bpl.n	800c0d6 <__sflush_r+0x76>
 800c0cc:	1c42      	adds	r2, r0, #1
 800c0ce:	d101      	bne.n	800c0d4 <__sflush_r+0x74>
 800c0d0:	682b      	ldr	r3, [r5, #0]
 800c0d2:	b903      	cbnz	r3, 800c0d6 <__sflush_r+0x76>
 800c0d4:	6560      	str	r0, [r4, #84]	@ 0x54
 800c0d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0d8:	602f      	str	r7, [r5, #0]
 800c0da:	b1b9      	cbz	r1, 800c10c <__sflush_r+0xac>
 800c0dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0e0:	4299      	cmp	r1, r3
 800c0e2:	d002      	beq.n	800c0ea <__sflush_r+0x8a>
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f7fd fdeb 	bl	8009cc0 <_free_r>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0ee:	e00d      	b.n	800c10c <__sflush_r+0xac>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	47b0      	blx	r6
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	1c50      	adds	r0, r2, #1
 800c0fa:	d1c9      	bne.n	800c090 <__sflush_r+0x30>
 800c0fc:	682b      	ldr	r3, [r5, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d0c6      	beq.n	800c090 <__sflush_r+0x30>
 800c102:	2b1d      	cmp	r3, #29
 800c104:	d001      	beq.n	800c10a <__sflush_r+0xaa>
 800c106:	2b16      	cmp	r3, #22
 800c108:	d11d      	bne.n	800c146 <__sflush_r+0xe6>
 800c10a:	602f      	str	r7, [r5, #0]
 800c10c:	2000      	movs	r0, #0
 800c10e:	e021      	b.n	800c154 <__sflush_r+0xf4>
 800c110:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c114:	b21b      	sxth	r3, r3
 800c116:	e01a      	b.n	800c14e <__sflush_r+0xee>
 800c118:	690f      	ldr	r7, [r1, #16]
 800c11a:	2f00      	cmp	r7, #0
 800c11c:	d0f6      	beq.n	800c10c <__sflush_r+0xac>
 800c11e:	0793      	lsls	r3, r2, #30
 800c120:	bf18      	it	ne
 800c122:	2300      	movne	r3, #0
 800c124:	680e      	ldr	r6, [r1, #0]
 800c126:	bf08      	it	eq
 800c128:	694b      	ldreq	r3, [r1, #20]
 800c12a:	1bf6      	subs	r6, r6, r7
 800c12c:	600f      	str	r7, [r1, #0]
 800c12e:	608b      	str	r3, [r1, #8]
 800c130:	2e00      	cmp	r6, #0
 800c132:	ddeb      	ble.n	800c10c <__sflush_r+0xac>
 800c134:	4633      	mov	r3, r6
 800c136:	463a      	mov	r2, r7
 800c138:	4628      	mov	r0, r5
 800c13a:	6a21      	ldr	r1, [r4, #32]
 800c13c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c140:	47e0      	blx	ip
 800c142:	2800      	cmp	r0, #0
 800c144:	dc07      	bgt.n	800c156 <__sflush_r+0xf6>
 800c146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c14a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c14e:	f04f 30ff 	mov.w	r0, #4294967295
 800c152:	81a3      	strh	r3, [r4, #12]
 800c154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c156:	4407      	add	r7, r0
 800c158:	1a36      	subs	r6, r6, r0
 800c15a:	e7e9      	b.n	800c130 <__sflush_r+0xd0>
 800c15c:	dfbffffe 	.word	0xdfbffffe

0800c160 <_fflush_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	690b      	ldr	r3, [r1, #16]
 800c164:	4605      	mov	r5, r0
 800c166:	460c      	mov	r4, r1
 800c168:	b913      	cbnz	r3, 800c170 <_fflush_r+0x10>
 800c16a:	2500      	movs	r5, #0
 800c16c:	4628      	mov	r0, r5
 800c16e:	bd38      	pop	{r3, r4, r5, pc}
 800c170:	b118      	cbz	r0, 800c17a <_fflush_r+0x1a>
 800c172:	6a03      	ldr	r3, [r0, #32]
 800c174:	b90b      	cbnz	r3, 800c17a <_fflush_r+0x1a>
 800c176:	f7fc fcd7 	bl	8008b28 <__sinit>
 800c17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d0f3      	beq.n	800c16a <_fflush_r+0xa>
 800c182:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c184:	07d0      	lsls	r0, r2, #31
 800c186:	d404      	bmi.n	800c192 <_fflush_r+0x32>
 800c188:	0599      	lsls	r1, r3, #22
 800c18a:	d402      	bmi.n	800c192 <_fflush_r+0x32>
 800c18c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c18e:	f7fc ff24 	bl	8008fda <__retarget_lock_acquire_recursive>
 800c192:	4628      	mov	r0, r5
 800c194:	4621      	mov	r1, r4
 800c196:	f7ff ff63 	bl	800c060 <__sflush_r>
 800c19a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c19c:	4605      	mov	r5, r0
 800c19e:	07da      	lsls	r2, r3, #31
 800c1a0:	d4e4      	bmi.n	800c16c <_fflush_r+0xc>
 800c1a2:	89a3      	ldrh	r3, [r4, #12]
 800c1a4:	059b      	lsls	r3, r3, #22
 800c1a6:	d4e1      	bmi.n	800c16c <_fflush_r+0xc>
 800c1a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1aa:	f7fc ff17 	bl	8008fdc <__retarget_lock_release_recursive>
 800c1ae:	e7dd      	b.n	800c16c <_fflush_r+0xc>

0800c1b0 <__swhatbuf_r>:
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	460c      	mov	r4, r1
 800c1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b8:	4615      	mov	r5, r2
 800c1ba:	2900      	cmp	r1, #0
 800c1bc:	461e      	mov	r6, r3
 800c1be:	b096      	sub	sp, #88	@ 0x58
 800c1c0:	da0c      	bge.n	800c1dc <__swhatbuf_r+0x2c>
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c1ca:	bf14      	ite	ne
 800c1cc:	2340      	movne	r3, #64	@ 0x40
 800c1ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	6031      	str	r1, [r6, #0]
 800c1d6:	602b      	str	r3, [r5, #0]
 800c1d8:	b016      	add	sp, #88	@ 0x58
 800c1da:	bd70      	pop	{r4, r5, r6, pc}
 800c1dc:	466a      	mov	r2, sp
 800c1de:	f000 f8d3 	bl	800c388 <_fstat_r>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	dbed      	blt.n	800c1c2 <__swhatbuf_r+0x12>
 800c1e6:	9901      	ldr	r1, [sp, #4]
 800c1e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c1ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c1f0:	4259      	negs	r1, r3
 800c1f2:	4159      	adcs	r1, r3
 800c1f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1f8:	e7eb      	b.n	800c1d2 <__swhatbuf_r+0x22>

0800c1fa <__smakebuf_r>:
 800c1fa:	898b      	ldrh	r3, [r1, #12]
 800c1fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1fe:	079d      	lsls	r5, r3, #30
 800c200:	4606      	mov	r6, r0
 800c202:	460c      	mov	r4, r1
 800c204:	d507      	bpl.n	800c216 <__smakebuf_r+0x1c>
 800c206:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c20a:	6023      	str	r3, [r4, #0]
 800c20c:	6123      	str	r3, [r4, #16]
 800c20e:	2301      	movs	r3, #1
 800c210:	6163      	str	r3, [r4, #20]
 800c212:	b003      	add	sp, #12
 800c214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c216:	466a      	mov	r2, sp
 800c218:	ab01      	add	r3, sp, #4
 800c21a:	f7ff ffc9 	bl	800c1b0 <__swhatbuf_r>
 800c21e:	9f00      	ldr	r7, [sp, #0]
 800c220:	4605      	mov	r5, r0
 800c222:	4639      	mov	r1, r7
 800c224:	4630      	mov	r0, r6
 800c226:	f7fd fdbd 	bl	8009da4 <_malloc_r>
 800c22a:	b948      	cbnz	r0, 800c240 <__smakebuf_r+0x46>
 800c22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c230:	059a      	lsls	r2, r3, #22
 800c232:	d4ee      	bmi.n	800c212 <__smakebuf_r+0x18>
 800c234:	f023 0303 	bic.w	r3, r3, #3
 800c238:	f043 0302 	orr.w	r3, r3, #2
 800c23c:	81a3      	strh	r3, [r4, #12]
 800c23e:	e7e2      	b.n	800c206 <__smakebuf_r+0xc>
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c24a:	81a3      	strh	r3, [r4, #12]
 800c24c:	9b01      	ldr	r3, [sp, #4]
 800c24e:	6020      	str	r0, [r4, #0]
 800c250:	b15b      	cbz	r3, 800c26a <__smakebuf_r+0x70>
 800c252:	4630      	mov	r0, r6
 800c254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c258:	f000 f8a8 	bl	800c3ac <_isatty_r>
 800c25c:	b128      	cbz	r0, 800c26a <__smakebuf_r+0x70>
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	f023 0303 	bic.w	r3, r3, #3
 800c264:	f043 0301 	orr.w	r3, r3, #1
 800c268:	81a3      	strh	r3, [r4, #12]
 800c26a:	89a3      	ldrh	r3, [r4, #12]
 800c26c:	431d      	orrs	r5, r3
 800c26e:	81a5      	strh	r5, [r4, #12]
 800c270:	e7cf      	b.n	800c212 <__smakebuf_r+0x18>

0800c272 <__sccl>:
 800c272:	b570      	push	{r4, r5, r6, lr}
 800c274:	780b      	ldrb	r3, [r1, #0]
 800c276:	4604      	mov	r4, r0
 800c278:	2b5e      	cmp	r3, #94	@ 0x5e
 800c27a:	bf0b      	itete	eq
 800c27c:	784b      	ldrbeq	r3, [r1, #1]
 800c27e:	1c4a      	addne	r2, r1, #1
 800c280:	1c8a      	addeq	r2, r1, #2
 800c282:	2100      	movne	r1, #0
 800c284:	bf08      	it	eq
 800c286:	2101      	moveq	r1, #1
 800c288:	3801      	subs	r0, #1
 800c28a:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c28e:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c292:	42a8      	cmp	r0, r5
 800c294:	d1fb      	bne.n	800c28e <__sccl+0x1c>
 800c296:	b90b      	cbnz	r3, 800c29c <__sccl+0x2a>
 800c298:	1e50      	subs	r0, r2, #1
 800c29a:	bd70      	pop	{r4, r5, r6, pc}
 800c29c:	f081 0101 	eor.w	r1, r1, #1
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	54e1      	strb	r1, [r4, r3]
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c2aa:	2d2d      	cmp	r5, #45	@ 0x2d
 800c2ac:	d005      	beq.n	800c2ba <__sccl+0x48>
 800c2ae:	2d5d      	cmp	r5, #93	@ 0x5d
 800c2b0:	d016      	beq.n	800c2e0 <__sccl+0x6e>
 800c2b2:	2d00      	cmp	r5, #0
 800c2b4:	d0f1      	beq.n	800c29a <__sccl+0x28>
 800c2b6:	462b      	mov	r3, r5
 800c2b8:	e7f2      	b.n	800c2a0 <__sccl+0x2e>
 800c2ba:	7846      	ldrb	r6, [r0, #1]
 800c2bc:	2e5d      	cmp	r6, #93	@ 0x5d
 800c2be:	d0fa      	beq.n	800c2b6 <__sccl+0x44>
 800c2c0:	42b3      	cmp	r3, r6
 800c2c2:	dcf8      	bgt.n	800c2b6 <__sccl+0x44>
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	3002      	adds	r0, #2
 800c2c8:	3201      	adds	r2, #1
 800c2ca:	4296      	cmp	r6, r2
 800c2cc:	54a1      	strb	r1, [r4, r2]
 800c2ce:	dcfb      	bgt.n	800c2c8 <__sccl+0x56>
 800c2d0:	1af2      	subs	r2, r6, r3
 800c2d2:	3a01      	subs	r2, #1
 800c2d4:	42b3      	cmp	r3, r6
 800c2d6:	bfa8      	it	ge
 800c2d8:	2200      	movge	r2, #0
 800c2da:	1c5d      	adds	r5, r3, #1
 800c2dc:	18ab      	adds	r3, r5, r2
 800c2de:	e7e1      	b.n	800c2a4 <__sccl+0x32>
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	e7da      	b.n	800c29a <__sccl+0x28>

0800c2e4 <__submore>:
 800c2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e8:	460c      	mov	r4, r1
 800c2ea:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c2ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2f0:	4299      	cmp	r1, r3
 800c2f2:	d11b      	bne.n	800c32c <__submore+0x48>
 800c2f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c2f8:	f7fd fd54 	bl	8009da4 <_malloc_r>
 800c2fc:	b918      	cbnz	r0, 800c306 <__submore+0x22>
 800c2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c30a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c30c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c310:	6360      	str	r0, [r4, #52]	@ 0x34
 800c312:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c316:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c31a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c31e:	7043      	strb	r3, [r0, #1]
 800c320:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c324:	7003      	strb	r3, [r0, #0]
 800c326:	6020      	str	r0, [r4, #0]
 800c328:	2000      	movs	r0, #0
 800c32a:	e7ea      	b.n	800c302 <__submore+0x1e>
 800c32c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c32e:	0077      	lsls	r7, r6, #1
 800c330:	463a      	mov	r2, r7
 800c332:	f000 fbde 	bl	800caf2 <_realloc_r>
 800c336:	4605      	mov	r5, r0
 800c338:	2800      	cmp	r0, #0
 800c33a:	d0e0      	beq.n	800c2fe <__submore+0x1a>
 800c33c:	eb00 0806 	add.w	r8, r0, r6
 800c340:	4601      	mov	r1, r0
 800c342:	4632      	mov	r2, r6
 800c344:	4640      	mov	r0, r8
 800c346:	f7fc fe58 	bl	8008ffa <memcpy>
 800c34a:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c34e:	f8c4 8000 	str.w	r8, [r4]
 800c352:	e7e9      	b.n	800c328 <__submore+0x44>

0800c354 <memmove>:
 800c354:	4288      	cmp	r0, r1
 800c356:	b510      	push	{r4, lr}
 800c358:	eb01 0402 	add.w	r4, r1, r2
 800c35c:	d902      	bls.n	800c364 <memmove+0x10>
 800c35e:	4284      	cmp	r4, r0
 800c360:	4623      	mov	r3, r4
 800c362:	d807      	bhi.n	800c374 <memmove+0x20>
 800c364:	1e43      	subs	r3, r0, #1
 800c366:	42a1      	cmp	r1, r4
 800c368:	d008      	beq.n	800c37c <memmove+0x28>
 800c36a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c36e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c372:	e7f8      	b.n	800c366 <memmove+0x12>
 800c374:	4601      	mov	r1, r0
 800c376:	4402      	add	r2, r0
 800c378:	428a      	cmp	r2, r1
 800c37a:	d100      	bne.n	800c37e <memmove+0x2a>
 800c37c:	bd10      	pop	{r4, pc}
 800c37e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c386:	e7f7      	b.n	800c378 <memmove+0x24>

0800c388 <_fstat_r>:
 800c388:	b538      	push	{r3, r4, r5, lr}
 800c38a:	2300      	movs	r3, #0
 800c38c:	4d06      	ldr	r5, [pc, #24]	@ (800c3a8 <_fstat_r+0x20>)
 800c38e:	4604      	mov	r4, r0
 800c390:	4608      	mov	r0, r1
 800c392:	4611      	mov	r1, r2
 800c394:	602b      	str	r3, [r5, #0]
 800c396:	f7f7 f9fb 	bl	8003790 <_fstat>
 800c39a:	1c43      	adds	r3, r0, #1
 800c39c:	d102      	bne.n	800c3a4 <_fstat_r+0x1c>
 800c39e:	682b      	ldr	r3, [r5, #0]
 800c3a0:	b103      	cbz	r3, 800c3a4 <_fstat_r+0x1c>
 800c3a2:	6023      	str	r3, [r4, #0]
 800c3a4:	bd38      	pop	{r3, r4, r5, pc}
 800c3a6:	bf00      	nop
 800c3a8:	200006e4 	.word	0x200006e4

0800c3ac <_isatty_r>:
 800c3ac:	b538      	push	{r3, r4, r5, lr}
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	4d05      	ldr	r5, [pc, #20]	@ (800c3c8 <_isatty_r+0x1c>)
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	4608      	mov	r0, r1
 800c3b6:	602b      	str	r3, [r5, #0]
 800c3b8:	f7f7 f9f9 	bl	80037ae <_isatty>
 800c3bc:	1c43      	adds	r3, r0, #1
 800c3be:	d102      	bne.n	800c3c6 <_isatty_r+0x1a>
 800c3c0:	682b      	ldr	r3, [r5, #0]
 800c3c2:	b103      	cbz	r3, 800c3c6 <_isatty_r+0x1a>
 800c3c4:	6023      	str	r3, [r4, #0]
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	200006e4 	.word	0x200006e4

0800c3cc <_sbrk_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	4d05      	ldr	r5, [pc, #20]	@ (800c3e8 <_sbrk_r+0x1c>)
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	4608      	mov	r0, r1
 800c3d6:	602b      	str	r3, [r5, #0]
 800c3d8:	f7f7 fa00 	bl	80037dc <_sbrk>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	d102      	bne.n	800c3e6 <_sbrk_r+0x1a>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	b103      	cbz	r3, 800c3e6 <_sbrk_r+0x1a>
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	200006e4 	.word	0x200006e4

0800c3ec <nan>:
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	4901      	ldr	r1, [pc, #4]	@ (800c3f4 <nan+0x8>)
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	7ff80000 	.word	0x7ff80000

0800c3f8 <__assert_func>:
 800c3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3fa:	4614      	mov	r4, r2
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	4b09      	ldr	r3, [pc, #36]	@ (800c424 <__assert_func+0x2c>)
 800c400:	4605      	mov	r5, r0
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	68d8      	ldr	r0, [r3, #12]
 800c406:	b954      	cbnz	r4, 800c41e <__assert_func+0x26>
 800c408:	4b07      	ldr	r3, [pc, #28]	@ (800c428 <__assert_func+0x30>)
 800c40a:	461c      	mov	r4, r3
 800c40c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c410:	9100      	str	r1, [sp, #0]
 800c412:	462b      	mov	r3, r5
 800c414:	4905      	ldr	r1, [pc, #20]	@ (800c42c <__assert_func+0x34>)
 800c416:	f000 fc19 	bl	800cc4c <fiprintf>
 800c41a:	f000 fc29 	bl	800cc70 <abort>
 800c41e:	4b04      	ldr	r3, [pc, #16]	@ (800c430 <__assert_func+0x38>)
 800c420:	e7f4      	b.n	800c40c <__assert_func+0x14>
 800c422:	bf00      	nop
 800c424:	20000028 	.word	0x20000028
 800c428:	0800e2c0 	.word	0x0800e2c0
 800c42c:	0800e292 	.word	0x0800e292
 800c430:	0800e285 	.word	0x0800e285

0800c434 <_calloc_r>:
 800c434:	b570      	push	{r4, r5, r6, lr}
 800c436:	fba1 5402 	umull	r5, r4, r1, r2
 800c43a:	b93c      	cbnz	r4, 800c44c <_calloc_r+0x18>
 800c43c:	4629      	mov	r1, r5
 800c43e:	f7fd fcb1 	bl	8009da4 <_malloc_r>
 800c442:	4606      	mov	r6, r0
 800c444:	b928      	cbnz	r0, 800c452 <_calloc_r+0x1e>
 800c446:	2600      	movs	r6, #0
 800c448:	4630      	mov	r0, r6
 800c44a:	bd70      	pop	{r4, r5, r6, pc}
 800c44c:	220c      	movs	r2, #12
 800c44e:	6002      	str	r2, [r0, #0]
 800c450:	e7f9      	b.n	800c446 <_calloc_r+0x12>
 800c452:	462a      	mov	r2, r5
 800c454:	4621      	mov	r1, r4
 800c456:	f7fc fd31 	bl	8008ebc <memset>
 800c45a:	e7f5      	b.n	800c448 <_calloc_r+0x14>

0800c45c <rshift>:
 800c45c:	6903      	ldr	r3, [r0, #16]
 800c45e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c462:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c466:	f100 0414 	add.w	r4, r0, #20
 800c46a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c46e:	dd46      	ble.n	800c4fe <rshift+0xa2>
 800c470:	f011 011f 	ands.w	r1, r1, #31
 800c474:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c478:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c47c:	d10c      	bne.n	800c498 <rshift+0x3c>
 800c47e:	4629      	mov	r1, r5
 800c480:	f100 0710 	add.w	r7, r0, #16
 800c484:	42b1      	cmp	r1, r6
 800c486:	d335      	bcc.n	800c4f4 <rshift+0x98>
 800c488:	1a9b      	subs	r3, r3, r2
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	1eea      	subs	r2, r5, #3
 800c48e:	4296      	cmp	r6, r2
 800c490:	bf38      	it	cc
 800c492:	2300      	movcc	r3, #0
 800c494:	4423      	add	r3, r4
 800c496:	e015      	b.n	800c4c4 <rshift+0x68>
 800c498:	46a1      	mov	r9, r4
 800c49a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c49e:	f1c1 0820 	rsb	r8, r1, #32
 800c4a2:	40cf      	lsrs	r7, r1
 800c4a4:	f105 0e04 	add.w	lr, r5, #4
 800c4a8:	4576      	cmp	r6, lr
 800c4aa:	46f4      	mov	ip, lr
 800c4ac:	d816      	bhi.n	800c4dc <rshift+0x80>
 800c4ae:	1a9a      	subs	r2, r3, r2
 800c4b0:	0092      	lsls	r2, r2, #2
 800c4b2:	3a04      	subs	r2, #4
 800c4b4:	3501      	adds	r5, #1
 800c4b6:	42ae      	cmp	r6, r5
 800c4b8:	bf38      	it	cc
 800c4ba:	2200      	movcc	r2, #0
 800c4bc:	18a3      	adds	r3, r4, r2
 800c4be:	50a7      	str	r7, [r4, r2]
 800c4c0:	b107      	cbz	r7, 800c4c4 <rshift+0x68>
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	42a3      	cmp	r3, r4
 800c4c6:	eba3 0204 	sub.w	r2, r3, r4
 800c4ca:	bf08      	it	eq
 800c4cc:	2300      	moveq	r3, #0
 800c4ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4d2:	6102      	str	r2, [r0, #16]
 800c4d4:	bf08      	it	eq
 800c4d6:	6143      	streq	r3, [r0, #20]
 800c4d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4dc:	f8dc c000 	ldr.w	ip, [ip]
 800c4e0:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4e4:	ea4c 0707 	orr.w	r7, ip, r7
 800c4e8:	f849 7b04 	str.w	r7, [r9], #4
 800c4ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4f0:	40cf      	lsrs	r7, r1
 800c4f2:	e7d9      	b.n	800c4a8 <rshift+0x4c>
 800c4f4:	f851 cb04 	ldr.w	ip, [r1], #4
 800c4f8:	f847 cf04 	str.w	ip, [r7, #4]!
 800c4fc:	e7c2      	b.n	800c484 <rshift+0x28>
 800c4fe:	4623      	mov	r3, r4
 800c500:	e7e0      	b.n	800c4c4 <rshift+0x68>

0800c502 <__hexdig_fun>:
 800c502:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c506:	2b09      	cmp	r3, #9
 800c508:	d802      	bhi.n	800c510 <__hexdig_fun+0xe>
 800c50a:	3820      	subs	r0, #32
 800c50c:	b2c0      	uxtb	r0, r0
 800c50e:	4770      	bx	lr
 800c510:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c514:	2b05      	cmp	r3, #5
 800c516:	d801      	bhi.n	800c51c <__hexdig_fun+0x1a>
 800c518:	3847      	subs	r0, #71	@ 0x47
 800c51a:	e7f7      	b.n	800c50c <__hexdig_fun+0xa>
 800c51c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c520:	2b05      	cmp	r3, #5
 800c522:	d801      	bhi.n	800c528 <__hexdig_fun+0x26>
 800c524:	3827      	subs	r0, #39	@ 0x27
 800c526:	e7f1      	b.n	800c50c <__hexdig_fun+0xa>
 800c528:	2000      	movs	r0, #0
 800c52a:	4770      	bx	lr

0800c52c <__gethex>:
 800c52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c530:	468a      	mov	sl, r1
 800c532:	4690      	mov	r8, r2
 800c534:	b085      	sub	sp, #20
 800c536:	9302      	str	r3, [sp, #8]
 800c538:	680b      	ldr	r3, [r1, #0]
 800c53a:	9001      	str	r0, [sp, #4]
 800c53c:	1c9c      	adds	r4, r3, #2
 800c53e:	46a1      	mov	r9, r4
 800c540:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c544:	2830      	cmp	r0, #48	@ 0x30
 800c546:	d0fa      	beq.n	800c53e <__gethex+0x12>
 800c548:	eba9 0303 	sub.w	r3, r9, r3
 800c54c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c550:	f7ff ffd7 	bl	800c502 <__hexdig_fun>
 800c554:	4605      	mov	r5, r0
 800c556:	2800      	cmp	r0, #0
 800c558:	d168      	bne.n	800c62c <__gethex+0x100>
 800c55a:	2201      	movs	r2, #1
 800c55c:	4648      	mov	r0, r9
 800c55e:	499f      	ldr	r1, [pc, #636]	@ (800c7dc <__gethex+0x2b0>)
 800c560:	f7fc fcb4 	bl	8008ecc <strncmp>
 800c564:	4607      	mov	r7, r0
 800c566:	2800      	cmp	r0, #0
 800c568:	d167      	bne.n	800c63a <__gethex+0x10e>
 800c56a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c56e:	4626      	mov	r6, r4
 800c570:	f7ff ffc7 	bl	800c502 <__hexdig_fun>
 800c574:	2800      	cmp	r0, #0
 800c576:	d062      	beq.n	800c63e <__gethex+0x112>
 800c578:	4623      	mov	r3, r4
 800c57a:	7818      	ldrb	r0, [r3, #0]
 800c57c:	4699      	mov	r9, r3
 800c57e:	2830      	cmp	r0, #48	@ 0x30
 800c580:	f103 0301 	add.w	r3, r3, #1
 800c584:	d0f9      	beq.n	800c57a <__gethex+0x4e>
 800c586:	f7ff ffbc 	bl	800c502 <__hexdig_fun>
 800c58a:	fab0 f580 	clz	r5, r0
 800c58e:	f04f 0b01 	mov.w	fp, #1
 800c592:	096d      	lsrs	r5, r5, #5
 800c594:	464a      	mov	r2, r9
 800c596:	4616      	mov	r6, r2
 800c598:	7830      	ldrb	r0, [r6, #0]
 800c59a:	3201      	adds	r2, #1
 800c59c:	f7ff ffb1 	bl	800c502 <__hexdig_fun>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d1f8      	bne.n	800c596 <__gethex+0x6a>
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	498c      	ldr	r1, [pc, #560]	@ (800c7dc <__gethex+0x2b0>)
 800c5aa:	f7fc fc8f 	bl	8008ecc <strncmp>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d13f      	bne.n	800c632 <__gethex+0x106>
 800c5b2:	b944      	cbnz	r4, 800c5c6 <__gethex+0x9a>
 800c5b4:	1c74      	adds	r4, r6, #1
 800c5b6:	4622      	mov	r2, r4
 800c5b8:	4616      	mov	r6, r2
 800c5ba:	7830      	ldrb	r0, [r6, #0]
 800c5bc:	3201      	adds	r2, #1
 800c5be:	f7ff ffa0 	bl	800c502 <__hexdig_fun>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d1f8      	bne.n	800c5b8 <__gethex+0x8c>
 800c5c6:	1ba4      	subs	r4, r4, r6
 800c5c8:	00a7      	lsls	r7, r4, #2
 800c5ca:	7833      	ldrb	r3, [r6, #0]
 800c5cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c5d0:	2b50      	cmp	r3, #80	@ 0x50
 800c5d2:	d13e      	bne.n	800c652 <__gethex+0x126>
 800c5d4:	7873      	ldrb	r3, [r6, #1]
 800c5d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c5d8:	d033      	beq.n	800c642 <__gethex+0x116>
 800c5da:	2b2d      	cmp	r3, #45	@ 0x2d
 800c5dc:	d034      	beq.n	800c648 <__gethex+0x11c>
 800c5de:	2400      	movs	r4, #0
 800c5e0:	1c71      	adds	r1, r6, #1
 800c5e2:	7808      	ldrb	r0, [r1, #0]
 800c5e4:	f7ff ff8d 	bl	800c502 <__hexdig_fun>
 800c5e8:	1e43      	subs	r3, r0, #1
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b18      	cmp	r3, #24
 800c5ee:	d830      	bhi.n	800c652 <__gethex+0x126>
 800c5f0:	f1a0 0210 	sub.w	r2, r0, #16
 800c5f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c5f8:	f7ff ff83 	bl	800c502 <__hexdig_fun>
 800c5fc:	f100 3cff 	add.w	ip, r0, #4294967295
 800c600:	fa5f fc8c 	uxtb.w	ip, ip
 800c604:	f1bc 0f18 	cmp.w	ip, #24
 800c608:	f04f 030a 	mov.w	r3, #10
 800c60c:	d91e      	bls.n	800c64c <__gethex+0x120>
 800c60e:	b104      	cbz	r4, 800c612 <__gethex+0xe6>
 800c610:	4252      	negs	r2, r2
 800c612:	4417      	add	r7, r2
 800c614:	f8ca 1000 	str.w	r1, [sl]
 800c618:	b1ed      	cbz	r5, 800c656 <__gethex+0x12a>
 800c61a:	f1bb 0f00 	cmp.w	fp, #0
 800c61e:	bf0c      	ite	eq
 800c620:	2506      	moveq	r5, #6
 800c622:	2500      	movne	r5, #0
 800c624:	4628      	mov	r0, r5
 800c626:	b005      	add	sp, #20
 800c628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62c:	2500      	movs	r5, #0
 800c62e:	462c      	mov	r4, r5
 800c630:	e7b0      	b.n	800c594 <__gethex+0x68>
 800c632:	2c00      	cmp	r4, #0
 800c634:	d1c7      	bne.n	800c5c6 <__gethex+0x9a>
 800c636:	4627      	mov	r7, r4
 800c638:	e7c7      	b.n	800c5ca <__gethex+0x9e>
 800c63a:	464e      	mov	r6, r9
 800c63c:	462f      	mov	r7, r5
 800c63e:	2501      	movs	r5, #1
 800c640:	e7c3      	b.n	800c5ca <__gethex+0x9e>
 800c642:	2400      	movs	r4, #0
 800c644:	1cb1      	adds	r1, r6, #2
 800c646:	e7cc      	b.n	800c5e2 <__gethex+0xb6>
 800c648:	2401      	movs	r4, #1
 800c64a:	e7fb      	b.n	800c644 <__gethex+0x118>
 800c64c:	fb03 0002 	mla	r0, r3, r2, r0
 800c650:	e7ce      	b.n	800c5f0 <__gethex+0xc4>
 800c652:	4631      	mov	r1, r6
 800c654:	e7de      	b.n	800c614 <__gethex+0xe8>
 800c656:	4629      	mov	r1, r5
 800c658:	eba6 0309 	sub.w	r3, r6, r9
 800c65c:	3b01      	subs	r3, #1
 800c65e:	2b07      	cmp	r3, #7
 800c660:	dc0a      	bgt.n	800c678 <__gethex+0x14c>
 800c662:	9801      	ldr	r0, [sp, #4]
 800c664:	f7fd fc2a 	bl	8009ebc <_Balloc>
 800c668:	4604      	mov	r4, r0
 800c66a:	b940      	cbnz	r0, 800c67e <__gethex+0x152>
 800c66c:	4602      	mov	r2, r0
 800c66e:	21e4      	movs	r1, #228	@ 0xe4
 800c670:	4b5b      	ldr	r3, [pc, #364]	@ (800c7e0 <__gethex+0x2b4>)
 800c672:	485c      	ldr	r0, [pc, #368]	@ (800c7e4 <__gethex+0x2b8>)
 800c674:	f7ff fec0 	bl	800c3f8 <__assert_func>
 800c678:	3101      	adds	r1, #1
 800c67a:	105b      	asrs	r3, r3, #1
 800c67c:	e7ef      	b.n	800c65e <__gethex+0x132>
 800c67e:	2300      	movs	r3, #0
 800c680:	f100 0a14 	add.w	sl, r0, #20
 800c684:	4655      	mov	r5, sl
 800c686:	469b      	mov	fp, r3
 800c688:	45b1      	cmp	r9, r6
 800c68a:	d337      	bcc.n	800c6fc <__gethex+0x1d0>
 800c68c:	f845 bb04 	str.w	fp, [r5], #4
 800c690:	eba5 050a 	sub.w	r5, r5, sl
 800c694:	10ad      	asrs	r5, r5, #2
 800c696:	6125      	str	r5, [r4, #16]
 800c698:	4658      	mov	r0, fp
 800c69a:	f7fd fd01 	bl	800a0a0 <__hi0bits>
 800c69e:	016d      	lsls	r5, r5, #5
 800c6a0:	f8d8 6000 	ldr.w	r6, [r8]
 800c6a4:	1a2d      	subs	r5, r5, r0
 800c6a6:	42b5      	cmp	r5, r6
 800c6a8:	dd54      	ble.n	800c754 <__gethex+0x228>
 800c6aa:	1bad      	subs	r5, r5, r6
 800c6ac:	4629      	mov	r1, r5
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	f7fe f889 	bl	800a7c6 <__any_on>
 800c6b4:	4681      	mov	r9, r0
 800c6b6:	b178      	cbz	r0, 800c6d8 <__gethex+0x1ac>
 800c6b8:	f04f 0901 	mov.w	r9, #1
 800c6bc:	1e6b      	subs	r3, r5, #1
 800c6be:	1159      	asrs	r1, r3, #5
 800c6c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c6c4:	f003 021f 	and.w	r2, r3, #31
 800c6c8:	fa09 f202 	lsl.w	r2, r9, r2
 800c6cc:	420a      	tst	r2, r1
 800c6ce:	d003      	beq.n	800c6d8 <__gethex+0x1ac>
 800c6d0:	454b      	cmp	r3, r9
 800c6d2:	dc36      	bgt.n	800c742 <__gethex+0x216>
 800c6d4:	f04f 0902 	mov.w	r9, #2
 800c6d8:	4629      	mov	r1, r5
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f7ff febe 	bl	800c45c <rshift>
 800c6e0:	442f      	add	r7, r5
 800c6e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6e6:	42bb      	cmp	r3, r7
 800c6e8:	da42      	bge.n	800c770 <__gethex+0x244>
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	9801      	ldr	r0, [sp, #4]
 800c6ee:	f7fd fc25 	bl	8009f3c <_Bfree>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6f6:	25a3      	movs	r5, #163	@ 0xa3
 800c6f8:	6013      	str	r3, [r2, #0]
 800c6fa:	e793      	b.n	800c624 <__gethex+0xf8>
 800c6fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c700:	2a2e      	cmp	r2, #46	@ 0x2e
 800c702:	d012      	beq.n	800c72a <__gethex+0x1fe>
 800c704:	2b20      	cmp	r3, #32
 800c706:	d104      	bne.n	800c712 <__gethex+0x1e6>
 800c708:	f845 bb04 	str.w	fp, [r5], #4
 800c70c:	f04f 0b00 	mov.w	fp, #0
 800c710:	465b      	mov	r3, fp
 800c712:	7830      	ldrb	r0, [r6, #0]
 800c714:	9303      	str	r3, [sp, #12]
 800c716:	f7ff fef4 	bl	800c502 <__hexdig_fun>
 800c71a:	9b03      	ldr	r3, [sp, #12]
 800c71c:	f000 000f 	and.w	r0, r0, #15
 800c720:	4098      	lsls	r0, r3
 800c722:	ea4b 0b00 	orr.w	fp, fp, r0
 800c726:	3304      	adds	r3, #4
 800c728:	e7ae      	b.n	800c688 <__gethex+0x15c>
 800c72a:	45b1      	cmp	r9, r6
 800c72c:	d8ea      	bhi.n	800c704 <__gethex+0x1d8>
 800c72e:	2201      	movs	r2, #1
 800c730:	4630      	mov	r0, r6
 800c732:	492a      	ldr	r1, [pc, #168]	@ (800c7dc <__gethex+0x2b0>)
 800c734:	9303      	str	r3, [sp, #12]
 800c736:	f7fc fbc9 	bl	8008ecc <strncmp>
 800c73a:	9b03      	ldr	r3, [sp, #12]
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d1e1      	bne.n	800c704 <__gethex+0x1d8>
 800c740:	e7a2      	b.n	800c688 <__gethex+0x15c>
 800c742:	4620      	mov	r0, r4
 800c744:	1ea9      	subs	r1, r5, #2
 800c746:	f7fe f83e 	bl	800a7c6 <__any_on>
 800c74a:	2800      	cmp	r0, #0
 800c74c:	d0c2      	beq.n	800c6d4 <__gethex+0x1a8>
 800c74e:	f04f 0903 	mov.w	r9, #3
 800c752:	e7c1      	b.n	800c6d8 <__gethex+0x1ac>
 800c754:	da09      	bge.n	800c76a <__gethex+0x23e>
 800c756:	1b75      	subs	r5, r6, r5
 800c758:	4621      	mov	r1, r4
 800c75a:	462a      	mov	r2, r5
 800c75c:	9801      	ldr	r0, [sp, #4]
 800c75e:	f7fd fe03 	bl	800a368 <__lshift>
 800c762:	4604      	mov	r4, r0
 800c764:	1b7f      	subs	r7, r7, r5
 800c766:	f100 0a14 	add.w	sl, r0, #20
 800c76a:	f04f 0900 	mov.w	r9, #0
 800c76e:	e7b8      	b.n	800c6e2 <__gethex+0x1b6>
 800c770:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c774:	42bd      	cmp	r5, r7
 800c776:	dd6f      	ble.n	800c858 <__gethex+0x32c>
 800c778:	1bed      	subs	r5, r5, r7
 800c77a:	42ae      	cmp	r6, r5
 800c77c:	dc34      	bgt.n	800c7e8 <__gethex+0x2bc>
 800c77e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c782:	2b02      	cmp	r3, #2
 800c784:	d022      	beq.n	800c7cc <__gethex+0x2a0>
 800c786:	2b03      	cmp	r3, #3
 800c788:	d024      	beq.n	800c7d4 <__gethex+0x2a8>
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d115      	bne.n	800c7ba <__gethex+0x28e>
 800c78e:	42ae      	cmp	r6, r5
 800c790:	d113      	bne.n	800c7ba <__gethex+0x28e>
 800c792:	2e01      	cmp	r6, #1
 800c794:	d10b      	bne.n	800c7ae <__gethex+0x282>
 800c796:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c79a:	9a02      	ldr	r2, [sp, #8]
 800c79c:	2562      	movs	r5, #98	@ 0x62
 800c79e:	6013      	str	r3, [r2, #0]
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	6123      	str	r3, [r4, #16]
 800c7a4:	f8ca 3000 	str.w	r3, [sl]
 800c7a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7aa:	601c      	str	r4, [r3, #0]
 800c7ac:	e73a      	b.n	800c624 <__gethex+0xf8>
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	1e71      	subs	r1, r6, #1
 800c7b2:	f7fe f808 	bl	800a7c6 <__any_on>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	d1ed      	bne.n	800c796 <__gethex+0x26a>
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	9801      	ldr	r0, [sp, #4]
 800c7be:	f7fd fbbd 	bl	8009f3c <_Bfree>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7c6:	2550      	movs	r5, #80	@ 0x50
 800c7c8:	6013      	str	r3, [r2, #0]
 800c7ca:	e72b      	b.n	800c624 <__gethex+0xf8>
 800c7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1f3      	bne.n	800c7ba <__gethex+0x28e>
 800c7d2:	e7e0      	b.n	800c796 <__gethex+0x26a>
 800c7d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1dd      	bne.n	800c796 <__gethex+0x26a>
 800c7da:	e7ee      	b.n	800c7ba <__gethex+0x28e>
 800c7dc:	0800e0f8 	.word	0x0800e0f8
 800c7e0:	0800df91 	.word	0x0800df91
 800c7e4:	0800e2c1 	.word	0x0800e2c1
 800c7e8:	1e6f      	subs	r7, r5, #1
 800c7ea:	f1b9 0f00 	cmp.w	r9, #0
 800c7ee:	d130      	bne.n	800c852 <__gethex+0x326>
 800c7f0:	b127      	cbz	r7, 800c7fc <__gethex+0x2d0>
 800c7f2:	4639      	mov	r1, r7
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f7fd ffe6 	bl	800a7c6 <__any_on>
 800c7fa:	4681      	mov	r9, r0
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	4629      	mov	r1, r5
 800c800:	1b76      	subs	r6, r6, r5
 800c802:	2502      	movs	r5, #2
 800c804:	117a      	asrs	r2, r7, #5
 800c806:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c80a:	f007 071f 	and.w	r7, r7, #31
 800c80e:	40bb      	lsls	r3, r7
 800c810:	4213      	tst	r3, r2
 800c812:	4620      	mov	r0, r4
 800c814:	bf18      	it	ne
 800c816:	f049 0902 	orrne.w	r9, r9, #2
 800c81a:	f7ff fe1f 	bl	800c45c <rshift>
 800c81e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c822:	f1b9 0f00 	cmp.w	r9, #0
 800c826:	d047      	beq.n	800c8b8 <__gethex+0x38c>
 800c828:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c82c:	2b02      	cmp	r3, #2
 800c82e:	d015      	beq.n	800c85c <__gethex+0x330>
 800c830:	2b03      	cmp	r3, #3
 800c832:	d017      	beq.n	800c864 <__gethex+0x338>
 800c834:	2b01      	cmp	r3, #1
 800c836:	d109      	bne.n	800c84c <__gethex+0x320>
 800c838:	f019 0f02 	tst.w	r9, #2
 800c83c:	d006      	beq.n	800c84c <__gethex+0x320>
 800c83e:	f8da 3000 	ldr.w	r3, [sl]
 800c842:	ea49 0903 	orr.w	r9, r9, r3
 800c846:	f019 0f01 	tst.w	r9, #1
 800c84a:	d10e      	bne.n	800c86a <__gethex+0x33e>
 800c84c:	f045 0510 	orr.w	r5, r5, #16
 800c850:	e032      	b.n	800c8b8 <__gethex+0x38c>
 800c852:	f04f 0901 	mov.w	r9, #1
 800c856:	e7d1      	b.n	800c7fc <__gethex+0x2d0>
 800c858:	2501      	movs	r5, #1
 800c85a:	e7e2      	b.n	800c822 <__gethex+0x2f6>
 800c85c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c85e:	f1c3 0301 	rsb	r3, r3, #1
 800c862:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c866:	2b00      	cmp	r3, #0
 800c868:	d0f0      	beq.n	800c84c <__gethex+0x320>
 800c86a:	f04f 0c00 	mov.w	ip, #0
 800c86e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c872:	f104 0314 	add.w	r3, r4, #20
 800c876:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c87a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c87e:	4618      	mov	r0, r3
 800c880:	f853 2b04 	ldr.w	r2, [r3], #4
 800c884:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c888:	d01b      	beq.n	800c8c2 <__gethex+0x396>
 800c88a:	3201      	adds	r2, #1
 800c88c:	6002      	str	r2, [r0, #0]
 800c88e:	2d02      	cmp	r5, #2
 800c890:	f104 0314 	add.w	r3, r4, #20
 800c894:	d13c      	bne.n	800c910 <__gethex+0x3e4>
 800c896:	f8d8 2000 	ldr.w	r2, [r8]
 800c89a:	3a01      	subs	r2, #1
 800c89c:	42b2      	cmp	r2, r6
 800c89e:	d109      	bne.n	800c8b4 <__gethex+0x388>
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	1171      	asrs	r1, r6, #5
 800c8a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8a8:	f006 061f 	and.w	r6, r6, #31
 800c8ac:	fa02 f606 	lsl.w	r6, r2, r6
 800c8b0:	421e      	tst	r6, r3
 800c8b2:	d13a      	bne.n	800c92a <__gethex+0x3fe>
 800c8b4:	f045 0520 	orr.w	r5, r5, #32
 800c8b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8ba:	601c      	str	r4, [r3, #0]
 800c8bc:	9b02      	ldr	r3, [sp, #8]
 800c8be:	601f      	str	r7, [r3, #0]
 800c8c0:	e6b0      	b.n	800c624 <__gethex+0xf8>
 800c8c2:	4299      	cmp	r1, r3
 800c8c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8c8:	d8d9      	bhi.n	800c87e <__gethex+0x352>
 800c8ca:	68a3      	ldr	r3, [r4, #8]
 800c8cc:	459b      	cmp	fp, r3
 800c8ce:	db17      	blt.n	800c900 <__gethex+0x3d4>
 800c8d0:	6861      	ldr	r1, [r4, #4]
 800c8d2:	9801      	ldr	r0, [sp, #4]
 800c8d4:	3101      	adds	r1, #1
 800c8d6:	f7fd faf1 	bl	8009ebc <_Balloc>
 800c8da:	4681      	mov	r9, r0
 800c8dc:	b918      	cbnz	r0, 800c8e6 <__gethex+0x3ba>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	2184      	movs	r1, #132	@ 0x84
 800c8e2:	4b19      	ldr	r3, [pc, #100]	@ (800c948 <__gethex+0x41c>)
 800c8e4:	e6c5      	b.n	800c672 <__gethex+0x146>
 800c8e6:	6922      	ldr	r2, [r4, #16]
 800c8e8:	f104 010c 	add.w	r1, r4, #12
 800c8ec:	3202      	adds	r2, #2
 800c8ee:	0092      	lsls	r2, r2, #2
 800c8f0:	300c      	adds	r0, #12
 800c8f2:	f7fc fb82 	bl	8008ffa <memcpy>
 800c8f6:	4621      	mov	r1, r4
 800c8f8:	9801      	ldr	r0, [sp, #4]
 800c8fa:	f7fd fb1f 	bl	8009f3c <_Bfree>
 800c8fe:	464c      	mov	r4, r9
 800c900:	6923      	ldr	r3, [r4, #16]
 800c902:	1c5a      	adds	r2, r3, #1
 800c904:	6122      	str	r2, [r4, #16]
 800c906:	2201      	movs	r2, #1
 800c908:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c90c:	615a      	str	r2, [r3, #20]
 800c90e:	e7be      	b.n	800c88e <__gethex+0x362>
 800c910:	6922      	ldr	r2, [r4, #16]
 800c912:	455a      	cmp	r2, fp
 800c914:	dd0b      	ble.n	800c92e <__gethex+0x402>
 800c916:	2101      	movs	r1, #1
 800c918:	4620      	mov	r0, r4
 800c91a:	f7ff fd9f 	bl	800c45c <rshift>
 800c91e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c922:	3701      	adds	r7, #1
 800c924:	42bb      	cmp	r3, r7
 800c926:	f6ff aee0 	blt.w	800c6ea <__gethex+0x1be>
 800c92a:	2501      	movs	r5, #1
 800c92c:	e7c2      	b.n	800c8b4 <__gethex+0x388>
 800c92e:	f016 061f 	ands.w	r6, r6, #31
 800c932:	d0fa      	beq.n	800c92a <__gethex+0x3fe>
 800c934:	4453      	add	r3, sl
 800c936:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c93a:	f7fd fbb1 	bl	800a0a0 <__hi0bits>
 800c93e:	f1c6 0620 	rsb	r6, r6, #32
 800c942:	42b0      	cmp	r0, r6
 800c944:	dbe7      	blt.n	800c916 <__gethex+0x3ea>
 800c946:	e7f0      	b.n	800c92a <__gethex+0x3fe>
 800c948:	0800df91 	.word	0x0800df91

0800c94c <L_shift>:
 800c94c:	f1c2 0208 	rsb	r2, r2, #8
 800c950:	0092      	lsls	r2, r2, #2
 800c952:	b570      	push	{r4, r5, r6, lr}
 800c954:	f1c2 0620 	rsb	r6, r2, #32
 800c958:	6843      	ldr	r3, [r0, #4]
 800c95a:	6804      	ldr	r4, [r0, #0]
 800c95c:	fa03 f506 	lsl.w	r5, r3, r6
 800c960:	432c      	orrs	r4, r5
 800c962:	40d3      	lsrs	r3, r2
 800c964:	6004      	str	r4, [r0, #0]
 800c966:	f840 3f04 	str.w	r3, [r0, #4]!
 800c96a:	4288      	cmp	r0, r1
 800c96c:	d3f4      	bcc.n	800c958 <L_shift+0xc>
 800c96e:	bd70      	pop	{r4, r5, r6, pc}

0800c970 <__match>:
 800c970:	b530      	push	{r4, r5, lr}
 800c972:	6803      	ldr	r3, [r0, #0]
 800c974:	3301      	adds	r3, #1
 800c976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c97a:	b914      	cbnz	r4, 800c982 <__match+0x12>
 800c97c:	6003      	str	r3, [r0, #0]
 800c97e:	2001      	movs	r0, #1
 800c980:	bd30      	pop	{r4, r5, pc}
 800c982:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c986:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c98a:	2d19      	cmp	r5, #25
 800c98c:	bf98      	it	ls
 800c98e:	3220      	addls	r2, #32
 800c990:	42a2      	cmp	r2, r4
 800c992:	d0f0      	beq.n	800c976 <__match+0x6>
 800c994:	2000      	movs	r0, #0
 800c996:	e7f3      	b.n	800c980 <__match+0x10>

0800c998 <__hexnan>:
 800c998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99c:	2500      	movs	r5, #0
 800c99e:	680b      	ldr	r3, [r1, #0]
 800c9a0:	4682      	mov	sl, r0
 800c9a2:	115e      	asrs	r6, r3, #5
 800c9a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c9a8:	f013 031f 	ands.w	r3, r3, #31
 800c9ac:	bf18      	it	ne
 800c9ae:	3604      	addne	r6, #4
 800c9b0:	1f37      	subs	r7, r6, #4
 800c9b2:	4690      	mov	r8, r2
 800c9b4:	46b9      	mov	r9, r7
 800c9b6:	463c      	mov	r4, r7
 800c9b8:	46ab      	mov	fp, r5
 800c9ba:	b087      	sub	sp, #28
 800c9bc:	6801      	ldr	r1, [r0, #0]
 800c9be:	9301      	str	r3, [sp, #4]
 800c9c0:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9c4:	9502      	str	r5, [sp, #8]
 800c9c6:	784a      	ldrb	r2, [r1, #1]
 800c9c8:	1c4b      	adds	r3, r1, #1
 800c9ca:	9303      	str	r3, [sp, #12]
 800c9cc:	b342      	cbz	r2, 800ca20 <__hexnan+0x88>
 800c9ce:	4610      	mov	r0, r2
 800c9d0:	9105      	str	r1, [sp, #20]
 800c9d2:	9204      	str	r2, [sp, #16]
 800c9d4:	f7ff fd95 	bl	800c502 <__hexdig_fun>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d151      	bne.n	800ca80 <__hexnan+0xe8>
 800c9dc:	9a04      	ldr	r2, [sp, #16]
 800c9de:	9905      	ldr	r1, [sp, #20]
 800c9e0:	2a20      	cmp	r2, #32
 800c9e2:	d818      	bhi.n	800ca16 <__hexnan+0x7e>
 800c9e4:	9b02      	ldr	r3, [sp, #8]
 800c9e6:	459b      	cmp	fp, r3
 800c9e8:	dd13      	ble.n	800ca12 <__hexnan+0x7a>
 800c9ea:	454c      	cmp	r4, r9
 800c9ec:	d206      	bcs.n	800c9fc <__hexnan+0x64>
 800c9ee:	2d07      	cmp	r5, #7
 800c9f0:	dc04      	bgt.n	800c9fc <__hexnan+0x64>
 800c9f2:	462a      	mov	r2, r5
 800c9f4:	4649      	mov	r1, r9
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f7ff ffa8 	bl	800c94c <L_shift>
 800c9fc:	4544      	cmp	r4, r8
 800c9fe:	d952      	bls.n	800caa6 <__hexnan+0x10e>
 800ca00:	2300      	movs	r3, #0
 800ca02:	f1a4 0904 	sub.w	r9, r4, #4
 800ca06:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca0a:	461d      	mov	r5, r3
 800ca0c:	464c      	mov	r4, r9
 800ca0e:	f8cd b008 	str.w	fp, [sp, #8]
 800ca12:	9903      	ldr	r1, [sp, #12]
 800ca14:	e7d7      	b.n	800c9c6 <__hexnan+0x2e>
 800ca16:	2a29      	cmp	r2, #41	@ 0x29
 800ca18:	d157      	bne.n	800caca <__hexnan+0x132>
 800ca1a:	3102      	adds	r1, #2
 800ca1c:	f8ca 1000 	str.w	r1, [sl]
 800ca20:	f1bb 0f00 	cmp.w	fp, #0
 800ca24:	d051      	beq.n	800caca <__hexnan+0x132>
 800ca26:	454c      	cmp	r4, r9
 800ca28:	d206      	bcs.n	800ca38 <__hexnan+0xa0>
 800ca2a:	2d07      	cmp	r5, #7
 800ca2c:	dc04      	bgt.n	800ca38 <__hexnan+0xa0>
 800ca2e:	462a      	mov	r2, r5
 800ca30:	4649      	mov	r1, r9
 800ca32:	4620      	mov	r0, r4
 800ca34:	f7ff ff8a 	bl	800c94c <L_shift>
 800ca38:	4544      	cmp	r4, r8
 800ca3a:	d936      	bls.n	800caaa <__hexnan+0x112>
 800ca3c:	4623      	mov	r3, r4
 800ca3e:	f1a8 0204 	sub.w	r2, r8, #4
 800ca42:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca46:	429f      	cmp	r7, r3
 800ca48:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca4c:	d2f9      	bcs.n	800ca42 <__hexnan+0xaa>
 800ca4e:	1b3b      	subs	r3, r7, r4
 800ca50:	f023 0303 	bic.w	r3, r3, #3
 800ca54:	3304      	adds	r3, #4
 800ca56:	3401      	adds	r4, #1
 800ca58:	3e03      	subs	r6, #3
 800ca5a:	42b4      	cmp	r4, r6
 800ca5c:	bf88      	it	hi
 800ca5e:	2304      	movhi	r3, #4
 800ca60:	2200      	movs	r2, #0
 800ca62:	4443      	add	r3, r8
 800ca64:	f843 2b04 	str.w	r2, [r3], #4
 800ca68:	429f      	cmp	r7, r3
 800ca6a:	d2fb      	bcs.n	800ca64 <__hexnan+0xcc>
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	b91b      	cbnz	r3, 800ca78 <__hexnan+0xe0>
 800ca70:	4547      	cmp	r7, r8
 800ca72:	d128      	bne.n	800cac6 <__hexnan+0x12e>
 800ca74:	2301      	movs	r3, #1
 800ca76:	603b      	str	r3, [r7, #0]
 800ca78:	2005      	movs	r0, #5
 800ca7a:	b007      	add	sp, #28
 800ca7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca80:	3501      	adds	r5, #1
 800ca82:	2d08      	cmp	r5, #8
 800ca84:	f10b 0b01 	add.w	fp, fp, #1
 800ca88:	dd06      	ble.n	800ca98 <__hexnan+0x100>
 800ca8a:	4544      	cmp	r4, r8
 800ca8c:	d9c1      	bls.n	800ca12 <__hexnan+0x7a>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	2501      	movs	r5, #1
 800ca92:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca96:	3c04      	subs	r4, #4
 800ca98:	6822      	ldr	r2, [r4, #0]
 800ca9a:	f000 000f 	and.w	r0, r0, #15
 800ca9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800caa2:	6020      	str	r0, [r4, #0]
 800caa4:	e7b5      	b.n	800ca12 <__hexnan+0x7a>
 800caa6:	2508      	movs	r5, #8
 800caa8:	e7b3      	b.n	800ca12 <__hexnan+0x7a>
 800caaa:	9b01      	ldr	r3, [sp, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d0dd      	beq.n	800ca6c <__hexnan+0xd4>
 800cab0:	f04f 32ff 	mov.w	r2, #4294967295
 800cab4:	f1c3 0320 	rsb	r3, r3, #32
 800cab8:	40da      	lsrs	r2, r3
 800caba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cabe:	4013      	ands	r3, r2
 800cac0:	f846 3c04 	str.w	r3, [r6, #-4]
 800cac4:	e7d2      	b.n	800ca6c <__hexnan+0xd4>
 800cac6:	3f04      	subs	r7, #4
 800cac8:	e7d0      	b.n	800ca6c <__hexnan+0xd4>
 800caca:	2004      	movs	r0, #4
 800cacc:	e7d5      	b.n	800ca7a <__hexnan+0xe2>

0800cace <__ascii_mbtowc>:
 800cace:	b082      	sub	sp, #8
 800cad0:	b901      	cbnz	r1, 800cad4 <__ascii_mbtowc+0x6>
 800cad2:	a901      	add	r1, sp, #4
 800cad4:	b142      	cbz	r2, 800cae8 <__ascii_mbtowc+0x1a>
 800cad6:	b14b      	cbz	r3, 800caec <__ascii_mbtowc+0x1e>
 800cad8:	7813      	ldrb	r3, [r2, #0]
 800cada:	600b      	str	r3, [r1, #0]
 800cadc:	7812      	ldrb	r2, [r2, #0]
 800cade:	1e10      	subs	r0, r2, #0
 800cae0:	bf18      	it	ne
 800cae2:	2001      	movne	r0, #1
 800cae4:	b002      	add	sp, #8
 800cae6:	4770      	bx	lr
 800cae8:	4610      	mov	r0, r2
 800caea:	e7fb      	b.n	800cae4 <__ascii_mbtowc+0x16>
 800caec:	f06f 0001 	mvn.w	r0, #1
 800caf0:	e7f8      	b.n	800cae4 <__ascii_mbtowc+0x16>

0800caf2 <_realloc_r>:
 800caf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf6:	4680      	mov	r8, r0
 800caf8:	4615      	mov	r5, r2
 800cafa:	460c      	mov	r4, r1
 800cafc:	b921      	cbnz	r1, 800cb08 <_realloc_r+0x16>
 800cafe:	4611      	mov	r1, r2
 800cb00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb04:	f7fd b94e 	b.w	8009da4 <_malloc_r>
 800cb08:	b92a      	cbnz	r2, 800cb16 <_realloc_r+0x24>
 800cb0a:	f7fd f8d9 	bl	8009cc0 <_free_r>
 800cb0e:	2400      	movs	r4, #0
 800cb10:	4620      	mov	r0, r4
 800cb12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb16:	f000 f8b2 	bl	800cc7e <_malloc_usable_size_r>
 800cb1a:	4285      	cmp	r5, r0
 800cb1c:	4606      	mov	r6, r0
 800cb1e:	d802      	bhi.n	800cb26 <_realloc_r+0x34>
 800cb20:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cb24:	d8f4      	bhi.n	800cb10 <_realloc_r+0x1e>
 800cb26:	4629      	mov	r1, r5
 800cb28:	4640      	mov	r0, r8
 800cb2a:	f7fd f93b 	bl	8009da4 <_malloc_r>
 800cb2e:	4607      	mov	r7, r0
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d0ec      	beq.n	800cb0e <_realloc_r+0x1c>
 800cb34:	42b5      	cmp	r5, r6
 800cb36:	462a      	mov	r2, r5
 800cb38:	4621      	mov	r1, r4
 800cb3a:	bf28      	it	cs
 800cb3c:	4632      	movcs	r2, r6
 800cb3e:	f7fc fa5c 	bl	8008ffa <memcpy>
 800cb42:	4621      	mov	r1, r4
 800cb44:	4640      	mov	r0, r8
 800cb46:	f7fd f8bb 	bl	8009cc0 <_free_r>
 800cb4a:	463c      	mov	r4, r7
 800cb4c:	e7e0      	b.n	800cb10 <_realloc_r+0x1e>
	...

0800cb50 <_strtoul_l.constprop.0>:
 800cb50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb54:	4686      	mov	lr, r0
 800cb56:	460d      	mov	r5, r1
 800cb58:	4e33      	ldr	r6, [pc, #204]	@ (800cc28 <_strtoul_l.constprop.0+0xd8>)
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb60:	5d37      	ldrb	r7, [r6, r4]
 800cb62:	f017 0708 	ands.w	r7, r7, #8
 800cb66:	d1f8      	bne.n	800cb5a <_strtoul_l.constprop.0+0xa>
 800cb68:	2c2d      	cmp	r4, #45	@ 0x2d
 800cb6a:	d12f      	bne.n	800cbcc <_strtoul_l.constprop.0+0x7c>
 800cb6c:	2701      	movs	r7, #1
 800cb6e:	782c      	ldrb	r4, [r5, #0]
 800cb70:	1c85      	adds	r5, r0, #2
 800cb72:	f033 0010 	bics.w	r0, r3, #16
 800cb76:	d109      	bne.n	800cb8c <_strtoul_l.constprop.0+0x3c>
 800cb78:	2c30      	cmp	r4, #48	@ 0x30
 800cb7a:	d12c      	bne.n	800cbd6 <_strtoul_l.constprop.0+0x86>
 800cb7c:	7828      	ldrb	r0, [r5, #0]
 800cb7e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800cb82:	2858      	cmp	r0, #88	@ 0x58
 800cb84:	d127      	bne.n	800cbd6 <_strtoul_l.constprop.0+0x86>
 800cb86:	2310      	movs	r3, #16
 800cb88:	786c      	ldrb	r4, [r5, #1]
 800cb8a:	3502      	adds	r5, #2
 800cb8c:	f04f 38ff 	mov.w	r8, #4294967295
 800cb90:	fbb8 f8f3 	udiv	r8, r8, r3
 800cb94:	2600      	movs	r6, #0
 800cb96:	fb03 f908 	mul.w	r9, r3, r8
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	ea6f 0909 	mvn.w	r9, r9
 800cba0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800cba4:	f1bc 0f09 	cmp.w	ip, #9
 800cba8:	d81c      	bhi.n	800cbe4 <_strtoul_l.constprop.0+0x94>
 800cbaa:	4664      	mov	r4, ip
 800cbac:	42a3      	cmp	r3, r4
 800cbae:	dd2a      	ble.n	800cc06 <_strtoul_l.constprop.0+0xb6>
 800cbb0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800cbb4:	d007      	beq.n	800cbc6 <_strtoul_l.constprop.0+0x76>
 800cbb6:	4580      	cmp	r8, r0
 800cbb8:	d322      	bcc.n	800cc00 <_strtoul_l.constprop.0+0xb0>
 800cbba:	d101      	bne.n	800cbc0 <_strtoul_l.constprop.0+0x70>
 800cbbc:	45a1      	cmp	r9, r4
 800cbbe:	db1f      	blt.n	800cc00 <_strtoul_l.constprop.0+0xb0>
 800cbc0:	2601      	movs	r6, #1
 800cbc2:	fb00 4003 	mla	r0, r0, r3, r4
 800cbc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbca:	e7e9      	b.n	800cba0 <_strtoul_l.constprop.0+0x50>
 800cbcc:	2c2b      	cmp	r4, #43	@ 0x2b
 800cbce:	bf04      	itt	eq
 800cbd0:	782c      	ldrbeq	r4, [r5, #0]
 800cbd2:	1c85      	addeq	r5, r0, #2
 800cbd4:	e7cd      	b.n	800cb72 <_strtoul_l.constprop.0+0x22>
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d1d8      	bne.n	800cb8c <_strtoul_l.constprop.0+0x3c>
 800cbda:	2c30      	cmp	r4, #48	@ 0x30
 800cbdc:	bf0c      	ite	eq
 800cbde:	2308      	moveq	r3, #8
 800cbe0:	230a      	movne	r3, #10
 800cbe2:	e7d3      	b.n	800cb8c <_strtoul_l.constprop.0+0x3c>
 800cbe4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800cbe8:	f1bc 0f19 	cmp.w	ip, #25
 800cbec:	d801      	bhi.n	800cbf2 <_strtoul_l.constprop.0+0xa2>
 800cbee:	3c37      	subs	r4, #55	@ 0x37
 800cbf0:	e7dc      	b.n	800cbac <_strtoul_l.constprop.0+0x5c>
 800cbf2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800cbf6:	f1bc 0f19 	cmp.w	ip, #25
 800cbfa:	d804      	bhi.n	800cc06 <_strtoul_l.constprop.0+0xb6>
 800cbfc:	3c57      	subs	r4, #87	@ 0x57
 800cbfe:	e7d5      	b.n	800cbac <_strtoul_l.constprop.0+0x5c>
 800cc00:	f04f 36ff 	mov.w	r6, #4294967295
 800cc04:	e7df      	b.n	800cbc6 <_strtoul_l.constprop.0+0x76>
 800cc06:	1c73      	adds	r3, r6, #1
 800cc08:	d106      	bne.n	800cc18 <_strtoul_l.constprop.0+0xc8>
 800cc0a:	2322      	movs	r3, #34	@ 0x22
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	f8ce 3000 	str.w	r3, [lr]
 800cc12:	b932      	cbnz	r2, 800cc22 <_strtoul_l.constprop.0+0xd2>
 800cc14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc18:	b107      	cbz	r7, 800cc1c <_strtoul_l.constprop.0+0xcc>
 800cc1a:	4240      	negs	r0, r0
 800cc1c:	2a00      	cmp	r2, #0
 800cc1e:	d0f9      	beq.n	800cc14 <_strtoul_l.constprop.0+0xc4>
 800cc20:	b106      	cbz	r6, 800cc24 <_strtoul_l.constprop.0+0xd4>
 800cc22:	1e69      	subs	r1, r5, #1
 800cc24:	6011      	str	r1, [r2, #0]
 800cc26:	e7f5      	b.n	800cc14 <_strtoul_l.constprop.0+0xc4>
 800cc28:	0800e151 	.word	0x0800e151

0800cc2c <_strtoul_r>:
 800cc2c:	f7ff bf90 	b.w	800cb50 <_strtoul_l.constprop.0>

0800cc30 <__ascii_wctomb>:
 800cc30:	4603      	mov	r3, r0
 800cc32:	4608      	mov	r0, r1
 800cc34:	b141      	cbz	r1, 800cc48 <__ascii_wctomb+0x18>
 800cc36:	2aff      	cmp	r2, #255	@ 0xff
 800cc38:	d904      	bls.n	800cc44 <__ascii_wctomb+0x14>
 800cc3a:	228a      	movs	r2, #138	@ 0x8a
 800cc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc40:	601a      	str	r2, [r3, #0]
 800cc42:	4770      	bx	lr
 800cc44:	2001      	movs	r0, #1
 800cc46:	700a      	strb	r2, [r1, #0]
 800cc48:	4770      	bx	lr
	...

0800cc4c <fiprintf>:
 800cc4c:	b40e      	push	{r1, r2, r3}
 800cc4e:	b503      	push	{r0, r1, lr}
 800cc50:	4601      	mov	r1, r0
 800cc52:	ab03      	add	r3, sp, #12
 800cc54:	4805      	ldr	r0, [pc, #20]	@ (800cc6c <fiprintf+0x20>)
 800cc56:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc5a:	6800      	ldr	r0, [r0, #0]
 800cc5c:	9301      	str	r3, [sp, #4]
 800cc5e:	f7fe ff9b 	bl	800bb98 <_vfiprintf_r>
 800cc62:	b002      	add	sp, #8
 800cc64:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc68:	b003      	add	sp, #12
 800cc6a:	4770      	bx	lr
 800cc6c:	20000028 	.word	0x20000028

0800cc70 <abort>:
 800cc70:	2006      	movs	r0, #6
 800cc72:	b508      	push	{r3, lr}
 800cc74:	f000 f834 	bl	800cce0 <raise>
 800cc78:	2001      	movs	r0, #1
 800cc7a:	f7f6 fd56 	bl	800372a <_exit>

0800cc7e <_malloc_usable_size_r>:
 800cc7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc82:	1f18      	subs	r0, r3, #4
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	bfbc      	itt	lt
 800cc88:	580b      	ldrlt	r3, [r1, r0]
 800cc8a:	18c0      	addlt	r0, r0, r3
 800cc8c:	4770      	bx	lr

0800cc8e <_raise_r>:
 800cc8e:	291f      	cmp	r1, #31
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4605      	mov	r5, r0
 800cc94:	460c      	mov	r4, r1
 800cc96:	d904      	bls.n	800cca2 <_raise_r+0x14>
 800cc98:	2316      	movs	r3, #22
 800cc9a:	6003      	str	r3, [r0, #0]
 800cc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cca0:	bd38      	pop	{r3, r4, r5, pc}
 800cca2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cca4:	b112      	cbz	r2, 800ccac <_raise_r+0x1e>
 800cca6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccaa:	b94b      	cbnz	r3, 800ccc0 <_raise_r+0x32>
 800ccac:	4628      	mov	r0, r5
 800ccae:	f000 f831 	bl	800cd14 <_getpid_r>
 800ccb2:	4622      	mov	r2, r4
 800ccb4:	4601      	mov	r1, r0
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccbc:	f000 b818 	b.w	800ccf0 <_kill_r>
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d00a      	beq.n	800ccda <_raise_r+0x4c>
 800ccc4:	1c59      	adds	r1, r3, #1
 800ccc6:	d103      	bne.n	800ccd0 <_raise_r+0x42>
 800ccc8:	2316      	movs	r3, #22
 800ccca:	6003      	str	r3, [r0, #0]
 800cccc:	2001      	movs	r0, #1
 800ccce:	e7e7      	b.n	800cca0 <_raise_r+0x12>
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ccd8:	4798      	blx	r3
 800ccda:	2000      	movs	r0, #0
 800ccdc:	e7e0      	b.n	800cca0 <_raise_r+0x12>
	...

0800cce0 <raise>:
 800cce0:	4b02      	ldr	r3, [pc, #8]	@ (800ccec <raise+0xc>)
 800cce2:	4601      	mov	r1, r0
 800cce4:	6818      	ldr	r0, [r3, #0]
 800cce6:	f7ff bfd2 	b.w	800cc8e <_raise_r>
 800ccea:	bf00      	nop
 800ccec:	20000028 	.word	0x20000028

0800ccf0 <_kill_r>:
 800ccf0:	b538      	push	{r3, r4, r5, lr}
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	4d06      	ldr	r5, [pc, #24]	@ (800cd10 <_kill_r+0x20>)
 800ccf6:	4604      	mov	r4, r0
 800ccf8:	4608      	mov	r0, r1
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	602b      	str	r3, [r5, #0]
 800ccfe:	f7f6 fd04 	bl	800370a <_kill>
 800cd02:	1c43      	adds	r3, r0, #1
 800cd04:	d102      	bne.n	800cd0c <_kill_r+0x1c>
 800cd06:	682b      	ldr	r3, [r5, #0]
 800cd08:	b103      	cbz	r3, 800cd0c <_kill_r+0x1c>
 800cd0a:	6023      	str	r3, [r4, #0]
 800cd0c:	bd38      	pop	{r3, r4, r5, pc}
 800cd0e:	bf00      	nop
 800cd10:	200006e4 	.word	0x200006e4

0800cd14 <_getpid_r>:
 800cd14:	f7f6 bcf2 	b.w	80036fc <_getpid>

0800cd18 <pow>:
 800cd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd1c:	4614      	mov	r4, r2
 800cd1e:	461d      	mov	r5, r3
 800cd20:	4680      	mov	r8, r0
 800cd22:	4689      	mov	r9, r1
 800cd24:	f000 f8ac 	bl	800ce80 <__ieee754_pow>
 800cd28:	4622      	mov	r2, r4
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	460f      	mov	r7, r1
 800cd2e:	462b      	mov	r3, r5
 800cd30:	4620      	mov	r0, r4
 800cd32:	4629      	mov	r1, r5
 800cd34:	f7f3 fe6a 	bl	8000a0c <__aeabi_dcmpun>
 800cd38:	bbc8      	cbnz	r0, 800cdae <pow+0x96>
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	4640      	mov	r0, r8
 800cd40:	4649      	mov	r1, r9
 800cd42:	f7f3 fe31 	bl	80009a8 <__aeabi_dcmpeq>
 800cd46:	b1b8      	cbz	r0, 800cd78 <pow+0x60>
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	4629      	mov	r1, r5
 800cd50:	f7f3 fe2a 	bl	80009a8 <__aeabi_dcmpeq>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d141      	bne.n	800cddc <pow+0xc4>
 800cd58:	4620      	mov	r0, r4
 800cd5a:	4629      	mov	r1, r5
 800cd5c:	f000 f844 	bl	800cde8 <finite>
 800cd60:	b328      	cbz	r0, 800cdae <pow+0x96>
 800cd62:	2200      	movs	r2, #0
 800cd64:	2300      	movs	r3, #0
 800cd66:	4620      	mov	r0, r4
 800cd68:	4629      	mov	r1, r5
 800cd6a:	f7f3 fe27 	bl	80009bc <__aeabi_dcmplt>
 800cd6e:	b1f0      	cbz	r0, 800cdae <pow+0x96>
 800cd70:	f7fc f908 	bl	8008f84 <__errno>
 800cd74:	2322      	movs	r3, #34	@ 0x22
 800cd76:	e019      	b.n	800cdac <pow+0x94>
 800cd78:	4630      	mov	r0, r6
 800cd7a:	4639      	mov	r1, r7
 800cd7c:	f000 f834 	bl	800cde8 <finite>
 800cd80:	b9c8      	cbnz	r0, 800cdb6 <pow+0x9e>
 800cd82:	4640      	mov	r0, r8
 800cd84:	4649      	mov	r1, r9
 800cd86:	f000 f82f 	bl	800cde8 <finite>
 800cd8a:	b1a0      	cbz	r0, 800cdb6 <pow+0x9e>
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	4629      	mov	r1, r5
 800cd90:	f000 f82a 	bl	800cde8 <finite>
 800cd94:	b178      	cbz	r0, 800cdb6 <pow+0x9e>
 800cd96:	4632      	mov	r2, r6
 800cd98:	463b      	mov	r3, r7
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	4639      	mov	r1, r7
 800cd9e:	f7f3 fe35 	bl	8000a0c <__aeabi_dcmpun>
 800cda2:	2800      	cmp	r0, #0
 800cda4:	d0e4      	beq.n	800cd70 <pow+0x58>
 800cda6:	f7fc f8ed 	bl	8008f84 <__errno>
 800cdaa:	2321      	movs	r3, #33	@ 0x21
 800cdac:	6003      	str	r3, [r0, #0]
 800cdae:	4630      	mov	r0, r6
 800cdb0:	4639      	mov	r1, r7
 800cdb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	2300      	movs	r3, #0
 800cdba:	4630      	mov	r0, r6
 800cdbc:	4639      	mov	r1, r7
 800cdbe:	f7f3 fdf3 	bl	80009a8 <__aeabi_dcmpeq>
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d0f3      	beq.n	800cdae <pow+0x96>
 800cdc6:	4640      	mov	r0, r8
 800cdc8:	4649      	mov	r1, r9
 800cdca:	f000 f80d 	bl	800cde8 <finite>
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	d0ed      	beq.n	800cdae <pow+0x96>
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	4629      	mov	r1, r5
 800cdd6:	f000 f807 	bl	800cde8 <finite>
 800cdda:	e7c8      	b.n	800cd6e <pow+0x56>
 800cddc:	2600      	movs	r6, #0
 800cdde:	4f01      	ldr	r7, [pc, #4]	@ (800cde4 <pow+0xcc>)
 800cde0:	e7e5      	b.n	800cdae <pow+0x96>
 800cde2:	bf00      	nop
 800cde4:	3ff00000 	.word	0x3ff00000

0800cde8 <finite>:
 800cde8:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800cdec:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800cdf0:	0fc0      	lsrs	r0, r0, #31
 800cdf2:	4770      	bx	lr

0800cdf4 <round>:
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cdfa:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800cdfe:	2a13      	cmp	r2, #19
 800ce00:	4604      	mov	r4, r0
 800ce02:	460d      	mov	r5, r1
 800ce04:	460b      	mov	r3, r1
 800ce06:	dc1a      	bgt.n	800ce3e <round+0x4a>
 800ce08:	2a00      	cmp	r2, #0
 800ce0a:	da0b      	bge.n	800ce24 <round+0x30>
 800ce0c:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ce10:	3201      	adds	r2, #1
 800ce12:	bf04      	itt	eq
 800ce14:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800ce18:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	461d      	mov	r5, r3
 800ce20:	4614      	mov	r4, r2
 800ce22:	e016      	b.n	800ce52 <round+0x5e>
 800ce24:	4815      	ldr	r0, [pc, #84]	@ (800ce7c <round+0x88>)
 800ce26:	4110      	asrs	r0, r2
 800ce28:	4001      	ands	r1, r0
 800ce2a:	4321      	orrs	r1, r4
 800ce2c:	d011      	beq.n	800ce52 <round+0x5e>
 800ce2e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800ce32:	fa41 f202 	asr.w	r2, r1, r2
 800ce36:	4413      	add	r3, r2
 800ce38:	ea23 0300 	bic.w	r3, r3, r0
 800ce3c:	e7ee      	b.n	800ce1c <round+0x28>
 800ce3e:	2a33      	cmp	r2, #51	@ 0x33
 800ce40:	dd0a      	ble.n	800ce58 <round+0x64>
 800ce42:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800ce46:	d104      	bne.n	800ce52 <round+0x5e>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	f7f3 f98f 	bl	800016c <__adddf3>
 800ce4e:	4604      	mov	r4, r0
 800ce50:	460d      	mov	r5, r1
 800ce52:	4620      	mov	r0, r4
 800ce54:	4629      	mov	r1, r5
 800ce56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce58:	f04f 30ff 	mov.w	r0, #4294967295
 800ce5c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800ce60:	40f8      	lsrs	r0, r7
 800ce62:	4220      	tst	r0, r4
 800ce64:	d0f5      	beq.n	800ce52 <round+0x5e>
 800ce66:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	408a      	lsls	r2, r1
 800ce6e:	1912      	adds	r2, r2, r4
 800ce70:	bf28      	it	cs
 800ce72:	3301      	addcs	r3, #1
 800ce74:	ea22 0200 	bic.w	r2, r2, r0
 800ce78:	e7d1      	b.n	800ce1e <round+0x2a>
 800ce7a:	bf00      	nop
 800ce7c:	000fffff 	.word	0x000fffff

0800ce80 <__ieee754_pow>:
 800ce80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce84:	b091      	sub	sp, #68	@ 0x44
 800ce86:	e9cd 2300 	strd	r2, r3, [sp]
 800ce8a:	468b      	mov	fp, r1
 800ce8c:	e9dd 1800 	ldrd	r1, r8, [sp]
 800ce90:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800ce94:	4682      	mov	sl, r0
 800ce96:	ea57 0001 	orrs.w	r0, r7, r1
 800ce9a:	d112      	bne.n	800cec2 <__ieee754_pow+0x42>
 800ce9c:	4653      	mov	r3, sl
 800ce9e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800cea2:	18db      	adds	r3, r3, r3
 800cea4:	4152      	adcs	r2, r2
 800cea6:	4298      	cmp	r0, r3
 800cea8:	4b91      	ldr	r3, [pc, #580]	@ (800d0f0 <__ieee754_pow+0x270>)
 800ceaa:	4193      	sbcs	r3, r2
 800ceac:	f080 84ce 	bcs.w	800d84c <__ieee754_pow+0x9cc>
 800ceb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ceb4:	4650      	mov	r0, sl
 800ceb6:	4659      	mov	r1, fp
 800ceb8:	f7f3 f958 	bl	800016c <__adddf3>
 800cebc:	b011      	add	sp, #68	@ 0x44
 800cebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec2:	4b8c      	ldr	r3, [pc, #560]	@ (800d0f4 <__ieee754_pow+0x274>)
 800cec4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800cec8:	429e      	cmp	r6, r3
 800ceca:	465d      	mov	r5, fp
 800cecc:	46d1      	mov	r9, sl
 800cece:	d807      	bhi.n	800cee0 <__ieee754_pow+0x60>
 800ced0:	d102      	bne.n	800ced8 <__ieee754_pow+0x58>
 800ced2:	f1ba 0f00 	cmp.w	sl, #0
 800ced6:	d1eb      	bne.n	800ceb0 <__ieee754_pow+0x30>
 800ced8:	429f      	cmp	r7, r3
 800ceda:	d801      	bhi.n	800cee0 <__ieee754_pow+0x60>
 800cedc:	d10f      	bne.n	800cefe <__ieee754_pow+0x7e>
 800cede:	b171      	cbz	r1, 800cefe <__ieee754_pow+0x7e>
 800cee0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800cee4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800cee8:	ea55 0509 	orrs.w	r5, r5, r9
 800ceec:	d1e0      	bne.n	800ceb0 <__ieee754_pow+0x30>
 800ceee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cef2:	18db      	adds	r3, r3, r3
 800cef4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800cef8:	4152      	adcs	r2, r2
 800cefa:	429d      	cmp	r5, r3
 800cefc:	e7d4      	b.n	800cea8 <__ieee754_pow+0x28>
 800cefe:	2d00      	cmp	r5, #0
 800cf00:	4633      	mov	r3, r6
 800cf02:	da39      	bge.n	800cf78 <__ieee754_pow+0xf8>
 800cf04:	4a7c      	ldr	r2, [pc, #496]	@ (800d0f8 <__ieee754_pow+0x278>)
 800cf06:	4297      	cmp	r7, r2
 800cf08:	d84e      	bhi.n	800cfa8 <__ieee754_pow+0x128>
 800cf0a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800cf0e:	4297      	cmp	r7, r2
 800cf10:	f240 84ab 	bls.w	800d86a <__ieee754_pow+0x9ea>
 800cf14:	153a      	asrs	r2, r7, #20
 800cf16:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800cf1a:	2a14      	cmp	r2, #20
 800cf1c:	dd0f      	ble.n	800cf3e <__ieee754_pow+0xbe>
 800cf1e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800cf22:	fa21 f402 	lsr.w	r4, r1, r2
 800cf26:	fa04 f202 	lsl.w	r2, r4, r2
 800cf2a:	428a      	cmp	r2, r1
 800cf2c:	f040 849d 	bne.w	800d86a <__ieee754_pow+0x9ea>
 800cf30:	f004 0401 	and.w	r4, r4, #1
 800cf34:	f1c4 0402 	rsb	r4, r4, #2
 800cf38:	2900      	cmp	r1, #0
 800cf3a:	d15a      	bne.n	800cff2 <__ieee754_pow+0x172>
 800cf3c:	e00e      	b.n	800cf5c <__ieee754_pow+0xdc>
 800cf3e:	2900      	cmp	r1, #0
 800cf40:	d156      	bne.n	800cff0 <__ieee754_pow+0x170>
 800cf42:	f1c2 0214 	rsb	r2, r2, #20
 800cf46:	fa47 f402 	asr.w	r4, r7, r2
 800cf4a:	fa04 f202 	lsl.w	r2, r4, r2
 800cf4e:	42ba      	cmp	r2, r7
 800cf50:	f040 8488 	bne.w	800d864 <__ieee754_pow+0x9e4>
 800cf54:	f004 0401 	and.w	r4, r4, #1
 800cf58:	f1c4 0402 	rsb	r4, r4, #2
 800cf5c:	4a67      	ldr	r2, [pc, #412]	@ (800d0fc <__ieee754_pow+0x27c>)
 800cf5e:	4297      	cmp	r7, r2
 800cf60:	d130      	bne.n	800cfc4 <__ieee754_pow+0x144>
 800cf62:	f1b8 0f00 	cmp.w	r8, #0
 800cf66:	f280 8479 	bge.w	800d85c <__ieee754_pow+0x9dc>
 800cf6a:	4652      	mov	r2, sl
 800cf6c:	465b      	mov	r3, fp
 800cf6e:	2000      	movs	r0, #0
 800cf70:	4962      	ldr	r1, [pc, #392]	@ (800d0fc <__ieee754_pow+0x27c>)
 800cf72:	f7f3 fbdb 	bl	800072c <__aeabi_ddiv>
 800cf76:	e7a1      	b.n	800cebc <__ieee754_pow+0x3c>
 800cf78:	2400      	movs	r4, #0
 800cf7a:	2900      	cmp	r1, #0
 800cf7c:	d139      	bne.n	800cff2 <__ieee754_pow+0x172>
 800cf7e:	4a5d      	ldr	r2, [pc, #372]	@ (800d0f4 <__ieee754_pow+0x274>)
 800cf80:	4297      	cmp	r7, r2
 800cf82:	d1eb      	bne.n	800cf5c <__ieee754_pow+0xdc>
 800cf84:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800cf88:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800cf8c:	ea53 0309 	orrs.w	r3, r3, r9
 800cf90:	f000 845c 	beq.w	800d84c <__ieee754_pow+0x9cc>
 800cf94:	4b5a      	ldr	r3, [pc, #360]	@ (800d100 <__ieee754_pow+0x280>)
 800cf96:	429e      	cmp	r6, r3
 800cf98:	d908      	bls.n	800cfac <__ieee754_pow+0x12c>
 800cf9a:	f1b8 0f00 	cmp.w	r8, #0
 800cf9e:	f2c0 8459 	blt.w	800d854 <__ieee754_pow+0x9d4>
 800cfa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfa6:	e789      	b.n	800cebc <__ieee754_pow+0x3c>
 800cfa8:	2402      	movs	r4, #2
 800cfaa:	e7e6      	b.n	800cf7a <__ieee754_pow+0xfa>
 800cfac:	f1b8 0f00 	cmp.w	r8, #0
 800cfb0:	f04f 0000 	mov.w	r0, #0
 800cfb4:	f04f 0100 	mov.w	r1, #0
 800cfb8:	da80      	bge.n	800cebc <__ieee754_pow+0x3c>
 800cfba:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cfbe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cfc2:	e77b      	b.n	800cebc <__ieee754_pow+0x3c>
 800cfc4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800cfc8:	d106      	bne.n	800cfd8 <__ieee754_pow+0x158>
 800cfca:	4652      	mov	r2, sl
 800cfcc:	465b      	mov	r3, fp
 800cfce:	4650      	mov	r0, sl
 800cfd0:	4659      	mov	r1, fp
 800cfd2:	f7f3 fa81 	bl	80004d8 <__aeabi_dmul>
 800cfd6:	e771      	b.n	800cebc <__ieee754_pow+0x3c>
 800cfd8:	4a4a      	ldr	r2, [pc, #296]	@ (800d104 <__ieee754_pow+0x284>)
 800cfda:	4590      	cmp	r8, r2
 800cfdc:	d109      	bne.n	800cff2 <__ieee754_pow+0x172>
 800cfde:	2d00      	cmp	r5, #0
 800cfe0:	db07      	blt.n	800cff2 <__ieee754_pow+0x172>
 800cfe2:	4650      	mov	r0, sl
 800cfe4:	4659      	mov	r1, fp
 800cfe6:	b011      	add	sp, #68	@ 0x44
 800cfe8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfec:	f000 bd12 	b.w	800da14 <__ieee754_sqrt>
 800cff0:	2400      	movs	r4, #0
 800cff2:	4650      	mov	r0, sl
 800cff4:	4659      	mov	r1, fp
 800cff6:	9302      	str	r3, [sp, #8]
 800cff8:	f000 fc6a 	bl	800d8d0 <fabs>
 800cffc:	9b02      	ldr	r3, [sp, #8]
 800cffe:	f1b9 0f00 	cmp.w	r9, #0
 800d002:	d127      	bne.n	800d054 <__ieee754_pow+0x1d4>
 800d004:	4a3d      	ldr	r2, [pc, #244]	@ (800d0fc <__ieee754_pow+0x27c>)
 800d006:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800d00a:	4594      	cmp	ip, r2
 800d00c:	d000      	beq.n	800d010 <__ieee754_pow+0x190>
 800d00e:	bb0e      	cbnz	r6, 800d054 <__ieee754_pow+0x1d4>
 800d010:	f1b8 0f00 	cmp.w	r8, #0
 800d014:	da05      	bge.n	800d022 <__ieee754_pow+0x1a2>
 800d016:	4602      	mov	r2, r0
 800d018:	460b      	mov	r3, r1
 800d01a:	2000      	movs	r0, #0
 800d01c:	4937      	ldr	r1, [pc, #220]	@ (800d0fc <__ieee754_pow+0x27c>)
 800d01e:	f7f3 fb85 	bl	800072c <__aeabi_ddiv>
 800d022:	2d00      	cmp	r5, #0
 800d024:	f6bf af4a 	bge.w	800cebc <__ieee754_pow+0x3c>
 800d028:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800d02c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800d030:	4326      	orrs	r6, r4
 800d032:	d108      	bne.n	800d046 <__ieee754_pow+0x1c6>
 800d034:	4602      	mov	r2, r0
 800d036:	460b      	mov	r3, r1
 800d038:	4610      	mov	r0, r2
 800d03a:	4619      	mov	r1, r3
 800d03c:	f7f3 f894 	bl	8000168 <__aeabi_dsub>
 800d040:	4602      	mov	r2, r0
 800d042:	460b      	mov	r3, r1
 800d044:	e795      	b.n	800cf72 <__ieee754_pow+0xf2>
 800d046:	2c01      	cmp	r4, #1
 800d048:	f47f af38 	bne.w	800cebc <__ieee754_pow+0x3c>
 800d04c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d050:	4619      	mov	r1, r3
 800d052:	e733      	b.n	800cebc <__ieee754_pow+0x3c>
 800d054:	0fea      	lsrs	r2, r5, #31
 800d056:	3a01      	subs	r2, #1
 800d058:	ea52 0c04 	orrs.w	ip, r2, r4
 800d05c:	d102      	bne.n	800d064 <__ieee754_pow+0x1e4>
 800d05e:	4652      	mov	r2, sl
 800d060:	465b      	mov	r3, fp
 800d062:	e7e9      	b.n	800d038 <__ieee754_pow+0x1b8>
 800d064:	f04f 0900 	mov.w	r9, #0
 800d068:	3c01      	subs	r4, #1
 800d06a:	4314      	orrs	r4, r2
 800d06c:	bf14      	ite	ne
 800d06e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800d0fc <__ieee754_pow+0x27c>
 800d072:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800d108 <__ieee754_pow+0x288>
 800d076:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800d07a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800d07e:	f240 8107 	bls.w	800d290 <__ieee754_pow+0x410>
 800d082:	4b22      	ldr	r3, [pc, #136]	@ (800d10c <__ieee754_pow+0x28c>)
 800d084:	429f      	cmp	r7, r3
 800d086:	4b1e      	ldr	r3, [pc, #120]	@ (800d100 <__ieee754_pow+0x280>)
 800d088:	d913      	bls.n	800d0b2 <__ieee754_pow+0x232>
 800d08a:	429e      	cmp	r6, r3
 800d08c:	d808      	bhi.n	800d0a0 <__ieee754_pow+0x220>
 800d08e:	f1b8 0f00 	cmp.w	r8, #0
 800d092:	da08      	bge.n	800d0a6 <__ieee754_pow+0x226>
 800d094:	2000      	movs	r0, #0
 800d096:	b011      	add	sp, #68	@ 0x44
 800d098:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09c:	f000 bcb4 	b.w	800da08 <__math_oflow>
 800d0a0:	f1b8 0f00 	cmp.w	r8, #0
 800d0a4:	dcf6      	bgt.n	800d094 <__ieee754_pow+0x214>
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	b011      	add	sp, #68	@ 0x44
 800d0aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ae:	f000 bca6 	b.w	800d9fe <__math_uflow>
 800d0b2:	429e      	cmp	r6, r3
 800d0b4:	d20c      	bcs.n	800d0d0 <__ieee754_pow+0x250>
 800d0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f7f3 fc7d 	bl	80009bc <__aeabi_dcmplt>
 800d0c2:	3800      	subs	r0, #0
 800d0c4:	bf18      	it	ne
 800d0c6:	2001      	movne	r0, #1
 800d0c8:	f1b8 0f00 	cmp.w	r8, #0
 800d0cc:	daec      	bge.n	800d0a8 <__ieee754_pow+0x228>
 800d0ce:	e7e2      	b.n	800d096 <__ieee754_pow+0x216>
 800d0d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d0fc <__ieee754_pow+0x27c>)
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	429e      	cmp	r6, r3
 800d0d6:	d91b      	bls.n	800d110 <__ieee754_pow+0x290>
 800d0d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0dc:	2300      	movs	r3, #0
 800d0de:	f7f3 fc6d 	bl	80009bc <__aeabi_dcmplt>
 800d0e2:	3800      	subs	r0, #0
 800d0e4:	bf18      	it	ne
 800d0e6:	2001      	movne	r0, #1
 800d0e8:	f1b8 0f00 	cmp.w	r8, #0
 800d0ec:	dcd3      	bgt.n	800d096 <__ieee754_pow+0x216>
 800d0ee:	e7db      	b.n	800d0a8 <__ieee754_pow+0x228>
 800d0f0:	fff00000 	.word	0xfff00000
 800d0f4:	7ff00000 	.word	0x7ff00000
 800d0f8:	433fffff 	.word	0x433fffff
 800d0fc:	3ff00000 	.word	0x3ff00000
 800d100:	3fefffff 	.word	0x3fefffff
 800d104:	3fe00000 	.word	0x3fe00000
 800d108:	bff00000 	.word	0xbff00000
 800d10c:	43f00000 	.word	0x43f00000
 800d110:	4b5b      	ldr	r3, [pc, #364]	@ (800d280 <__ieee754_pow+0x400>)
 800d112:	f7f3 f829 	bl	8000168 <__aeabi_dsub>
 800d116:	a352      	add	r3, pc, #328	@ (adr r3, 800d260 <__ieee754_pow+0x3e0>)
 800d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11c:	4604      	mov	r4, r0
 800d11e:	460d      	mov	r5, r1
 800d120:	f7f3 f9da 	bl	80004d8 <__aeabi_dmul>
 800d124:	a350      	add	r3, pc, #320	@ (adr r3, 800d268 <__ieee754_pow+0x3e8>)
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	4606      	mov	r6, r0
 800d12c:	460f      	mov	r7, r1
 800d12e:	4620      	mov	r0, r4
 800d130:	4629      	mov	r1, r5
 800d132:	f7f3 f9d1 	bl	80004d8 <__aeabi_dmul>
 800d136:	2200      	movs	r2, #0
 800d138:	4682      	mov	sl, r0
 800d13a:	468b      	mov	fp, r1
 800d13c:	4620      	mov	r0, r4
 800d13e:	4629      	mov	r1, r5
 800d140:	4b50      	ldr	r3, [pc, #320]	@ (800d284 <__ieee754_pow+0x404>)
 800d142:	f7f3 f9c9 	bl	80004d8 <__aeabi_dmul>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	a149      	add	r1, pc, #292	@ (adr r1, 800d270 <__ieee754_pow+0x3f0>)
 800d14c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d150:	f7f3 f80a 	bl	8000168 <__aeabi_dsub>
 800d154:	4622      	mov	r2, r4
 800d156:	462b      	mov	r3, r5
 800d158:	f7f3 f9be 	bl	80004d8 <__aeabi_dmul>
 800d15c:	4602      	mov	r2, r0
 800d15e:	460b      	mov	r3, r1
 800d160:	2000      	movs	r0, #0
 800d162:	4949      	ldr	r1, [pc, #292]	@ (800d288 <__ieee754_pow+0x408>)
 800d164:	f7f3 f800 	bl	8000168 <__aeabi_dsub>
 800d168:	4622      	mov	r2, r4
 800d16a:	4680      	mov	r8, r0
 800d16c:	4689      	mov	r9, r1
 800d16e:	462b      	mov	r3, r5
 800d170:	4620      	mov	r0, r4
 800d172:	4629      	mov	r1, r5
 800d174:	f7f3 f9b0 	bl	80004d8 <__aeabi_dmul>
 800d178:	4602      	mov	r2, r0
 800d17a:	460b      	mov	r3, r1
 800d17c:	4640      	mov	r0, r8
 800d17e:	4649      	mov	r1, r9
 800d180:	f7f3 f9aa 	bl	80004d8 <__aeabi_dmul>
 800d184:	a33c      	add	r3, pc, #240	@ (adr r3, 800d278 <__ieee754_pow+0x3f8>)
 800d186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18a:	f7f3 f9a5 	bl	80004d8 <__aeabi_dmul>
 800d18e:	4602      	mov	r2, r0
 800d190:	460b      	mov	r3, r1
 800d192:	4650      	mov	r0, sl
 800d194:	4659      	mov	r1, fp
 800d196:	f7f2 ffe7 	bl	8000168 <__aeabi_dsub>
 800d19a:	2400      	movs	r4, #0
 800d19c:	4602      	mov	r2, r0
 800d19e:	460b      	mov	r3, r1
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	4689      	mov	r9, r1
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	4639      	mov	r1, r7
 800d1a8:	f7f2 ffe0 	bl	800016c <__adddf3>
 800d1ac:	4632      	mov	r2, r6
 800d1ae:	463b      	mov	r3, r7
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	460d      	mov	r5, r1
 800d1b4:	f7f2 ffd8 	bl	8000168 <__aeabi_dsub>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4640      	mov	r0, r8
 800d1be:	4649      	mov	r1, r9
 800d1c0:	f7f2 ffd2 	bl	8000168 <__aeabi_dsub>
 800d1c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	9304      	str	r3, [sp, #16]
 800d1d0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d1d4:	4606      	mov	r6, r0
 800d1d6:	460f      	mov	r7, r1
 800d1d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1dc:	4652      	mov	r2, sl
 800d1de:	465b      	mov	r3, fp
 800d1e0:	f7f2 ffc2 	bl	8000168 <__aeabi_dsub>
 800d1e4:	4622      	mov	r2, r4
 800d1e6:	462b      	mov	r3, r5
 800d1e8:	f7f3 f976 	bl	80004d8 <__aeabi_dmul>
 800d1ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1f0:	4680      	mov	r8, r0
 800d1f2:	4689      	mov	r9, r1
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	f7f3 f96e 	bl	80004d8 <__aeabi_dmul>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	4640      	mov	r0, r8
 800d202:	4649      	mov	r1, r9
 800d204:	f7f2 ffb2 	bl	800016c <__adddf3>
 800d208:	4652      	mov	r2, sl
 800d20a:	465b      	mov	r3, fp
 800d20c:	4606      	mov	r6, r0
 800d20e:	460f      	mov	r7, r1
 800d210:	4620      	mov	r0, r4
 800d212:	4629      	mov	r1, r5
 800d214:	f7f3 f960 	bl	80004d8 <__aeabi_dmul>
 800d218:	460b      	mov	r3, r1
 800d21a:	4602      	mov	r2, r0
 800d21c:	4680      	mov	r8, r0
 800d21e:	4689      	mov	r9, r1
 800d220:	4630      	mov	r0, r6
 800d222:	4639      	mov	r1, r7
 800d224:	f7f2 ffa2 	bl	800016c <__adddf3>
 800d228:	4b18      	ldr	r3, [pc, #96]	@ (800d28c <__ieee754_pow+0x40c>)
 800d22a:	4604      	mov	r4, r0
 800d22c:	4299      	cmp	r1, r3
 800d22e:	460d      	mov	r5, r1
 800d230:	468a      	mov	sl, r1
 800d232:	468b      	mov	fp, r1
 800d234:	f340 82e0 	ble.w	800d7f8 <__ieee754_pow+0x978>
 800d238:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800d23c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800d240:	4303      	orrs	r3, r0
 800d242:	f000 81df 	beq.w	800d604 <__ieee754_pow+0x784>
 800d246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d24a:	2200      	movs	r2, #0
 800d24c:	2300      	movs	r3, #0
 800d24e:	f7f3 fbb5 	bl	80009bc <__aeabi_dcmplt>
 800d252:	3800      	subs	r0, #0
 800d254:	bf18      	it	ne
 800d256:	2001      	movne	r0, #1
 800d258:	e71d      	b.n	800d096 <__ieee754_pow+0x216>
 800d25a:	bf00      	nop
 800d25c:	f3af 8000 	nop.w
 800d260:	60000000 	.word	0x60000000
 800d264:	3ff71547 	.word	0x3ff71547
 800d268:	f85ddf44 	.word	0xf85ddf44
 800d26c:	3e54ae0b 	.word	0x3e54ae0b
 800d270:	55555555 	.word	0x55555555
 800d274:	3fd55555 	.word	0x3fd55555
 800d278:	652b82fe 	.word	0x652b82fe
 800d27c:	3ff71547 	.word	0x3ff71547
 800d280:	3ff00000 	.word	0x3ff00000
 800d284:	3fd00000 	.word	0x3fd00000
 800d288:	3fe00000 	.word	0x3fe00000
 800d28c:	408fffff 	.word	0x408fffff
 800d290:	4ad3      	ldr	r2, [pc, #844]	@ (800d5e0 <__ieee754_pow+0x760>)
 800d292:	402a      	ands	r2, r5
 800d294:	2a00      	cmp	r2, #0
 800d296:	f040 817a 	bne.w	800d58e <__ieee754_pow+0x70e>
 800d29a:	4bd2      	ldr	r3, [pc, #840]	@ (800d5e4 <__ieee754_pow+0x764>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	f7f3 f91b 	bl	80004d8 <__aeabi_dmul>
 800d2a2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	151a      	asrs	r2, r3, #20
 800d2aa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800d2ae:	4422      	add	r2, r4
 800d2b0:	920a      	str	r2, [sp, #40]	@ 0x28
 800d2b2:	4acd      	ldr	r2, [pc, #820]	@ (800d5e8 <__ieee754_pow+0x768>)
 800d2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2b8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d2c2:	dd08      	ble.n	800d2d6 <__ieee754_pow+0x456>
 800d2c4:	4ac9      	ldr	r2, [pc, #804]	@ (800d5ec <__ieee754_pow+0x76c>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	f340 8163 	ble.w	800d592 <__ieee754_pow+0x712>
 800d2cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2ce:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2d6:	2600      	movs	r6, #0
 800d2d8:	00f3      	lsls	r3, r6, #3
 800d2da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2dc:	4bc4      	ldr	r3, [pc, #784]	@ (800d5f0 <__ieee754_pow+0x770>)
 800d2de:	4629      	mov	r1, r5
 800d2e0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d2e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d2ee:	4623      	mov	r3, r4
 800d2f0:	4682      	mov	sl, r0
 800d2f2:	f7f2 ff39 	bl	8000168 <__aeabi_dsub>
 800d2f6:	4652      	mov	r2, sl
 800d2f8:	462b      	mov	r3, r5
 800d2fa:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800d2fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d302:	f7f2 ff33 	bl	800016c <__adddf3>
 800d306:	4602      	mov	r2, r0
 800d308:	460b      	mov	r3, r1
 800d30a:	2000      	movs	r0, #0
 800d30c:	49b9      	ldr	r1, [pc, #740]	@ (800d5f4 <__ieee754_pow+0x774>)
 800d30e:	f7f3 fa0d 	bl	800072c <__aeabi_ddiv>
 800d312:	4602      	mov	r2, r0
 800d314:	460b      	mov	r3, r1
 800d316:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d31a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d31e:	f7f3 f8db 	bl	80004d8 <__aeabi_dmul>
 800d322:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d326:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d32a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d32e:	2300      	movs	r3, #0
 800d330:	2200      	movs	r2, #0
 800d332:	46ab      	mov	fp, r5
 800d334:	106d      	asrs	r5, r5, #1
 800d336:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800d33a:	9304      	str	r3, [sp, #16]
 800d33c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800d340:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d344:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d348:	4640      	mov	r0, r8
 800d34a:	4649      	mov	r1, r9
 800d34c:	4614      	mov	r4, r2
 800d34e:	461d      	mov	r5, r3
 800d350:	f7f3 f8c2 	bl	80004d8 <__aeabi_dmul>
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d35c:	f7f2 ff04 	bl	8000168 <__aeabi_dsub>
 800d360:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d364:	4606      	mov	r6, r0
 800d366:	460f      	mov	r7, r1
 800d368:	4620      	mov	r0, r4
 800d36a:	4629      	mov	r1, r5
 800d36c:	f7f2 fefc 	bl	8000168 <__aeabi_dsub>
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	4650      	mov	r0, sl
 800d376:	4659      	mov	r1, fp
 800d378:	f7f2 fef6 	bl	8000168 <__aeabi_dsub>
 800d37c:	4642      	mov	r2, r8
 800d37e:	464b      	mov	r3, r9
 800d380:	f7f3 f8aa 	bl	80004d8 <__aeabi_dmul>
 800d384:	4602      	mov	r2, r0
 800d386:	460b      	mov	r3, r1
 800d388:	4630      	mov	r0, r6
 800d38a:	4639      	mov	r1, r7
 800d38c:	f7f2 feec 	bl	8000168 <__aeabi_dsub>
 800d390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d394:	f7f3 f8a0 	bl	80004d8 <__aeabi_dmul>
 800d398:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d39c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	f7f3 f898 	bl	80004d8 <__aeabi_dmul>
 800d3a8:	a37b      	add	r3, pc, #492	@ (adr r3, 800d598 <__ieee754_pow+0x718>)
 800d3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	460d      	mov	r5, r1
 800d3b2:	f7f3 f891 	bl	80004d8 <__aeabi_dmul>
 800d3b6:	a37a      	add	r3, pc, #488	@ (adr r3, 800d5a0 <__ieee754_pow+0x720>)
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	f7f2 fed6 	bl	800016c <__adddf3>
 800d3c0:	4622      	mov	r2, r4
 800d3c2:	462b      	mov	r3, r5
 800d3c4:	f7f3 f888 	bl	80004d8 <__aeabi_dmul>
 800d3c8:	a377      	add	r3, pc, #476	@ (adr r3, 800d5a8 <__ieee754_pow+0x728>)
 800d3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ce:	f7f2 fecd 	bl	800016c <__adddf3>
 800d3d2:	4622      	mov	r2, r4
 800d3d4:	462b      	mov	r3, r5
 800d3d6:	f7f3 f87f 	bl	80004d8 <__aeabi_dmul>
 800d3da:	a375      	add	r3, pc, #468	@ (adr r3, 800d5b0 <__ieee754_pow+0x730>)
 800d3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e0:	f7f2 fec4 	bl	800016c <__adddf3>
 800d3e4:	4622      	mov	r2, r4
 800d3e6:	462b      	mov	r3, r5
 800d3e8:	f7f3 f876 	bl	80004d8 <__aeabi_dmul>
 800d3ec:	a372      	add	r3, pc, #456	@ (adr r3, 800d5b8 <__ieee754_pow+0x738>)
 800d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f2:	f7f2 febb 	bl	800016c <__adddf3>
 800d3f6:	4622      	mov	r2, r4
 800d3f8:	462b      	mov	r3, r5
 800d3fa:	f7f3 f86d 	bl	80004d8 <__aeabi_dmul>
 800d3fe:	a370      	add	r3, pc, #448	@ (adr r3, 800d5c0 <__ieee754_pow+0x740>)
 800d400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d404:	f7f2 feb2 	bl	800016c <__adddf3>
 800d408:	4622      	mov	r2, r4
 800d40a:	4606      	mov	r6, r0
 800d40c:	460f      	mov	r7, r1
 800d40e:	462b      	mov	r3, r5
 800d410:	4620      	mov	r0, r4
 800d412:	4629      	mov	r1, r5
 800d414:	f7f3 f860 	bl	80004d8 <__aeabi_dmul>
 800d418:	4602      	mov	r2, r0
 800d41a:	460b      	mov	r3, r1
 800d41c:	4630      	mov	r0, r6
 800d41e:	4639      	mov	r1, r7
 800d420:	f7f3 f85a 	bl	80004d8 <__aeabi_dmul>
 800d424:	4604      	mov	r4, r0
 800d426:	460d      	mov	r5, r1
 800d428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d42c:	4642      	mov	r2, r8
 800d42e:	464b      	mov	r3, r9
 800d430:	f7f2 fe9c 	bl	800016c <__adddf3>
 800d434:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d438:	f7f3 f84e 	bl	80004d8 <__aeabi_dmul>
 800d43c:	4622      	mov	r2, r4
 800d43e:	462b      	mov	r3, r5
 800d440:	f7f2 fe94 	bl	800016c <__adddf3>
 800d444:	4642      	mov	r2, r8
 800d446:	4682      	mov	sl, r0
 800d448:	468b      	mov	fp, r1
 800d44a:	464b      	mov	r3, r9
 800d44c:	4640      	mov	r0, r8
 800d44e:	4649      	mov	r1, r9
 800d450:	f7f3 f842 	bl	80004d8 <__aeabi_dmul>
 800d454:	2200      	movs	r2, #0
 800d456:	4b68      	ldr	r3, [pc, #416]	@ (800d5f8 <__ieee754_pow+0x778>)
 800d458:	4606      	mov	r6, r0
 800d45a:	460f      	mov	r7, r1
 800d45c:	f7f2 fe86 	bl	800016c <__adddf3>
 800d460:	4652      	mov	r2, sl
 800d462:	465b      	mov	r3, fp
 800d464:	f7f2 fe82 	bl	800016c <__adddf3>
 800d468:	2400      	movs	r4, #0
 800d46a:	460d      	mov	r5, r1
 800d46c:	4622      	mov	r2, r4
 800d46e:	460b      	mov	r3, r1
 800d470:	4640      	mov	r0, r8
 800d472:	4649      	mov	r1, r9
 800d474:	f7f3 f830 	bl	80004d8 <__aeabi_dmul>
 800d478:	2200      	movs	r2, #0
 800d47a:	4680      	mov	r8, r0
 800d47c:	4689      	mov	r9, r1
 800d47e:	4620      	mov	r0, r4
 800d480:	4629      	mov	r1, r5
 800d482:	4b5d      	ldr	r3, [pc, #372]	@ (800d5f8 <__ieee754_pow+0x778>)
 800d484:	f7f2 fe70 	bl	8000168 <__aeabi_dsub>
 800d488:	4632      	mov	r2, r6
 800d48a:	463b      	mov	r3, r7
 800d48c:	f7f2 fe6c 	bl	8000168 <__aeabi_dsub>
 800d490:	4602      	mov	r2, r0
 800d492:	460b      	mov	r3, r1
 800d494:	4650      	mov	r0, sl
 800d496:	4659      	mov	r1, fp
 800d498:	f7f2 fe66 	bl	8000168 <__aeabi_dsub>
 800d49c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4a0:	f7f3 f81a 	bl	80004d8 <__aeabi_dmul>
 800d4a4:	4622      	mov	r2, r4
 800d4a6:	4606      	mov	r6, r0
 800d4a8:	460f      	mov	r7, r1
 800d4aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d4ae:	462b      	mov	r3, r5
 800d4b0:	f7f3 f812 	bl	80004d8 <__aeabi_dmul>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	4639      	mov	r1, r7
 800d4bc:	f7f2 fe56 	bl	800016c <__adddf3>
 800d4c0:	2400      	movs	r4, #0
 800d4c2:	4606      	mov	r6, r0
 800d4c4:	460f      	mov	r7, r1
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	4640      	mov	r0, r8
 800d4cc:	4649      	mov	r1, r9
 800d4ce:	f7f2 fe4d 	bl	800016c <__adddf3>
 800d4d2:	a33d      	add	r3, pc, #244	@ (adr r3, 800d5c8 <__ieee754_pow+0x748>)
 800d4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d8:	4620      	mov	r0, r4
 800d4da:	460d      	mov	r5, r1
 800d4dc:	f7f2 fffc 	bl	80004d8 <__aeabi_dmul>
 800d4e0:	4642      	mov	r2, r8
 800d4e2:	464b      	mov	r3, r9
 800d4e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	f7f2 fe3c 	bl	8000168 <__aeabi_dsub>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	4639      	mov	r1, r7
 800d4f8:	f7f2 fe36 	bl	8000168 <__aeabi_dsub>
 800d4fc:	a334      	add	r3, pc, #208	@ (adr r3, 800d5d0 <__ieee754_pow+0x750>)
 800d4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d502:	f7f2 ffe9 	bl	80004d8 <__aeabi_dmul>
 800d506:	a334      	add	r3, pc, #208	@ (adr r3, 800d5d8 <__ieee754_pow+0x758>)
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	4606      	mov	r6, r0
 800d50e:	460f      	mov	r7, r1
 800d510:	4620      	mov	r0, r4
 800d512:	4629      	mov	r1, r5
 800d514:	f7f2 ffe0 	bl	80004d8 <__aeabi_dmul>
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	4630      	mov	r0, r6
 800d51e:	4639      	mov	r1, r7
 800d520:	f7f2 fe24 	bl	800016c <__adddf3>
 800d524:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d526:	4b35      	ldr	r3, [pc, #212]	@ (800d5fc <__ieee754_pow+0x77c>)
 800d528:	2400      	movs	r4, #0
 800d52a:	4413      	add	r3, r2
 800d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d530:	f7f2 fe1c 	bl	800016c <__adddf3>
 800d534:	4682      	mov	sl, r0
 800d536:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d538:	468b      	mov	fp, r1
 800d53a:	f7f2 ff63 	bl	8000404 <__aeabi_i2d>
 800d53e:	4606      	mov	r6, r0
 800d540:	460f      	mov	r7, r1
 800d542:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d544:	4b2e      	ldr	r3, [pc, #184]	@ (800d600 <__ieee754_pow+0x780>)
 800d546:	4413      	add	r3, r2
 800d548:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d54c:	4652      	mov	r2, sl
 800d54e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d552:	465b      	mov	r3, fp
 800d554:	f7f2 fe0a 	bl	800016c <__adddf3>
 800d558:	4642      	mov	r2, r8
 800d55a:	464b      	mov	r3, r9
 800d55c:	f7f2 fe06 	bl	800016c <__adddf3>
 800d560:	4632      	mov	r2, r6
 800d562:	463b      	mov	r3, r7
 800d564:	f7f2 fe02 	bl	800016c <__adddf3>
 800d568:	4632      	mov	r2, r6
 800d56a:	463b      	mov	r3, r7
 800d56c:	4620      	mov	r0, r4
 800d56e:	460d      	mov	r5, r1
 800d570:	f7f2 fdfa 	bl	8000168 <__aeabi_dsub>
 800d574:	4642      	mov	r2, r8
 800d576:	464b      	mov	r3, r9
 800d578:	f7f2 fdf6 	bl	8000168 <__aeabi_dsub>
 800d57c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d580:	f7f2 fdf2 	bl	8000168 <__aeabi_dsub>
 800d584:	4602      	mov	r2, r0
 800d586:	460b      	mov	r3, r1
 800d588:	4650      	mov	r0, sl
 800d58a:	4659      	mov	r1, fp
 800d58c:	e618      	b.n	800d1c0 <__ieee754_pow+0x340>
 800d58e:	2400      	movs	r4, #0
 800d590:	e68a      	b.n	800d2a8 <__ieee754_pow+0x428>
 800d592:	2601      	movs	r6, #1
 800d594:	e6a0      	b.n	800d2d8 <__ieee754_pow+0x458>
 800d596:	bf00      	nop
 800d598:	4a454eef 	.word	0x4a454eef
 800d59c:	3fca7e28 	.word	0x3fca7e28
 800d5a0:	93c9db65 	.word	0x93c9db65
 800d5a4:	3fcd864a 	.word	0x3fcd864a
 800d5a8:	a91d4101 	.word	0xa91d4101
 800d5ac:	3fd17460 	.word	0x3fd17460
 800d5b0:	518f264d 	.word	0x518f264d
 800d5b4:	3fd55555 	.word	0x3fd55555
 800d5b8:	db6fabff 	.word	0xdb6fabff
 800d5bc:	3fdb6db6 	.word	0x3fdb6db6
 800d5c0:	33333303 	.word	0x33333303
 800d5c4:	3fe33333 	.word	0x3fe33333
 800d5c8:	e0000000 	.word	0xe0000000
 800d5cc:	3feec709 	.word	0x3feec709
 800d5d0:	dc3a03fd 	.word	0xdc3a03fd
 800d5d4:	3feec709 	.word	0x3feec709
 800d5d8:	145b01f5 	.word	0x145b01f5
 800d5dc:	be3e2fe0 	.word	0xbe3e2fe0
 800d5e0:	7ff00000 	.word	0x7ff00000
 800d5e4:	43400000 	.word	0x43400000
 800d5e8:	0003988e 	.word	0x0003988e
 800d5ec:	000bb679 	.word	0x000bb679
 800d5f0:	0800e348 	.word	0x0800e348
 800d5f4:	3ff00000 	.word	0x3ff00000
 800d5f8:	40080000 	.word	0x40080000
 800d5fc:	0800e328 	.word	0x0800e328
 800d600:	0800e338 	.word	0x0800e338
 800d604:	a39a      	add	r3, pc, #616	@ (adr r3, 800d870 <__ieee754_pow+0x9f0>)
 800d606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60a:	4630      	mov	r0, r6
 800d60c:	4639      	mov	r1, r7
 800d60e:	f7f2 fdad 	bl	800016c <__adddf3>
 800d612:	4642      	mov	r2, r8
 800d614:	e9cd 0100 	strd	r0, r1, [sp]
 800d618:	464b      	mov	r3, r9
 800d61a:	4620      	mov	r0, r4
 800d61c:	4629      	mov	r1, r5
 800d61e:	f7f2 fda3 	bl	8000168 <__aeabi_dsub>
 800d622:	4602      	mov	r2, r0
 800d624:	460b      	mov	r3, r1
 800d626:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d62a:	f7f3 f9e5 	bl	80009f8 <__aeabi_dcmpgt>
 800d62e:	2800      	cmp	r0, #0
 800d630:	f47f ae09 	bne.w	800d246 <__ieee754_pow+0x3c6>
 800d634:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d638:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d63c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800d640:	fa43 fa0a 	asr.w	sl, r3, sl
 800d644:	44da      	add	sl, fp
 800d646:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d64a:	489b      	ldr	r0, [pc, #620]	@ (800d8b8 <__ieee754_pow+0xa38>)
 800d64c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800d650:	4108      	asrs	r0, r1
 800d652:	ea00 030a 	and.w	r3, r0, sl
 800d656:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d65a:	f1c1 0114 	rsb	r1, r1, #20
 800d65e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800d662:	4640      	mov	r0, r8
 800d664:	fa4a fa01 	asr.w	sl, sl, r1
 800d668:	f1bb 0f00 	cmp.w	fp, #0
 800d66c:	4649      	mov	r1, r9
 800d66e:	f04f 0200 	mov.w	r2, #0
 800d672:	bfb8      	it	lt
 800d674:	f1ca 0a00 	rsblt	sl, sl, #0
 800d678:	f7f2 fd76 	bl	8000168 <__aeabi_dsub>
 800d67c:	4680      	mov	r8, r0
 800d67e:	4689      	mov	r9, r1
 800d680:	2400      	movs	r4, #0
 800d682:	4632      	mov	r2, r6
 800d684:	463b      	mov	r3, r7
 800d686:	4640      	mov	r0, r8
 800d688:	4649      	mov	r1, r9
 800d68a:	f7f2 fd6f 	bl	800016c <__adddf3>
 800d68e:	a37a      	add	r3, pc, #488	@ (adr r3, 800d878 <__ieee754_pow+0x9f8>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	4620      	mov	r0, r4
 800d696:	460d      	mov	r5, r1
 800d698:	f7f2 ff1e 	bl	80004d8 <__aeabi_dmul>
 800d69c:	4642      	mov	r2, r8
 800d69e:	464b      	mov	r3, r9
 800d6a0:	e9cd 0100 	strd	r0, r1, [sp]
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	4629      	mov	r1, r5
 800d6a8:	f7f2 fd5e 	bl	8000168 <__aeabi_dsub>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	4639      	mov	r1, r7
 800d6b4:	f7f2 fd58 	bl	8000168 <__aeabi_dsub>
 800d6b8:	a371      	add	r3, pc, #452	@ (adr r3, 800d880 <__ieee754_pow+0xa00>)
 800d6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6be:	f7f2 ff0b 	bl	80004d8 <__aeabi_dmul>
 800d6c2:	a371      	add	r3, pc, #452	@ (adr r3, 800d888 <__ieee754_pow+0xa08>)
 800d6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c8:	4680      	mov	r8, r0
 800d6ca:	4689      	mov	r9, r1
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	f7f2 ff02 	bl	80004d8 <__aeabi_dmul>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	4640      	mov	r0, r8
 800d6da:	4649      	mov	r1, r9
 800d6dc:	f7f2 fd46 	bl	800016c <__adddf3>
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	460d      	mov	r5, r1
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6ec:	f7f2 fd3e 	bl	800016c <__adddf3>
 800d6f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6f4:	4680      	mov	r8, r0
 800d6f6:	4689      	mov	r9, r1
 800d6f8:	f7f2 fd36 	bl	8000168 <__aeabi_dsub>
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	460b      	mov	r3, r1
 800d700:	4620      	mov	r0, r4
 800d702:	4629      	mov	r1, r5
 800d704:	f7f2 fd30 	bl	8000168 <__aeabi_dsub>
 800d708:	4642      	mov	r2, r8
 800d70a:	4606      	mov	r6, r0
 800d70c:	460f      	mov	r7, r1
 800d70e:	464b      	mov	r3, r9
 800d710:	4640      	mov	r0, r8
 800d712:	4649      	mov	r1, r9
 800d714:	f7f2 fee0 	bl	80004d8 <__aeabi_dmul>
 800d718:	a35d      	add	r3, pc, #372	@ (adr r3, 800d890 <__ieee754_pow+0xa10>)
 800d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71e:	4604      	mov	r4, r0
 800d720:	460d      	mov	r5, r1
 800d722:	f7f2 fed9 	bl	80004d8 <__aeabi_dmul>
 800d726:	a35c      	add	r3, pc, #368	@ (adr r3, 800d898 <__ieee754_pow+0xa18>)
 800d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72c:	f7f2 fd1c 	bl	8000168 <__aeabi_dsub>
 800d730:	4622      	mov	r2, r4
 800d732:	462b      	mov	r3, r5
 800d734:	f7f2 fed0 	bl	80004d8 <__aeabi_dmul>
 800d738:	a359      	add	r3, pc, #356	@ (adr r3, 800d8a0 <__ieee754_pow+0xa20>)
 800d73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73e:	f7f2 fd15 	bl	800016c <__adddf3>
 800d742:	4622      	mov	r2, r4
 800d744:	462b      	mov	r3, r5
 800d746:	f7f2 fec7 	bl	80004d8 <__aeabi_dmul>
 800d74a:	a357      	add	r3, pc, #348	@ (adr r3, 800d8a8 <__ieee754_pow+0xa28>)
 800d74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d750:	f7f2 fd0a 	bl	8000168 <__aeabi_dsub>
 800d754:	4622      	mov	r2, r4
 800d756:	462b      	mov	r3, r5
 800d758:	f7f2 febe 	bl	80004d8 <__aeabi_dmul>
 800d75c:	a354      	add	r3, pc, #336	@ (adr r3, 800d8b0 <__ieee754_pow+0xa30>)
 800d75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d762:	f7f2 fd03 	bl	800016c <__adddf3>
 800d766:	4622      	mov	r2, r4
 800d768:	462b      	mov	r3, r5
 800d76a:	f7f2 feb5 	bl	80004d8 <__aeabi_dmul>
 800d76e:	4602      	mov	r2, r0
 800d770:	460b      	mov	r3, r1
 800d772:	4640      	mov	r0, r8
 800d774:	4649      	mov	r1, r9
 800d776:	f7f2 fcf7 	bl	8000168 <__aeabi_dsub>
 800d77a:	4604      	mov	r4, r0
 800d77c:	460d      	mov	r5, r1
 800d77e:	4602      	mov	r2, r0
 800d780:	460b      	mov	r3, r1
 800d782:	4640      	mov	r0, r8
 800d784:	4649      	mov	r1, r9
 800d786:	f7f2 fea7 	bl	80004d8 <__aeabi_dmul>
 800d78a:	2200      	movs	r2, #0
 800d78c:	e9cd 0100 	strd	r0, r1, [sp]
 800d790:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d794:	4620      	mov	r0, r4
 800d796:	4629      	mov	r1, r5
 800d798:	f7f2 fce6 	bl	8000168 <__aeabi_dsub>
 800d79c:	4602      	mov	r2, r0
 800d79e:	460b      	mov	r3, r1
 800d7a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7a4:	f7f2 ffc2 	bl	800072c <__aeabi_ddiv>
 800d7a8:	4632      	mov	r2, r6
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	460d      	mov	r5, r1
 800d7ae:	463b      	mov	r3, r7
 800d7b0:	4640      	mov	r0, r8
 800d7b2:	4649      	mov	r1, r9
 800d7b4:	f7f2 fe90 	bl	80004d8 <__aeabi_dmul>
 800d7b8:	4632      	mov	r2, r6
 800d7ba:	463b      	mov	r3, r7
 800d7bc:	f7f2 fcd6 	bl	800016c <__adddf3>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	f7f2 fcce 	bl	8000168 <__aeabi_dsub>
 800d7cc:	4642      	mov	r2, r8
 800d7ce:	464b      	mov	r3, r9
 800d7d0:	f7f2 fcca 	bl	8000168 <__aeabi_dsub>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	2000      	movs	r0, #0
 800d7da:	4938      	ldr	r1, [pc, #224]	@ (800d8bc <__ieee754_pow+0xa3c>)
 800d7dc:	f7f2 fcc4 	bl	8000168 <__aeabi_dsub>
 800d7e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d7e4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800d7e8:	da2e      	bge.n	800d848 <__ieee754_pow+0x9c8>
 800d7ea:	4652      	mov	r2, sl
 800d7ec:	f000 f874 	bl	800d8d8 <scalbn>
 800d7f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7f4:	f7ff bbed 	b.w	800cfd2 <__ieee754_pow+0x152>
 800d7f8:	4c31      	ldr	r4, [pc, #196]	@ (800d8c0 <__ieee754_pow+0xa40>)
 800d7fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d7fe:	42a3      	cmp	r3, r4
 800d800:	d91a      	bls.n	800d838 <__ieee754_pow+0x9b8>
 800d802:	4b30      	ldr	r3, [pc, #192]	@ (800d8c4 <__ieee754_pow+0xa44>)
 800d804:	440b      	add	r3, r1
 800d806:	4303      	orrs	r3, r0
 800d808:	d009      	beq.n	800d81e <__ieee754_pow+0x99e>
 800d80a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d80e:	2200      	movs	r2, #0
 800d810:	2300      	movs	r3, #0
 800d812:	f7f3 f8d3 	bl	80009bc <__aeabi_dcmplt>
 800d816:	3800      	subs	r0, #0
 800d818:	bf18      	it	ne
 800d81a:	2001      	movne	r0, #1
 800d81c:	e444      	b.n	800d0a8 <__ieee754_pow+0x228>
 800d81e:	4642      	mov	r2, r8
 800d820:	464b      	mov	r3, r9
 800d822:	f7f2 fca1 	bl	8000168 <__aeabi_dsub>
 800d826:	4632      	mov	r2, r6
 800d828:	463b      	mov	r3, r7
 800d82a:	f7f3 f8db 	bl	80009e4 <__aeabi_dcmpge>
 800d82e:	2800      	cmp	r0, #0
 800d830:	d1eb      	bne.n	800d80a <__ieee754_pow+0x98a>
 800d832:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800d8c8 <__ieee754_pow+0xa48>
 800d836:	e6fd      	b.n	800d634 <__ieee754_pow+0x7b4>
 800d838:	469a      	mov	sl, r3
 800d83a:	4b24      	ldr	r3, [pc, #144]	@ (800d8cc <__ieee754_pow+0xa4c>)
 800d83c:	459a      	cmp	sl, r3
 800d83e:	f63f aef9 	bhi.w	800d634 <__ieee754_pow+0x7b4>
 800d842:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d846:	e71b      	b.n	800d680 <__ieee754_pow+0x800>
 800d848:	4621      	mov	r1, r4
 800d84a:	e7d1      	b.n	800d7f0 <__ieee754_pow+0x970>
 800d84c:	2000      	movs	r0, #0
 800d84e:	491b      	ldr	r1, [pc, #108]	@ (800d8bc <__ieee754_pow+0xa3c>)
 800d850:	f7ff bb34 	b.w	800cebc <__ieee754_pow+0x3c>
 800d854:	2000      	movs	r0, #0
 800d856:	2100      	movs	r1, #0
 800d858:	f7ff bb30 	b.w	800cebc <__ieee754_pow+0x3c>
 800d85c:	4650      	mov	r0, sl
 800d85e:	4659      	mov	r1, fp
 800d860:	f7ff bb2c 	b.w	800cebc <__ieee754_pow+0x3c>
 800d864:	460c      	mov	r4, r1
 800d866:	f7ff bb79 	b.w	800cf5c <__ieee754_pow+0xdc>
 800d86a:	2400      	movs	r4, #0
 800d86c:	f7ff bb64 	b.w	800cf38 <__ieee754_pow+0xb8>
 800d870:	652b82fe 	.word	0x652b82fe
 800d874:	3c971547 	.word	0x3c971547
 800d878:	00000000 	.word	0x00000000
 800d87c:	3fe62e43 	.word	0x3fe62e43
 800d880:	fefa39ef 	.word	0xfefa39ef
 800d884:	3fe62e42 	.word	0x3fe62e42
 800d888:	0ca86c39 	.word	0x0ca86c39
 800d88c:	be205c61 	.word	0xbe205c61
 800d890:	72bea4d0 	.word	0x72bea4d0
 800d894:	3e663769 	.word	0x3e663769
 800d898:	c5d26bf1 	.word	0xc5d26bf1
 800d89c:	3ebbbd41 	.word	0x3ebbbd41
 800d8a0:	af25de2c 	.word	0xaf25de2c
 800d8a4:	3f11566a 	.word	0x3f11566a
 800d8a8:	16bebd93 	.word	0x16bebd93
 800d8ac:	3f66c16c 	.word	0x3f66c16c
 800d8b0:	5555553e 	.word	0x5555553e
 800d8b4:	3fc55555 	.word	0x3fc55555
 800d8b8:	fff00000 	.word	0xfff00000
 800d8bc:	3ff00000 	.word	0x3ff00000
 800d8c0:	4090cbff 	.word	0x4090cbff
 800d8c4:	3f6f3400 	.word	0x3f6f3400
 800d8c8:	4090cc00 	.word	0x4090cc00
 800d8cc:	3fe00000 	.word	0x3fe00000

0800d8d0 <fabs>:
 800d8d0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	4770      	bx	lr

0800d8d8 <scalbn>:
 800d8d8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800d8dc:	4616      	mov	r6, r2
 800d8de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d8e2:	4683      	mov	fp, r0
 800d8e4:	468c      	mov	ip, r1
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	b982      	cbnz	r2, 800d90c <scalbn+0x34>
 800d8ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d8ee:	4303      	orrs	r3, r0
 800d8f0:	d039      	beq.n	800d966 <scalbn+0x8e>
 800d8f2:	4b2f      	ldr	r3, [pc, #188]	@ (800d9b0 <scalbn+0xd8>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f7f2 fdef 	bl	80004d8 <__aeabi_dmul>
 800d8fa:	4b2e      	ldr	r3, [pc, #184]	@ (800d9b4 <scalbn+0xdc>)
 800d8fc:	4683      	mov	fp, r0
 800d8fe:	429e      	cmp	r6, r3
 800d900:	468c      	mov	ip, r1
 800d902:	da0d      	bge.n	800d920 <scalbn+0x48>
 800d904:	a326      	add	r3, pc, #152	@ (adr r3, 800d9a0 <scalbn+0xc8>)
 800d906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90a:	e01b      	b.n	800d944 <scalbn+0x6c>
 800d90c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800d910:	42ba      	cmp	r2, r7
 800d912:	d109      	bne.n	800d928 <scalbn+0x50>
 800d914:	4602      	mov	r2, r0
 800d916:	f7f2 fc29 	bl	800016c <__adddf3>
 800d91a:	4683      	mov	fp, r0
 800d91c:	468c      	mov	ip, r1
 800d91e:	e022      	b.n	800d966 <scalbn+0x8e>
 800d920:	460b      	mov	r3, r1
 800d922:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d926:	3a36      	subs	r2, #54	@ 0x36
 800d928:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d92c:	428e      	cmp	r6, r1
 800d92e:	dd0c      	ble.n	800d94a <scalbn+0x72>
 800d930:	a31d      	add	r3, pc, #116	@ (adr r3, 800d9a8 <scalbn+0xd0>)
 800d932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d936:	461c      	mov	r4, r3
 800d938:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800d93c:	f361 74df 	bfi	r4, r1, #31, #1
 800d940:	4621      	mov	r1, r4
 800d942:	481d      	ldr	r0, [pc, #116]	@ (800d9b8 <scalbn+0xe0>)
 800d944:	f7f2 fdc8 	bl	80004d8 <__aeabi_dmul>
 800d948:	e7e7      	b.n	800d91a <scalbn+0x42>
 800d94a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d94e:	4432      	add	r2, r6
 800d950:	428a      	cmp	r2, r1
 800d952:	dced      	bgt.n	800d930 <scalbn+0x58>
 800d954:	2a00      	cmp	r2, #0
 800d956:	dd0a      	ble.n	800d96e <scalbn+0x96>
 800d958:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d95c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d960:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d964:	46ac      	mov	ip, r5
 800d966:	4658      	mov	r0, fp
 800d968:	4661      	mov	r1, ip
 800d96a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800d96e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d972:	da09      	bge.n	800d988 <scalbn+0xb0>
 800d974:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800d978:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800d97c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800d980:	480e      	ldr	r0, [pc, #56]	@ (800d9bc <scalbn+0xe4>)
 800d982:	f041 011f 	orr.w	r1, r1, #31
 800d986:	e7bd      	b.n	800d904 <scalbn+0x2c>
 800d988:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d98c:	3236      	adds	r2, #54	@ 0x36
 800d98e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d992:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d996:	4658      	mov	r0, fp
 800d998:	4629      	mov	r1, r5
 800d99a:	2200      	movs	r2, #0
 800d99c:	4b08      	ldr	r3, [pc, #32]	@ (800d9c0 <scalbn+0xe8>)
 800d99e:	e7d1      	b.n	800d944 <scalbn+0x6c>
 800d9a0:	c2f8f359 	.word	0xc2f8f359
 800d9a4:	01a56e1f 	.word	0x01a56e1f
 800d9a8:	8800759c 	.word	0x8800759c
 800d9ac:	7e37e43c 	.word	0x7e37e43c
 800d9b0:	43500000 	.word	0x43500000
 800d9b4:	ffff3cb0 	.word	0xffff3cb0
 800d9b8:	8800759c 	.word	0x8800759c
 800d9bc:	c2f8f359 	.word	0xc2f8f359
 800d9c0:	3c900000 	.word	0x3c900000

0800d9c4 <with_errno>:
 800d9c4:	b570      	push	{r4, r5, r6, lr}
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	460d      	mov	r5, r1
 800d9ca:	4616      	mov	r6, r2
 800d9cc:	f7fb fada 	bl	8008f84 <__errno>
 800d9d0:	4629      	mov	r1, r5
 800d9d2:	6006      	str	r6, [r0, #0]
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	bd70      	pop	{r4, r5, r6, pc}

0800d9d8 <xflow>:
 800d9d8:	b513      	push	{r0, r1, r4, lr}
 800d9da:	4604      	mov	r4, r0
 800d9dc:	4619      	mov	r1, r3
 800d9de:	4610      	mov	r0, r2
 800d9e0:	b10c      	cbz	r4, 800d9e6 <xflow+0xe>
 800d9e2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d9e6:	e9cd 2300 	strd	r2, r3, [sp]
 800d9ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9ee:	f7f2 fd73 	bl	80004d8 <__aeabi_dmul>
 800d9f2:	2222      	movs	r2, #34	@ 0x22
 800d9f4:	b002      	add	sp, #8
 800d9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9fa:	f7ff bfe3 	b.w	800d9c4 <with_errno>

0800d9fe <__math_uflow>:
 800d9fe:	2200      	movs	r2, #0
 800da00:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800da04:	f7ff bfe8 	b.w	800d9d8 <xflow>

0800da08 <__math_oflow>:
 800da08:	2200      	movs	r2, #0
 800da0a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800da0e:	f7ff bfe3 	b.w	800d9d8 <xflow>
	...

0800da14 <__ieee754_sqrt>:
 800da14:	4a67      	ldr	r2, [pc, #412]	@ (800dbb4 <__ieee754_sqrt+0x1a0>)
 800da16:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da1a:	438a      	bics	r2, r1
 800da1c:	4606      	mov	r6, r0
 800da1e:	460f      	mov	r7, r1
 800da20:	460b      	mov	r3, r1
 800da22:	4604      	mov	r4, r0
 800da24:	d10e      	bne.n	800da44 <__ieee754_sqrt+0x30>
 800da26:	4602      	mov	r2, r0
 800da28:	f7f2 fd56 	bl	80004d8 <__aeabi_dmul>
 800da2c:	4602      	mov	r2, r0
 800da2e:	460b      	mov	r3, r1
 800da30:	4630      	mov	r0, r6
 800da32:	4639      	mov	r1, r7
 800da34:	f7f2 fb9a 	bl	800016c <__adddf3>
 800da38:	4606      	mov	r6, r0
 800da3a:	460f      	mov	r7, r1
 800da3c:	4630      	mov	r0, r6
 800da3e:	4639      	mov	r1, r7
 800da40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da44:	2900      	cmp	r1, #0
 800da46:	dc0c      	bgt.n	800da62 <__ieee754_sqrt+0x4e>
 800da48:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800da4c:	4302      	orrs	r2, r0
 800da4e:	d0f5      	beq.n	800da3c <__ieee754_sqrt+0x28>
 800da50:	b189      	cbz	r1, 800da76 <__ieee754_sqrt+0x62>
 800da52:	4602      	mov	r2, r0
 800da54:	f7f2 fb88 	bl	8000168 <__aeabi_dsub>
 800da58:	4602      	mov	r2, r0
 800da5a:	460b      	mov	r3, r1
 800da5c:	f7f2 fe66 	bl	800072c <__aeabi_ddiv>
 800da60:	e7ea      	b.n	800da38 <__ieee754_sqrt+0x24>
 800da62:	150a      	asrs	r2, r1, #20
 800da64:	d115      	bne.n	800da92 <__ieee754_sqrt+0x7e>
 800da66:	2100      	movs	r1, #0
 800da68:	e009      	b.n	800da7e <__ieee754_sqrt+0x6a>
 800da6a:	0ae3      	lsrs	r3, r4, #11
 800da6c:	3a15      	subs	r2, #21
 800da6e:	0564      	lsls	r4, r4, #21
 800da70:	2b00      	cmp	r3, #0
 800da72:	d0fa      	beq.n	800da6a <__ieee754_sqrt+0x56>
 800da74:	e7f7      	b.n	800da66 <__ieee754_sqrt+0x52>
 800da76:	460a      	mov	r2, r1
 800da78:	e7fa      	b.n	800da70 <__ieee754_sqrt+0x5c>
 800da7a:	005b      	lsls	r3, r3, #1
 800da7c:	3101      	adds	r1, #1
 800da7e:	02d8      	lsls	r0, r3, #11
 800da80:	d5fb      	bpl.n	800da7a <__ieee754_sqrt+0x66>
 800da82:	1e48      	subs	r0, r1, #1
 800da84:	1a12      	subs	r2, r2, r0
 800da86:	f1c1 0020 	rsb	r0, r1, #32
 800da8a:	fa24 f000 	lsr.w	r0, r4, r0
 800da8e:	4303      	orrs	r3, r0
 800da90:	408c      	lsls	r4, r1
 800da92:	2600      	movs	r6, #0
 800da94:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800da98:	2116      	movs	r1, #22
 800da9a:	07d2      	lsls	r2, r2, #31
 800da9c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800daa0:	4632      	mov	r2, r6
 800daa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800daa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800daaa:	bf5c      	itt	pl
 800daac:	005b      	lslpl	r3, r3, #1
 800daae:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800dab2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dab6:	bf58      	it	pl
 800dab8:	0064      	lslpl	r4, r4, #1
 800daba:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800dabe:	107f      	asrs	r7, r7, #1
 800dac0:	0064      	lsls	r4, r4, #1
 800dac2:	1815      	adds	r5, r2, r0
 800dac4:	429d      	cmp	r5, r3
 800dac6:	bfde      	ittt	le
 800dac8:	182a      	addle	r2, r5, r0
 800daca:	1b5b      	suble	r3, r3, r5
 800dacc:	1836      	addle	r6, r6, r0
 800dace:	0fe5      	lsrs	r5, r4, #31
 800dad0:	3901      	subs	r1, #1
 800dad2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800dad6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800dada:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800dade:	d1f0      	bne.n	800dac2 <__ieee754_sqrt+0xae>
 800dae0:	460d      	mov	r5, r1
 800dae2:	f04f 0a20 	mov.w	sl, #32
 800dae6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800daea:	429a      	cmp	r2, r3
 800daec:	eb01 0c00 	add.w	ip, r1, r0
 800daf0:	db02      	blt.n	800daf8 <__ieee754_sqrt+0xe4>
 800daf2:	d113      	bne.n	800db1c <__ieee754_sqrt+0x108>
 800daf4:	45a4      	cmp	ip, r4
 800daf6:	d811      	bhi.n	800db1c <__ieee754_sqrt+0x108>
 800daf8:	f1bc 0f00 	cmp.w	ip, #0
 800dafc:	eb0c 0100 	add.w	r1, ip, r0
 800db00:	da42      	bge.n	800db88 <__ieee754_sqrt+0x174>
 800db02:	2900      	cmp	r1, #0
 800db04:	db40      	blt.n	800db88 <__ieee754_sqrt+0x174>
 800db06:	f102 0e01 	add.w	lr, r2, #1
 800db0a:	1a9b      	subs	r3, r3, r2
 800db0c:	4672      	mov	r2, lr
 800db0e:	45a4      	cmp	ip, r4
 800db10:	bf88      	it	hi
 800db12:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800db16:	eba4 040c 	sub.w	r4, r4, ip
 800db1a:	4405      	add	r5, r0
 800db1c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800db20:	f1ba 0a01 	subs.w	sl, sl, #1
 800db24:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800db28:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800db2c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800db30:	d1db      	bne.n	800daea <__ieee754_sqrt+0xd6>
 800db32:	431c      	orrs	r4, r3
 800db34:	d01a      	beq.n	800db6c <__ieee754_sqrt+0x158>
 800db36:	4c20      	ldr	r4, [pc, #128]	@ (800dbb8 <__ieee754_sqrt+0x1a4>)
 800db38:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800dbbc <__ieee754_sqrt+0x1a8>
 800db3c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800db40:	e9db 2300 	ldrd	r2, r3, [fp]
 800db44:	f7f2 fb10 	bl	8000168 <__aeabi_dsub>
 800db48:	e9d4 8900 	ldrd	r8, r9, [r4]
 800db4c:	4602      	mov	r2, r0
 800db4e:	460b      	mov	r3, r1
 800db50:	4640      	mov	r0, r8
 800db52:	4649      	mov	r1, r9
 800db54:	f7f2 ff3c 	bl	80009d0 <__aeabi_dcmple>
 800db58:	b140      	cbz	r0, 800db6c <__ieee754_sqrt+0x158>
 800db5a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800db5e:	e9db 2300 	ldrd	r2, r3, [fp]
 800db62:	f1b5 3fff 	cmp.w	r5, #4294967295
 800db66:	d111      	bne.n	800db8c <__ieee754_sqrt+0x178>
 800db68:	4655      	mov	r5, sl
 800db6a:	3601      	adds	r6, #1
 800db6c:	1072      	asrs	r2, r6, #1
 800db6e:	086b      	lsrs	r3, r5, #1
 800db70:	07f1      	lsls	r1, r6, #31
 800db72:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800db76:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800db7a:	bf48      	it	mi
 800db7c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800db80:	4618      	mov	r0, r3
 800db82:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800db86:	e757      	b.n	800da38 <__ieee754_sqrt+0x24>
 800db88:	4696      	mov	lr, r2
 800db8a:	e7be      	b.n	800db0a <__ieee754_sqrt+0xf6>
 800db8c:	f7f2 faee 	bl	800016c <__adddf3>
 800db90:	e9d4 8900 	ldrd	r8, r9, [r4]
 800db94:	4602      	mov	r2, r0
 800db96:	460b      	mov	r3, r1
 800db98:	4640      	mov	r0, r8
 800db9a:	4649      	mov	r1, r9
 800db9c:	f7f2 ff0e 	bl	80009bc <__aeabi_dcmplt>
 800dba0:	b120      	cbz	r0, 800dbac <__ieee754_sqrt+0x198>
 800dba2:	1ca8      	adds	r0, r5, #2
 800dba4:	bf08      	it	eq
 800dba6:	3601      	addeq	r6, #1
 800dba8:	3502      	adds	r5, #2
 800dbaa:	e7df      	b.n	800db6c <__ieee754_sqrt+0x158>
 800dbac:	1c6b      	adds	r3, r5, #1
 800dbae:	f023 0501 	bic.w	r5, r3, #1
 800dbb2:	e7db      	b.n	800db6c <__ieee754_sqrt+0x158>
 800dbb4:	7ff00000 	.word	0x7ff00000
 800dbb8:	200001f0 	.word	0x200001f0
 800dbbc:	200001e8 	.word	0x200001e8

0800dbc0 <_init>:
 800dbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc2:	bf00      	nop
 800dbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbc6:	bc08      	pop	{r3}
 800dbc8:	469e      	mov	lr, r3
 800dbca:	4770      	bx	lr

0800dbcc <_fini>:
 800dbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbce:	bf00      	nop
 800dbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbd2:	bc08      	pop	{r3}
 800dbd4:	469e      	mov	lr, r3
 800dbd6:	4770      	bx	lr
